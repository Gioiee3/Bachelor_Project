
Node_Wind.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800c2d8  0800c2d8  0001c2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbfc  0800cbfc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc04  0800cc04  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc08  0800cc08  0001cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cc0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001f8  0800ce04  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  0800ce04  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c79  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f3e  00000000  00000000  00035e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00039dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bac5  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca50  00000000  00000000  00057e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913b6  00000000  00000000  0007486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006040  00000000  00000000  00105c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2c0 	.word	0x0800c2c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c2c0 	.word	0x0800c2c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_uldivmod>:
 8001064:	b953      	cbnz	r3, 800107c <__aeabi_uldivmod+0x18>
 8001066:	b94a      	cbnz	r2, 800107c <__aeabi_uldivmod+0x18>
 8001068:	2900      	cmp	r1, #0
 800106a:	bf08      	it	eq
 800106c:	2800      	cmpeq	r0, #0
 800106e:	bf1c      	itt	ne
 8001070:	f04f 31ff 	movne.w	r1, #4294967295
 8001074:	f04f 30ff 	movne.w	r0, #4294967295
 8001078:	f000 b976 	b.w	8001368 <__aeabi_idiv0>
 800107c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001080:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001084:	f000 f806 	bl	8001094 <__udivmoddi4>
 8001088:	f8dd e004 	ldr.w	lr, [sp, #4]
 800108c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001090:	b004      	add	sp, #16
 8001092:	4770      	bx	lr

08001094 <__udivmoddi4>:
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001098:	9e08      	ldr	r6, [sp, #32]
 800109a:	460d      	mov	r5, r1
 800109c:	4604      	mov	r4, r0
 800109e:	4688      	mov	r8, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d14d      	bne.n	8001140 <__udivmoddi4+0xac>
 80010a4:	428a      	cmp	r2, r1
 80010a6:	4694      	mov	ip, r2
 80010a8:	d968      	bls.n	800117c <__udivmoddi4+0xe8>
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	b152      	cbz	r2, 80010c6 <__udivmoddi4+0x32>
 80010b0:	fa01 f302 	lsl.w	r3, r1, r2
 80010b4:	f1c2 0120 	rsb	r1, r2, #32
 80010b8:	fa20 f101 	lsr.w	r1, r0, r1
 80010bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010c0:	ea41 0803 	orr.w	r8, r1, r3
 80010c4:	4094      	lsls	r4, r2
 80010c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80010ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80010ce:	fa1f fe8c 	uxth.w	lr, ip
 80010d2:	fb01 8817 	mls	r8, r1, r7, r8
 80010d6:	fb07 f00e 	mul.w	r0, r7, lr
 80010da:	0c23      	lsrs	r3, r4, #16
 80010dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010e0:	4298      	cmp	r0, r3
 80010e2:	d90a      	bls.n	80010fa <__udivmoddi4+0x66>
 80010e4:	eb1c 0303 	adds.w	r3, ip, r3
 80010e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80010ec:	f080 811e 	bcs.w	800132c <__udivmoddi4+0x298>
 80010f0:	4298      	cmp	r0, r3
 80010f2:	f240 811b 	bls.w	800132c <__udivmoddi4+0x298>
 80010f6:	3f02      	subs	r7, #2
 80010f8:	4463      	add	r3, ip
 80010fa:	1a1b      	subs	r3, r3, r0
 80010fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8001100:	fb01 3310 	mls	r3, r1, r0, r3
 8001104:	fb00 fe0e 	mul.w	lr, r0, lr
 8001108:	b2a4      	uxth	r4, r4
 800110a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800110e:	45a6      	cmp	lr, r4
 8001110:	d90a      	bls.n	8001128 <__udivmoddi4+0x94>
 8001112:	eb1c 0404 	adds.w	r4, ip, r4
 8001116:	f100 33ff 	add.w	r3, r0, #4294967295
 800111a:	f080 8109 	bcs.w	8001330 <__udivmoddi4+0x29c>
 800111e:	45a6      	cmp	lr, r4
 8001120:	f240 8106 	bls.w	8001330 <__udivmoddi4+0x29c>
 8001124:	4464      	add	r4, ip
 8001126:	3802      	subs	r0, #2
 8001128:	2100      	movs	r1, #0
 800112a:	eba4 040e 	sub.w	r4, r4, lr
 800112e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001132:	b11e      	cbz	r6, 800113c <__udivmoddi4+0xa8>
 8001134:	2300      	movs	r3, #0
 8001136:	40d4      	lsrs	r4, r2
 8001138:	e9c6 4300 	strd	r4, r3, [r6]
 800113c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001140:	428b      	cmp	r3, r1
 8001142:	d908      	bls.n	8001156 <__udivmoddi4+0xc2>
 8001144:	2e00      	cmp	r6, #0
 8001146:	f000 80ee 	beq.w	8001326 <__udivmoddi4+0x292>
 800114a:	2100      	movs	r1, #0
 800114c:	e9c6 0500 	strd	r0, r5, [r6]
 8001150:	4608      	mov	r0, r1
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	fab3 f183 	clz	r1, r3
 800115a:	2900      	cmp	r1, #0
 800115c:	d14a      	bne.n	80011f4 <__udivmoddi4+0x160>
 800115e:	42ab      	cmp	r3, r5
 8001160:	d302      	bcc.n	8001168 <__udivmoddi4+0xd4>
 8001162:	4282      	cmp	r2, r0
 8001164:	f200 80fc 	bhi.w	8001360 <__udivmoddi4+0x2cc>
 8001168:	1a84      	subs	r4, r0, r2
 800116a:	eb65 0303 	sbc.w	r3, r5, r3
 800116e:	2001      	movs	r0, #1
 8001170:	4698      	mov	r8, r3
 8001172:	2e00      	cmp	r6, #0
 8001174:	d0e2      	beq.n	800113c <__udivmoddi4+0xa8>
 8001176:	e9c6 4800 	strd	r4, r8, [r6]
 800117a:	e7df      	b.n	800113c <__udivmoddi4+0xa8>
 800117c:	b902      	cbnz	r2, 8001180 <__udivmoddi4+0xec>
 800117e:	deff      	udf	#255	; 0xff
 8001180:	fab2 f282 	clz	r2, r2
 8001184:	2a00      	cmp	r2, #0
 8001186:	f040 8091 	bne.w	80012ac <__udivmoddi4+0x218>
 800118a:	eba1 000c 	sub.w	r0, r1, ip
 800118e:	2101      	movs	r1, #1
 8001190:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001194:	fa1f fe8c 	uxth.w	lr, ip
 8001198:	fbb0 f3f7 	udiv	r3, r0, r7
 800119c:	fb07 0013 	mls	r0, r7, r3, r0
 80011a0:	0c25      	lsrs	r5, r4, #16
 80011a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011a6:	fb0e f003 	mul.w	r0, lr, r3
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x12c>
 80011ae:	eb1c 0505 	adds.w	r5, ip, r5
 80011b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80011b6:	d202      	bcs.n	80011be <__udivmoddi4+0x12a>
 80011b8:	42a8      	cmp	r0, r5
 80011ba:	f200 80ce 	bhi.w	800135a <__udivmoddi4+0x2c6>
 80011be:	4643      	mov	r3, r8
 80011c0:	1a2d      	subs	r5, r5, r0
 80011c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80011c6:	fb07 5510 	mls	r5, r7, r0, r5
 80011ca:	fb0e fe00 	mul.w	lr, lr, r0
 80011ce:	b2a4      	uxth	r4, r4
 80011d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011d4:	45a6      	cmp	lr, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x156>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x154>
 80011e2:	45a6      	cmp	lr, r4
 80011e4:	f200 80b6 	bhi.w	8001354 <__udivmoddi4+0x2c0>
 80011e8:	4628      	mov	r0, r5
 80011ea:	eba4 040e 	sub.w	r4, r4, lr
 80011ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011f2:	e79e      	b.n	8001132 <__udivmoddi4+0x9e>
 80011f4:	f1c1 0720 	rsb	r7, r1, #32
 80011f8:	408b      	lsls	r3, r1
 80011fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001202:	fa25 fa07 	lsr.w	sl, r5, r7
 8001206:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800120a:	fbba f8f9 	udiv	r8, sl, r9
 800120e:	fa20 f307 	lsr.w	r3, r0, r7
 8001212:	fb09 aa18 	mls	sl, r9, r8, sl
 8001216:	408d      	lsls	r5, r1
 8001218:	fa1f fe8c 	uxth.w	lr, ip
 800121c:	431d      	orrs	r5, r3
 800121e:	fa00 f301 	lsl.w	r3, r0, r1
 8001222:	fb08 f00e 	mul.w	r0, r8, lr
 8001226:	0c2c      	lsrs	r4, r5, #16
 8001228:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800122c:	42a0      	cmp	r0, r4
 800122e:	fa02 f201 	lsl.w	r2, r2, r1
 8001232:	d90b      	bls.n	800124c <__udivmoddi4+0x1b8>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f108 3aff 	add.w	sl, r8, #4294967295
 800123c:	f080 8088 	bcs.w	8001350 <__udivmoddi4+0x2bc>
 8001240:	42a0      	cmp	r0, r4
 8001242:	f240 8085 	bls.w	8001350 <__udivmoddi4+0x2bc>
 8001246:	f1a8 0802 	sub.w	r8, r8, #2
 800124a:	4464      	add	r4, ip
 800124c:	1a24      	subs	r4, r4, r0
 800124e:	fbb4 f0f9 	udiv	r0, r4, r9
 8001252:	fb09 4410 	mls	r4, r9, r0, r4
 8001256:	fb00 fe0e 	mul.w	lr, r0, lr
 800125a:	b2ad      	uxth	r5, r5
 800125c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001260:	45a6      	cmp	lr, r4
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0x1e2>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f100 35ff 	add.w	r5, r0, #4294967295
 800126c:	d26c      	bcs.n	8001348 <__udivmoddi4+0x2b4>
 800126e:	45a6      	cmp	lr, r4
 8001270:	d96a      	bls.n	8001348 <__udivmoddi4+0x2b4>
 8001272:	3802      	subs	r0, #2
 8001274:	4464      	add	r4, ip
 8001276:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800127a:	fba0 9502 	umull	r9, r5, r0, r2
 800127e:	eba4 040e 	sub.w	r4, r4, lr
 8001282:	42ac      	cmp	r4, r5
 8001284:	46c8      	mov	r8, r9
 8001286:	46ae      	mov	lr, r5
 8001288:	d356      	bcc.n	8001338 <__udivmoddi4+0x2a4>
 800128a:	d053      	beq.n	8001334 <__udivmoddi4+0x2a0>
 800128c:	2e00      	cmp	r6, #0
 800128e:	d069      	beq.n	8001364 <__udivmoddi4+0x2d0>
 8001290:	ebb3 0208 	subs.w	r2, r3, r8
 8001294:	eb64 040e 	sbc.w	r4, r4, lr
 8001298:	fa22 f301 	lsr.w	r3, r2, r1
 800129c:	fa04 f707 	lsl.w	r7, r4, r7
 80012a0:	431f      	orrs	r7, r3
 80012a2:	40cc      	lsrs	r4, r1
 80012a4:	e9c6 7400 	strd	r7, r4, [r6]
 80012a8:	2100      	movs	r1, #0
 80012aa:	e747      	b.n	800113c <__udivmoddi4+0xa8>
 80012ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80012b0:	f1c2 0120 	rsb	r1, r2, #32
 80012b4:	fa25 f301 	lsr.w	r3, r5, r1
 80012b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012bc:	fa20 f101 	lsr.w	r1, r0, r1
 80012c0:	4095      	lsls	r5, r2
 80012c2:	430d      	orrs	r5, r1
 80012c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80012c8:	fb07 3311 	mls	r3, r7, r1, r3
 80012cc:	fa1f fe8c 	uxth.w	lr, ip
 80012d0:	0c28      	lsrs	r0, r5, #16
 80012d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012d6:	fb01 f30e 	mul.w	r3, r1, lr
 80012da:	4283      	cmp	r3, r0
 80012dc:	fa04 f402 	lsl.w	r4, r4, r2
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x260>
 80012e2:	eb1c 0000 	adds.w	r0, ip, r0
 80012e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80012ea:	d22f      	bcs.n	800134c <__udivmoddi4+0x2b8>
 80012ec:	4283      	cmp	r3, r0
 80012ee:	d92d      	bls.n	800134c <__udivmoddi4+0x2b8>
 80012f0:	3902      	subs	r1, #2
 80012f2:	4460      	add	r0, ip
 80012f4:	1ac0      	subs	r0, r0, r3
 80012f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80012fa:	fb07 0013 	mls	r0, r7, r3, r0
 80012fe:	b2ad      	uxth	r5, r5
 8001300:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001304:	fb03 f00e 	mul.w	r0, r3, lr
 8001308:	42a8      	cmp	r0, r5
 800130a:	d908      	bls.n	800131e <__udivmoddi4+0x28a>
 800130c:	eb1c 0505 	adds.w	r5, ip, r5
 8001310:	f103 38ff 	add.w	r8, r3, #4294967295
 8001314:	d216      	bcs.n	8001344 <__udivmoddi4+0x2b0>
 8001316:	42a8      	cmp	r0, r5
 8001318:	d914      	bls.n	8001344 <__udivmoddi4+0x2b0>
 800131a:	3b02      	subs	r3, #2
 800131c:	4465      	add	r5, ip
 800131e:	1a28      	subs	r0, r5, r0
 8001320:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001324:	e738      	b.n	8001198 <__udivmoddi4+0x104>
 8001326:	4631      	mov	r1, r6
 8001328:	4630      	mov	r0, r6
 800132a:	e707      	b.n	800113c <__udivmoddi4+0xa8>
 800132c:	462f      	mov	r7, r5
 800132e:	e6e4      	b.n	80010fa <__udivmoddi4+0x66>
 8001330:	4618      	mov	r0, r3
 8001332:	e6f9      	b.n	8001128 <__udivmoddi4+0x94>
 8001334:	454b      	cmp	r3, r9
 8001336:	d2a9      	bcs.n	800128c <__udivmoddi4+0x1f8>
 8001338:	ebb9 0802 	subs.w	r8, r9, r2
 800133c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001340:	3801      	subs	r0, #1
 8001342:	e7a3      	b.n	800128c <__udivmoddi4+0x1f8>
 8001344:	4643      	mov	r3, r8
 8001346:	e7ea      	b.n	800131e <__udivmoddi4+0x28a>
 8001348:	4628      	mov	r0, r5
 800134a:	e794      	b.n	8001276 <__udivmoddi4+0x1e2>
 800134c:	4641      	mov	r1, r8
 800134e:	e7d1      	b.n	80012f4 <__udivmoddi4+0x260>
 8001350:	46d0      	mov	r8, sl
 8001352:	e77b      	b.n	800124c <__udivmoddi4+0x1b8>
 8001354:	4464      	add	r4, ip
 8001356:	3802      	subs	r0, #2
 8001358:	e747      	b.n	80011ea <__udivmoddi4+0x156>
 800135a:	3b02      	subs	r3, #2
 800135c:	4465      	add	r5, ip
 800135e:	e72f      	b.n	80011c0 <__udivmoddi4+0x12c>
 8001360:	4608      	mov	r0, r1
 8001362:	e706      	b.n	8001172 <__udivmoddi4+0xde>
 8001364:	4631      	mov	r1, r6
 8001366:	e6e9      	b.n	800113c <__udivmoddi4+0xa8>

08001368 <__aeabi_idiv0>:
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_ADC1_Init+0x94>)
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <MX_ADC1_Init+0x98>)
 8001380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_ADC1_Init+0x94>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_ADC1_Init+0x94>)
 800138c:	2201      	movs	r2, #1
 800138e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_ADC1_Init+0x94>)
 8001392:	2200      	movs	r2, #0
 8001394:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_ADC1_Init+0x94>)
 8001398:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800139c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_ADC1_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_ADC1_Init+0x94>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_ADC1_Init+0x94>)
 80013ac:	f002 fdb6 	bl	8003f1c <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80013b6:	f001 fd31 	bl	8002e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013be:	2301      	movs	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013c2:	2307      	movs	r3, #7
 80013c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_ADC1_Init+0x94>)
 80013cc:	f002 ffc4 	bl	8004358 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013d6:	f001 fd21 	bl	8002e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013da:	2305      	movs	r3, #5
 80013dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013de:	2302      	movs	r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_ADC1_Init+0x94>)
 80013e8:	f002 ffb6 	bl	8004358 <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f001 fd13 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000214 	.word	0x20000214
 8001404:	40012400 	.word	0x40012400

08001408 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <HAL_ADC_MspInit+0xbc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d149      	bne.n	80014bc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_ADC_MspInit+0xc0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001458:	2330      	movs	r3, #48	; 0x30
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145c:	2303      	movs	r3, #3
 800145e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	4819      	ldr	r0, [pc, #100]	; (80014cc <HAL_ADC_MspInit+0xc4>)
 8001468:	f003 ff44 	bl	80052f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 800146e:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_ADC_MspInit+0xcc>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001486:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001496:	2220      	movs	r2, #32
 8001498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014a2:	f003 fa7b 	bl	800499c <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80014ac:	f001 fcb6 	bl	8002e1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000244 	.word	0x20000244
 80014d4:	40020008 	.word	0x40020008

080014d8 <AHT20_init>:

#include "aht20.h"

#define AHT20_ADDR		0x70

void AHT20_init(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af02      	add	r7, sp, #8
	uint8_t readBufer;
	HAL_Delay(40);
 80014de:	2028      	movs	r0, #40	; 0x28
 80014e0:	f002 fcf8 	bl	8003ed4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDR, &readBufer, 1, 100);
 80014e4:	1dfa      	adds	r2, r7, #7
 80014e6:	2364      	movs	r3, #100	; 0x64
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	2170      	movs	r1, #112	; 0x70
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <AHT20_init+0x50>)
 80014f0:	f004 fbfc 	bl	8005cec <HAL_I2C_Master_Receive>
	if((readBufer & 0x08) == 0x00){
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <AHT20_init+0x46>
		uint8_t sendBuffer[3]={0xBE, 0x08, 0x00};
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <AHT20_init+0x54>)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	8019      	strh	r1, [r3, #0]
 8001508:	3302      	adds	r3, #2
 800150a:	0c12      	lsrs	r2, r2, #16
 800150c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, sendBuffer, 3, 100);
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2303      	movs	r3, #3
 8001516:	2170      	movs	r1, #112	; 0x70
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <AHT20_init+0x50>)
 800151a:	f004 fae9 	bl	8005af0 <HAL_I2C_Master_Transmit>
	}
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000298 	.word	0x20000298
 800152c:	0800c2d8 	.word	0x0800c2d8

08001530 <AHT20_read>:

void AHT20_read(float *temp, float *humid){
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	uint8_t sendBuffer[3]={0xAC, 0x33, 0x00};
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <AHT20_read+0xd8>)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	8019      	strh	r1, [r3, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	701a      	strb	r2, [r3, #0]
	uint8_t readBuffer[6];
	HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDR, sendBuffer, 3, 100);
 800154c:	f107 0210 	add.w	r2, r7, #16
 8001550:	2364      	movs	r3, #100	; 0x64
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2303      	movs	r3, #3
 8001556:	2170      	movs	r1, #112	; 0x70
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <AHT20_read+0xdc>)
 800155a:	f004 fac9 	bl	8005af0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 800155e:	2050      	movs	r0, #80	; 0x50
 8001560:	f002 fcb8 	bl	8003ed4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDR, readBuffer, 6, 100);
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	2364      	movs	r3, #100	; 0x64
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2306      	movs	r3, #6
 800156e:	2170      	movs	r1, #112	; 0x70
 8001570:	4826      	ldr	r0, [pc, #152]	; (800160c <AHT20_read+0xdc>)
 8001572:	f004 fbbb 	bl	8005cec <HAL_I2C_Master_Receive>
	if((readBuffer[0] & 0x80)==0x00){
 8001576:	7a3b      	ldrb	r3, [r7, #8]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	db3f      	blt.n	80015fe <AHT20_read+0xce>
		uint32_t data=0;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
		data = ((uint32_t)readBuffer[3]>>4) + ((uint32_t)readBuffer[2]<<4) + ((uint32_t)readBuffer[1]<<12);
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	441a      	add	r2, r3
 8001590:	7a7b      	ldrb	r3, [r7, #9]
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
		*humid = data*100.0f/(1<<20);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff fb9b 	bl	8000cd4 <__aeabi_ui2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	491b      	ldr	r1, [pc, #108]	; (8001610 <AHT20_read+0xe0>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbee 	bl	8000d84 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fc9c 	bl	8000eec <__aeabi_fdiv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]

		data = (((uint32_t)readBuffer[3] & 0x0F) <<16) + ((uint32_t)readBuffer[4]<<8) + ((uint32_t)readBuffer[5]);
 80015bc:	7afb      	ldrb	r3, [r7, #11]
 80015be:	041b      	lsls	r3, r3, #16
 80015c0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	4413      	add	r3, r2
 80015ca:	7b7a      	ldrb	r2, [r7, #13]
 80015cc:	4413      	add	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
		*temp = data*200.0f/(1<<20)-50;
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff fb7f 	bl	8000cd4 <__aeabi_ui2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <AHT20_read+0xe4>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbd2 	bl	8000d84 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fc80 	bl	8000eec <__aeabi_fdiv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <AHT20_read+0xe8>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fabd 	bl	8000b70 <__aeabi_fsub>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
	}
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800c2dc 	.word	0x0800c2dc
 800160c:	20000298 	.word	0x20000298
 8001610:	42c80000 	.word	0x42c80000
 8001614:	43480000 	.word	0x43480000
 8001618:	42480000 	.word	0x42480000

0800161c <LOG>:
#include "common.h"

static const char *TAG = "COMMON";

void LOG(const char *TAG, char *data)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09c      	sub	sp, #112	; 0x70
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2260      	movs	r2, #96	; 0x60
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f007 ff70 	bl	8009518 <memset>
	sprintf(data_log, "%s: %s\n", TAG, data);
 8001638:	f107 000c 	add.w	r0, r7, #12
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	4909      	ldr	r1, [pc, #36]	; (8001668 <LOG+0x4c>)
 8001642:	f008 fbd1 	bl	8009de8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)data_log, strlen(data_log), 100);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe fd80 	bl	8000150 <strlen>
 8001650:	4603      	mov	r3, r0
 8001652:	b29a      	uxth	r2, r3
 8001654:	f107 010c 	add.w	r1, r7, #12
 8001658:	2364      	movs	r3, #100	; 0x64
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <LOG+0x50>)
 800165c:	f007 f8c6 	bl	80087ec <HAL_UART_Transmit>
}
 8001660:	bf00      	nop
 8001662:	3770      	adds	r7, #112	; 0x70
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	0800c2e8 	.word	0x0800c2e8
 800166c:	2000061c 	.word	0x2000061c

08001670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_DMA_Init+0x38>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <MX_DMA_Init+0x38>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_DMA_Init+0x38>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200b      	movs	r0, #11
 8001694:	f003 f947 	bl	8004926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001698:	200b      	movs	r0, #11
 800169a:	f003 f960 	bl	800495e <HAL_NVIC_EnableIRQ>

}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <GetPage>:
#include "flash.h"



static uint32_t GetPage(uint32_t Address)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    uint32_t address = Address - (uint32_t)0x08000000U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80016ba:	60fb      	str	r3, [r7, #12]
    uint32_t mentissa = (uint32_t)(address / 1024U); // Each Sector is 1 KB
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	0a9b      	lsrs	r3, r3, #10
 80016c0:	60bb      	str	r3, [r7, #8]

    return mentissa;
 80016c2:	68bb      	ldr	r3, [r7, #8]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <Flash_Write_Data>:

uint32_t Flash_Write_Data(uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PAGEError;
    int sofar = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 80016e2:	f003 fc6d 	bl	8004fc0 <HAL_FLASH_Unlock>

    /* Erase the user Flash area*/

    uint32_t StartPage = GetPage(StartPageAddress);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff ffe0 	bl	80016ac <GetPage>
 80016ec:	6238      	str	r0, [r7, #32]
    uint32_t EndPageAdress = StartPageAddress + numberofwords * 4;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	61fb      	str	r3, [r7, #28]
    uint32_t EndPage = GetPage(EndPageAdress);
 80016fa:	69f8      	ldr	r0, [r7, #28]
 80016fc:	f7ff ffd6 	bl	80016ac <GetPage>
 8001700:	61b8      	str	r0, [r7, #24]

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <Flash_Write_Data+0xb4>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
    EraseInitStruct.PageAddress = StartPageAddress;
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <Flash_Write_Data+0xb4>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6093      	str	r3, [r2, #8]
    EraseInitStruct.NbPages = ((EndPage - StartPage) / FLASH_PAGE_SIZE) + 1;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	0a9b      	lsrs	r3, r3, #10
 8001716:	3301      	adds	r3, #1
 8001718:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <Flash_Write_Data+0xb4>)
 800171a:	60d3      	str	r3, [r2, #12]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <Flash_Write_Data+0xb4>)
 8001724:	f003 fd3e 	bl	80051a4 <HAL_FLASHEx_Erase>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01f      	beq.n	800176e <Flash_Write_Data+0x9e>
    {
        /*Error occurred while page erase.*/
        return HAL_FLASH_GetError();
 800172e:	f003 fc7d 	bl	800502c <HAL_FLASH_GetError>
 8001732:	4603      	mov	r3, r0
 8001734:	e022      	b.n	800177c <Flash_Write_Data+0xac>

    /* Program the user Flash area word by word*/

    while (sofar < numberofwords)
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, (uint32_t)*Data) == HAL_OK)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	461c      	mov	r4, r3
 800173e:	4615      	mov	r5, r2
 8001740:	4622      	mov	r2, r4
 8001742:	462b      	mov	r3, r5
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	2002      	movs	r0, #2
 8001748:	f003 fbca 	bl	8004ee0 <HAL_FLASH_Program>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <Flash_Write_Data+0x96>
        {
            StartPageAddress += 4; // use StartPageAddress += 2 for half word and 8 for double word
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
            Data++;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3304      	adds	r3, #4
 800175c:	60bb      	str	r3, [r7, #8]
            sofar++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
 8001764:	e003      	b.n	800176e <Flash_Write_Data+0x9e>
        }
        else
        {
            /* Error occurred while writing data in Flash memory*/
            return HAL_FLASH_GetError();
 8001766:	f003 fc61 	bl	800502c <HAL_FLASH_GetError>
 800176a:	4603      	mov	r3, r0
 800176c:	e006      	b.n	800177c <Flash_Write_Data+0xac>
    while (sofar < numberofwords)
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	429a      	cmp	r2, r3
 8001774:	dbdf      	blt.n	8001736 <Flash_Write_Data+0x66>
        }
    }

    /* Lock the Flash to disable the flash control register access (recommended
       to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8001776:	f003 fc49 	bl	800500c <HAL_FLASH_Lock>

    return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	20000288 	.word	0x20000288

08001788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179c:	4b51      	ldr	r3, [pc, #324]	; (80018e4 <MX_GPIO_Init+0x15c>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a50      	ldr	r2, [pc, #320]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b4e      	ldr	r3, [pc, #312]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a44      	ldr	r2, [pc, #272]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a3e      	ldr	r2, [pc, #248]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <MX_GPIO_Init+0x15c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001802:	4839      	ldr	r0, [pc, #228]	; (80018e8 <MX_GPIO_Init+0x160>)
 8001804:	f003 ffb6 	bl	8005774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PWR_SEN_Pin|LoRa_RST_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f241 0141 	movw	r1, #4161	; 0x1041
 800180e:	4837      	ldr	r0, [pc, #220]	; (80018ec <MX_GPIO_Init+0x164>)
 8001810:	f003 ffb0 	bl	8005774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800181a:	4835      	ldr	r0, [pc, #212]	; (80018f0 <MX_GPIO_Init+0x168>)
 800181c:	f003 ffaa 	bl	8005774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	482b      	ldr	r0, [pc, #172]	; (80018e8 <MX_GPIO_Init+0x160>)
 800183a:	f003 fd5b 	bl	80052f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PWR_SEN_Pin;
 800183e:	f241 0301 	movw	r3, #4097	; 0x1001
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2302      	movs	r3, #2
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4825      	ldr	r0, [pc, #148]	; (80018ec <MX_GPIO_Init+0x164>)
 8001858:	f003 fd4c 	bl	80052f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_EXT0_Pin;
 800185c:	2302      	movs	r3, #2
 800185e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <MX_GPIO_Init+0x16c>)
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LoRa_EXT0_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <MX_GPIO_Init+0x164>)
 8001870:	f003 fd40 	bl	80052f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DE_Pin;
 8001874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DE_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4818      	ldr	r0, [pc, #96]	; (80018f0 <MX_GPIO_Init+0x168>)
 800188e:	f003 fd31 	bl	80052f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4811      	ldr	r0, [pc, #68]	; (80018f0 <MX_GPIO_Init+0x168>)
 80018ac:	f003 fd22 	bl	80052f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LoRa_RST_Pin;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2302      	movs	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LoRa_RST_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_GPIO_Init+0x164>)
 80018c8:	f003 fd14 	bl	80052f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2007      	movs	r0, #7
 80018d2:	f003 f828 	bl	8004926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018d6:	2007      	movs	r0, #7
 80018d8:	f003 f841 	bl	800495e <HAL_NVIC_EnableIRQ>

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40010800 	.word	0x40010800
 80018f4:	10110000 	.word	0x10110000

080018f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f003 ff67 	bl	8005808 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f001 fa6c 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000298 	.word	0x20000298
 800194c:	40005400 	.word	0x40005400
 8001950:	000186a0 	.word	0x000186a0

08001954 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_I2C_MspInit+0x90>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d132      	bne.n	80019da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800198c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001992:	2312      	movs	r3, #18
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <HAL_I2C_MspInit+0x98>)
 80019a2:	f003 fca7 	bl	80052f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_I2C_MspInit+0x9c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_I2C_MspInit+0x9c>)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 80019c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019cc:	61d3      	str	r3, [r2, #28]
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_I2C_MspInit+0x94>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40010000 	.word	0x40010000

080019f4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_I2C_MspDeInit+0x3c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10f      	bne.n	8001a26 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_I2C_MspDeInit+0x40>)
 8001a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a10:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <HAL_I2C_MspDeInit+0x44>)
 8001a18:	f003 fdf0 	bl	80055fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_I2C_MspDeInit+0x44>)
 8001a22:	f003 fdeb 	bl	80055fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010c00 	.word	0x40010c00

08001a3c <modbus_tx_data>:
float t, h;

uint32_t pre_time = 0, cur_time = 0;

void modbus_tx_data(uint8_t address)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	uart1_tx_data[0] = address; // slave address
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	7013      	strb	r3, [r2, #0]
	uart1_tx_data[1] = 0x03; // Function code for Read Input Registers (0x03)
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a4e:	2203      	movs	r2, #3
 8001a50:	705a      	strb	r2, [r3, #1]

	// where we want to start reading
	// The Register address will be 00000000 00000000 (40001)
	uart1_tx_data[2] = 0x00;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	709a      	strb	r2, [r3, #2]
	uart1_tx_data[3] = 0x00;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	70da      	strb	r2, [r3, #3]

	// this 2 byte indicate how many 16-bit register we want to read.
	// we will read 2, 16-bit data register from_
	// 00000000 00000000 to 00000000 00000001 (from 40001 to 40002 according to salve datasheet)
	uart1_tx_data[4] = 0x00;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	711a      	strb	r2, [r3, #4]
	uart1_tx_data[5] = 0x02; //Sensor wind speed is 0x01, direction is 0x02
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a66:	2202      	movs	r2, #2
 8001a68:	715a      	strb	r2, [r3, #5]

	// CRC Check function
	uint16_t crc = crc16(uart1_tx_data, 6);
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a6e:	f001 f9db 	bl	8002e28 <crc16>
 8001a72:	4603      	mov	r3, r0
 8001a74:	81fb      	strh	r3, [r7, #14]
	uart1_tx_data[6] = crc & 0xFF; //CRC LOW
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a7c:	719a      	strb	r2, [r3, #6]
	uart1_tx_data[7] = (crc >> 8) & 0xFF; //CRC HIGH
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a88:	71da      	strb	r2, [r3, #7]

	// set DE,RE pin HIGH to set max485 as transmitter mode
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <modbus_tx_data+0x80>)
 8001a92:	f003 fe6f 	bl	8005774 <HAL_GPIO_WritePin>
	// sending the uart1_tx_data array
	HAL_UART_Transmit(&huart1, uart1_tx_data, 8, 1000);
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	4906      	ldr	r1, [pc, #24]	; (8001ab8 <modbus_tx_data+0x7c>)
 8001a9e:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <modbus_tx_data+0x84>)
 8001aa0:	f006 fea4 	bl	80087ec <HAL_UART_Transmit>
	// set DE,RE pin LOW to set max485 as receiver mode
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	4804      	ldr	r0, [pc, #16]	; (8001abc <modbus_tx_data+0x80>)
 8001aac:	f003 fe62 	bl	8005774 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000460 	.word	0x20000460
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	200005d4 	.word	0x200005d4

08001ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aca:	f002 f9a1 	bl	8003e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ace:	f000 f939 	bl	8001d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad2:	f7ff fe59 	bl	8001788 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad6:	f7ff fdcb 	bl	8001670 <MX_DMA_Init>
  MX_SPI1_Init();
 8001ada:	f001 fa51 	bl	8002f80 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001ade:	f7ff fc45 	bl	800136c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001ae2:	f002 f829 	bl	8003b38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ae6:	f002 f851 	bl	8003b8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001aea:	f002 f879 	bl	8003be0 <MX_USART3_UART_Init>
//  MX_I2C1_Init();
  MX_RTC_Init();
 8001aee:	f001 f9d1 	bl	8002e94 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	sx1278_init();
 8001af2:	f001 fe35 	bl	8003760 <sx1278_init>
	HAL_Delay(100);
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f002 f9ec 	bl	8003ed4 <HAL_Delay>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, uart1_rx_data, 15); // delay 3.5s sau khi on moi read duoc
 8001afc:	220f      	movs	r2, #15
 8001afe:	4986      	ldr	r1, [pc, #536]	; (8001d18 <main+0x254>)
 8001b00:	4886      	ldr	r0, [pc, #536]	; (8001d1c <main+0x258>)
 8001b02:	f006 fef6 	bl	80088f2 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_Delay(50);
 8001b06:	2032      	movs	r0, #50	; 0x32
 8001b08:	f002 f9e4 	bl	8003ed4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // xanh
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4883      	ldr	r0, [pc, #524]	; (8001d20 <main+0x25c>)
 8001b12:	f003 fe2f 	bl	8005774 <HAL_GPIO_WritePin>

while(1)
{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1c:	4881      	ldr	r0, [pc, #516]	; (8001d24 <main+0x260>)
 8001b1e:	f003 fe29 	bl	8005774 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	  myStatus = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8001b22:	2102      	movs	r1, #2
 8001b24:	4880      	ldr	r0, [pc, #512]	; (8001d28 <main+0x264>)
 8001b26:	f006 f839 	bl	8007b9c <HAL_RTCEx_BKUPRead>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <main+0x268>)
 8001b30:	701a      	strb	r2, [r3, #0]

	  if (myStatus == 0U)
 8001b32:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <main+0x268>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10b      	bne.n	8001b52 <main+0x8e>
	  {
	    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, SLEEPTIME_NORMAL_MODE_MIN * 60);
 8001b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4879      	ldr	r0, [pc, #484]	; (8001d28 <main+0x264>)
 8001b42:	f006 f811 	bl	8007b68 <HAL_RTCEx_BKUPWrite>
	    myStatus = LINK_MODE;
 8001b46:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <main+0x268>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	701a      	strb	r2, [r3, #0]
	    is_All_Power_OFF = false;
 8001b4c:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <main+0x26c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	  }

	  if ((myStatus & LINK_MODE) != 0U)
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <main+0x268>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <main+0xa0>
	  {
	    Link_Mode_Handle();
 8001b5e:	f000 faff 	bl	8002160 <Link_Mode_Handle>
 8001b62:	e0a0      	b.n	8001ca6 <main+0x1e2>
	  }
	  else if ((myStatus & NORMAL_MODE) != 0U)
 8001b64:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <main+0x268>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d04a      	beq.n	8001c06 <main+0x142>
	      {
			  Normal_Mode_Handle();
 8001b70:	f000 fb76 	bl	8002260 <Normal_Mode_Handle>
			  HAL_Delay(50);
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f002 f9ad 	bl	8003ed4 <HAL_Delay>
			  if (Flag_Node_C)
 8001b7a:	4b6e      	ldr	r3, [pc, #440]	; (8001d34 <main+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <main+0xda>
			  {
				Normal_Mode_Mesh_Handle(Node_Mesh[0]);
 8001b82:	4a6d      	ldr	r2, [pc, #436]	; (8001d38 <main+0x274>)
 8001b84:	466b      	mov	r3, sp
 8001b86:	f102 0110 	add.w	r1, r2, #16
 8001b8a:	c903      	ldmia	r1, {r0, r1}
 8001b8c:	6018      	str	r0, [r3, #0]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	8019      	strh	r1, [r3, #0]
 8001b92:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8001b94:	f001 f836 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				Flag_Node_C = 0;
 8001b98:	4b66      	ldr	r3, [pc, #408]	; (8001d34 <main+0x270>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
			  }
			  if (Flag_Node_D)
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <main+0x278>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01a      	beq.n	8001bdc <main+0x118>
			  {
				Normal_Mode_Mesh_Handle(Node_Mesh[1]);
 8001ba6:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <main+0x274>)
 8001ba8:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8001bac:	4616      	mov	r6, r2
 8001bae:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8001bb8:	4615      	mov	r5, r2
 8001bba:	f8d3 2022 	ldr.w	r2, [r3, #34]	; 0x22
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	466a      	mov	r2, sp
 8001bc2:	3326      	adds	r3, #38	; 0x26
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	6010      	str	r0, [r2, #0]
 8001bc8:	889b      	ldrh	r3, [r3, #4]
 8001bca:	8093      	strh	r3, [r2, #4]
 8001bcc:	4630      	mov	r0, r6
 8001bce:	462a      	mov	r2, r5
 8001bd0:	4623      	mov	r3, r4
 8001bd2:	f001 f817 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				Flag_Node_D = 0;
 8001bd6:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <main+0x278>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
			  }
			  if (Flag_Node_E)
 8001bdc:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <main+0x27c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d060      	beq.n	8001ca6 <main+0x1e2>
			  {
				Normal_Mode_Mesh_Handle(Node_Mesh[2]);
 8001be4:	4a54      	ldr	r2, [pc, #336]	; (8001d38 <main+0x274>)
 8001be6:	466b      	mov	r3, sp
 8001be8:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8001bec:	c903      	ldmia	r1, {r0, r1}
 8001bee:	6018      	str	r0, [r3, #0]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	8019      	strh	r1, [r3, #0]
 8001bf4:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8001bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bfa:	f001 f803 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				Flag_Node_E = 0;
 8001bfe:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <main+0x27c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e04f      	b.n	8001ca6 <main+0x1e2>
			  }
	      }
	      else if ((myStatus & RETRY_MODE) != 0U)
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <main+0x268>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d049      	beq.n	8001ca6 <main+0x1e2>
	        {
//	          Retry_Mode_Handle();
		        Normal_Mode_Handle();
 8001c12:	f000 fb25 	bl	8002260 <Normal_Mode_Handle>
				HAL_Delay(50);
 8001c16:	2032      	movs	r0, #50	; 0x32
 8001c18:	f002 f95c 	bl	8003ed4 <HAL_Delay>
				if (Flag_Node_C)
 8001c1c:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <main+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <main+0x17c>
				{
				  Normal_Mode_Mesh_Handle(Node_Mesh[0]);
 8001c24:	4a44      	ldr	r2, [pc, #272]	; (8001d38 <main+0x274>)
 8001c26:	466b      	mov	r3, sp
 8001c28:	f102 0110 	add.w	r1, r2, #16
 8001c2c:	c903      	ldmia	r1, {r0, r1}
 8001c2e:	6018      	str	r0, [r3, #0]
 8001c30:	3304      	adds	r3, #4
 8001c32:	8019      	strh	r1, [r3, #0]
 8001c34:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8001c36:	f000 ffe5 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				  Flag_Node_C = 0;
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <main+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
				}
				if (Flag_Node_D)
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <main+0x278>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01a      	beq.n	8001c7e <main+0x1ba>
				{
				  Normal_Mode_Mesh_Handle(Node_Mesh[1]);
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <main+0x274>)
 8001c4a:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8001c4e:	4616      	mov	r6, r2
 8001c50:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8001c54:	4611      	mov	r1, r2
 8001c56:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8001c5a:	4615      	mov	r5, r2
 8001c5c:	f8d3 2022 	ldr.w	r2, [r3, #34]	; 0x22
 8001c60:	4614      	mov	r4, r2
 8001c62:	466a      	mov	r2, sp
 8001c64:	3326      	adds	r3, #38	; 0x26
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	6010      	str	r0, [r2, #0]
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	8093      	strh	r3, [r2, #4]
 8001c6e:	4630      	mov	r0, r6
 8001c70:	462a      	mov	r2, r5
 8001c72:	4623      	mov	r3, r4
 8001c74:	f000 ffc6 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				  Flag_Node_D = 0;
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <main+0x278>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
				}
				if (Flag_Node_E)
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <main+0x27c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00f      	beq.n	8001ca6 <main+0x1e2>
				{
				  Normal_Mode_Mesh_Handle(Node_Mesh[2]);
 8001c86:	4a2c      	ldr	r2, [pc, #176]	; (8001d38 <main+0x274>)
 8001c88:	466b      	mov	r3, sp
 8001c8a:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 8001c8e:	c903      	ldmia	r1, {r0, r1}
 8001c90:	6018      	str	r0, [r3, #0]
 8001c92:	3304      	adds	r3, #4
 8001c94:	8019      	strh	r1, [r3, #0]
 8001c96:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8001c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c9c:	f000 ffb2 	bl	8002c04 <Normal_Mode_Mesh_Handle>
				  Flag_Node_E = 0;
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <main+0x27c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
				}
	        }

	  if ((myStatus & SHUTDOWN_MODE) != 0U)
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <main+0x268>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01f      	beq.n	8001cf2 <main+0x22e>
	  {
	    // MX_GPIO_Init();
	    MX_SPI1_Init();
 8001cb2:	f001 f965 	bl	8002f80 <MX_SPI1_Init>
	    MX_RTC_Init();
 8001cb6:	f001 f8ed 	bl	8002e94 <MX_RTC_Init>
	    myStatus = WAKEUP_MODE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <main+0x268>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
	    while (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != myStatus)  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, myStatus);
 8001cc0:	e006      	b.n	8001cd0 <main+0x20c>
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <main+0x268>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4817      	ldr	r0, [pc, #92]	; (8001d28 <main+0x264>)
 8001ccc:	f005 ff4c 	bl	8007b68 <HAL_RTCEx_BKUPWrite>
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4815      	ldr	r0, [pc, #84]	; (8001d28 <main+0x264>)
 8001cd4:	f005 ff62 	bl	8007b9c <HAL_RTCEx_BKUPRead>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <main+0x268>)
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d1ef      	bne.n	8001cc2 <main+0x1fe>
	    while (1);
 8001ce2:	e7fe      	b.n	8001ce2 <main+0x21e>
	  }

	  while (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2) != myStatus)  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, myStatus);
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <main+0x268>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2102      	movs	r1, #2
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <main+0x264>)
 8001cee:	f005 ff3b 	bl	8007b68 <HAL_RTCEx_BKUPWrite>
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	480c      	ldr	r0, [pc, #48]	; (8001d28 <main+0x264>)
 8001cf6:	f005 ff51 	bl	8007b9c <HAL_RTCEx_BKUPRead>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <main+0x268>)
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d1ef      	bne.n	8001ce4 <main+0x220>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <main+0x260>)
 8001d0c:	f003 fd32 	bl	8005774 <HAL_GPIO_WritePin>

    LoRa_Recv_Node();
 8001d10:	f000 ffd8 	bl	8002cc4 <LoRa_Recv_Node>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d14:	e6ff      	b.n	8001b16 <main+0x52>
 8001d16:	bf00      	nop
 8001d18:	20000468 	.word	0x20000468
 8001d1c:	200005d4 	.word	0x200005d4
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40011000 	.word	0x40011000
 8001d28:	20000560 	.word	0x20000560
 8001d2c:	20000362 	.word	0x20000362
 8001d30:	20000004 	.word	0x20000004
 8001d34:	200003f8 	.word	0x200003f8
 8001d38:	20000320 	.word	0x20000320
 8001d3c:	200003f4 	.word	0x200003f4
 8001d40:	200003f0 	.word	0x200003f0

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	; 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4e:	2228      	movs	r2, #40	; 0x28
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f007 fbe0 	bl	8009518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d74:	230a      	movs	r3, #10
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d7c:	2310      	movs	r3, #16
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d80:	2301      	movs	r3, #1
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fdab 	bl	80068e8 <HAL_RCC_OscConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d98:	f001 f840 	bl	8002e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f005 f818 	bl	8006dec <HAL_RCC_ClockConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001dc2:	f001 f82b 	bl	8002e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 f996 	bl	8007108 <HAL_RCCEx_PeriphCLKConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001de2:	f001 f81b 	bl	8002e1c <Error_Handler>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	; 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
	recv_data[0] = uart1_rx_data[3]<<8 | uart1_rx_data[4];
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x50>)
 8001dfe:	78db      	ldrb	r3, [r3, #3]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x50>)
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x54>)
 8001e12:	801a      	strh	r2, [r3, #0]
	recv_data[1] = uart1_rx_data[5]<<8 | uart1_rx_data[6];
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x50>)
 8001e16:	795b      	ldrb	r3, [r3, #5]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x50>)
 8001e1e:	799b      	ldrb	r3, [r3, #6]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x54>)
 8001e2a:	805a      	strh	r2, [r3, #2]

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, uart1_rx_data, 15);
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	4904      	ldr	r1, [pc, #16]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x50>)
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <HAL_UARTEx_RxEventCallback+0x58>)
 8001e32:	f006 fd5e 	bl	80088f2 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000468 	.word	0x20000468
 8001e44:	20000478 	.word	0x20000478
 8001e48:	200005d4 	.word	0x200005d4
 8001e4c:	00000000 	.word	0x00000000

08001e50 <read_ADC>:

void read_ADC(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
		HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc, 2);
 8001e56:	2202      	movs	r2, #2
 8001e58:	4957      	ldr	r1, [pc, #348]	; (8001fb8 <read_ADC+0x168>)
 8001e5a:	4858      	ldr	r0, [pc, #352]	; (8001fbc <read_ADC+0x16c>)
 8001e5c:	f002 f936 	bl	80040cc <HAL_ADC_Start_DMA>
		HAL_Delay(30);
 8001e60:	201e      	movs	r0, #30
 8001e62:	f002 f837 	bl	8003ed4 <HAL_Delay>
		for(uint8_t i =0; i<15; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	e015      	b.n	8001e98 <read_ADC+0x48>
		{
			bat += adc[0];
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <read_ADC+0x168>)
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <read_ADC+0x170>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <read_ADC+0x170>)
 8001e7a:	801a      	strh	r2, [r3, #0]
			temp35 += adc[1];
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	; (8001fb8 <read_ADC+0x168>)
 8001e7e:	885a      	ldrh	r2, [r3, #2]
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <read_ADC+0x174>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <read_ADC+0x174>)
 8001e8a:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f002 f821 	bl	8003ed4 <HAL_Delay>
		for(uint8_t i =0; i<15; i++)
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	3301      	adds	r3, #1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b0e      	cmp	r3, #14
 8001e9c:	d9e6      	bls.n	8001e6c <read_ADC+0x1c>
		}

		bat = bat/15;
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <read_ADC+0x170>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <read_ADC+0x178>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <read_ADC+0x170>)
 8001eae:	801a      	strh	r2, [r3, #0]
		test_bat_f =(double)((double)bat * 3.3 * 4.9 / 4095.0) - 0.22656;
 8001eb0:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <read_ADC+0x170>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fa95 	bl	80003e4 <__aeabi_ui2d>
 8001eba:	a337      	add	r3, pc, #220	; (adr r3, 8001f98 <read_ADC+0x148>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fb0a 	bl	80004d8 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	a334      	add	r3, pc, #208	; (adr r3, 8001fa0 <read_ADC+0x150>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fb01 	bl	80004d8 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	a332      	add	r3, pc, #200	; (adr r3, 8001fa8 <read_ADC+0x158>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fc22 	bl	800072c <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	a32f      	add	r3, pc, #188	; (adr r3, 8001fb0 <read_ADC+0x160>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe f937 	bl	8000168 <__aeabi_dsub>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4933      	ldr	r1, [pc, #204]	; (8001fcc <read_ADC+0x17c>)
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
		temp35 = temp35 / 15;
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <read_ADC+0x174>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <read_ADC+0x178>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	08db      	lsrs	r3, r3, #3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <read_ADC+0x174>)
 8001f14:	801a      	strh	r2, [r3, #0]
    myWind.rawTemperature = temp35;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <read_ADC+0x174>)
 8001f18:	881a      	ldrh	r2, [r3, #0]
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <read_ADC+0x180>)
 8001f1c:	801a      	strh	r2, [r3, #0]
    myWind.Temperature = (float)((float)temp35 * 11.0 * 17.0 /4095.0);
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <read_ADC+0x174>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fed6 	bl	8000cd4 <__aeabi_ui2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fa7c 	bl	8000428 <__aeabi_f2d>
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <read_ADC+0x184>)
 8001f36:	f7fe facf 	bl	80004d8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <read_ADC+0x188>)
 8001f48:	f7fe fac6 	bl	80004d8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	a314      	add	r3, pc, #80	; (adr r3, 8001fa8 <read_ADC+0x158>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fbe7 	bl	800072c <__aeabi_ddiv>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7fe fdaf 	bl	8000ac8 <__aeabi_d2f>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <read_ADC+0x180>)
 8001f6e:	6053      	str	r3, [r2, #4]
	  test_lm = (float) myWind.Temperature;
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <read_ADC+0x180>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe fa57 	bl	8000428 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4917      	ldr	r1, [pc, #92]	; (8001fdc <read_ADC+0x18c>)
 8001f80:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_ADC_Stop_DMA(&hadc1);
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <read_ADC+0x16c>)
 8001f86:	f002 f97f 	bl	8004288 <HAL_ADC_Stop_DMA>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	66666666 	.word	0x66666666
 8001f9c:	400a6666 	.word	0x400a6666
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	40139999 	.word	0x40139999
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40affe00 	.word	0x40affe00
 8001fb0:	074a771d 	.word	0x074a771d
 8001fb4:	3fccffeb 	.word	0x3fccffeb
 8001fb8:	20000300 	.word	0x20000300
 8001fbc:	20000214 	.word	0x20000214
 8001fc0:	200002ec 	.word	0x200002ec
 8001fc4:	200002ee 	.word	0x200002ee
 8001fc8:	88888889 	.word	0x88888889
 8001fcc:	200002f0 	.word	0x200002f0
 8001fd0:	20000304 	.word	0x20000304
 8001fd4:	40260000 	.word	0x40260000
 8001fd8:	40310000 	.word	0x40310000
 8001fdc:	200002f8 	.word	0x200002f8

08001fe0 <read_wind_sensor>:

void read_wind_sensor (void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_SEN_GPIO_Port, PWR_SEN_Pin, 1);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fea:	481a      	ldr	r0, [pc, #104]	; (8002054 <read_wind_sensor+0x74>)
 8001fec:	f003 fbc2 	bl	8005774 <HAL_GPIO_WritePin>
  HAL_Delay(3500);
 8001ff0:	f640 50ac 	movw	r0, #3500	; 0xdac
 8001ff4:	f001 ff6e 	bl	8003ed4 <HAL_Delay>

	modbus_tx_data(SPEED_ADDRESS);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fd1f 	bl	8001a3c <modbus_tx_data>
  HAL_Delay(50);
 8001ffe:	2032      	movs	r0, #50	; 0x32
 8002000:	f001 ff68 	bl	8003ed4 <HAL_Delay>
  myWind.RawSpeed = recv_data[0];
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <read_wind_sensor+0x78>)
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <read_wind_sensor+0x7c>)
 800200a:	811a      	strh	r2, [r3, #8]
//	test_speed = recv_data[0];
//	test_s  = (float)((float)test_speed/10.0);
  myWind.Speed = (float)((float)myWind.RawSpeed / 10.0);
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <read_wind_sensor+0x7c>)
 800200e:	891b      	ldrh	r3, [r3, #8]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fe5f 	bl	8000cd4 <__aeabi_ui2f>
 8002016:	4603      	mov	r3, r0
 8002018:	4911      	ldr	r1, [pc, #68]	; (8002060 <read_wind_sensor+0x80>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe ff66 	bl	8000eec <__aeabi_fdiv>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <read_wind_sensor+0x7c>)
 8002026:	60da      	str	r2, [r3, #12]
  myWind.windLevel = recv_data[1];
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <read_wind_sensor+0x78>)
 800202a:	885a      	ldrh	r2, [r3, #2]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <read_wind_sensor+0x7c>)
 800202e:	825a      	strh	r2, [r3, #18]
//	test_level = recv_data[1];

  modbus_tx_data(DIRECTION_ADDRESS);
 8002030:	2002      	movs	r0, #2
 8002032:	f7ff fd03 	bl	8001a3c <modbus_tx_data>
  HAL_Delay(50);
 8002036:	2032      	movs	r0, #50	; 0x32
 8002038:	f001 ff4c 	bl	8003ed4 <HAL_Delay>
  myWind.Direction = recv_data[0];
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <read_wind_sensor+0x78>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <read_wind_sensor+0x7c>)
 8002042:	821a      	strh	r2, [r3, #16]
//	test_di = recv_data[1];
//	test_dih = recv_data[0];

  HAL_GPIO_WritePin(PWR_SEN_GPIO_Port, PWR_SEN_Pin, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <read_wind_sensor+0x74>)
 800204c:	f003 fb92 	bl	8005774 <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40010c00 	.word	0x40010c00
 8002058:	20000478 	.word	0x20000478
 800205c:	20000304 	.word	0x20000304
 8002060:	41200000 	.word	0x41200000

08002064 <read_AHT20>:

void read_AHT20(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
		MX_I2C1_Init();
 8002068:	f7ff fc46 	bl	80018f8 <MX_I2C1_Init>
    HAL_Delay(100);
 800206c:	2064      	movs	r0, #100	; 0x64
 800206e:	f001 ff31 	bl	8003ed4 <HAL_Delay>
		AHT20_init();
 8002072:	f7ff fa31 	bl	80014d8 <AHT20_init>
		AHT20_read(&t, &h);
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <read_AHT20+0x34>)
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <read_AHT20+0x38>)
 800207a:	f7ff fa59 	bl	8001530 <AHT20_read>
    myAHT.Temperature = t;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <read_AHT20+0x38>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <read_AHT20+0x3c>)
 8002084:	6013      	str	r3, [r2, #0]
    myAHT.Humidity = h;
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <read_AHT20+0x34>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <read_AHT20+0x3c>)
 800208c:	6053      	str	r3, [r2, #4]
		HAL_I2C_DeInit(&hi2c1);
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <read_AHT20+0x40>)
 8002090:	f003 fcfe 	bl	8005a90 <HAL_I2C_DeInit>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000480 	.word	0x20000480
 800209c:	2000047c 	.word	0x2000047c
 80020a0:	20000318 	.word	0x20000318
 80020a4:	20000298 	.word	0x20000298

080020a8 <is_OK_2_Talk>:
    __WFI(); // Wait for interrupt
  }
}
//kiem tra xem truyen thong duoc khong
bool is_OK_2_Talk(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  sx1278_standby();
 80020ae:	f001 f939 	bl	8003324 <sx1278_standby>
  uint32_t checkTimeout = HAL_GetTick();
 80020b2:	f001 ff05 	bl	8003ec0 <HAL_GetTick>
 80020b6:	6078      	str	r0, [r7, #4]
  uint8_t irq = sx1278_read_reg(REG_IRQ_FLAGS);
 80020b8:	2012      	movs	r0, #18
 80020ba:	f001 f88f 	bl	80031dc <sx1278_read_reg>
 80020be:	4603      	mov	r3, r0
 80020c0:	70fb      	strb	r3, [r7, #3]
  sx1278_write_reg(REG_IRQ_FLAGS, irq);     //reset irq
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	4619      	mov	r1, r3
 80020c6:	2012      	movs	r0, #18
 80020c8:	f001 f8c8 	bl	800325c <sx1278_write_reg>
  is_LoRa_EXTI = false;
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <is_OK_2_Talk+0xb4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
  sx1278_cad();
 80020d2:	f001 f93f 	bl	8003354 <sx1278_cad>
  while ((is_LoRa_EXTI == false) && ((HAL_GetTick() - checkTimeout) < TIMEOUT_MS));
 80020d6:	bf00      	nop
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <is_OK_2_Talk+0xb4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f083 0301 	eor.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <is_OK_2_Talk+0x4e>
 80020e8:	f001 feea 	bl	8003ec0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b31      	cmp	r3, #49	; 0x31
 80020f4:	d9f0      	bls.n	80020d8 <is_OK_2_Talk+0x30>
  if (is_LoRa_EXTI == false) return false;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <is_OK_2_Talk+0xb4>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <is_OK_2_Talk+0x62>
 8002106:	2300      	movs	r3, #0
 8002108:	e024      	b.n	8002154 <is_OK_2_Talk+0xac>
  irq = sx1278_read_reg(REG_IRQ_FLAGS);
 800210a:	2012      	movs	r0, #18
 800210c:	f001 f866 	bl	80031dc <sx1278_read_reg>
 8002110:	4603      	mov	r3, r0
 8002112:	70fb      	strb	r3, [r7, #3]
  sx1278_write_reg(REG_IRQ_FLAGS, irq);     //reset irq
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	4619      	mov	r1, r3
 8002118:	2012      	movs	r0, #18
 800211a:	f001 f89f 	bl	800325c <sx1278_write_reg>
  sx1278_standby();
 800211e:	f001 f901 	bl	8003324 <sx1278_standby>
  if (((irq & 0x01U) != 0U) && ((irq & 0x04U) != 0U))
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <is_OK_2_Talk+0x92>
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <is_OK_2_Talk+0x92>
  {
    return false;
 8002136:	2300      	movs	r3, #0
 8002138:	e00c      	b.n	8002154 <is_OK_2_Talk+0xac>
  }
  else if (((irq & 0x01U) == 0U) && ((irq & 0x04U) != 0U))
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <is_OK_2_Talk+0xaa>
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <is_OK_2_Talk+0xaa>
  {
    return true;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <is_OK_2_Talk+0xac>
  }
  return false;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003c8 	.word	0x200003c8

08002160 <Link_Mode_Handle>:

void Link_Mode_Handle(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
  read_ADC();
 8002166:	f7ff fe73 	bl	8001e50 <read_ADC>
	HAL_Delay(10);
 800216a:	200a      	movs	r0, #10
 800216c:	f001 feb2 	bl	8003ed4 <HAL_Delay>
	read_ADC();
 8002170:	f7ff fe6e 	bl	8001e50 <read_ADC>
	HAL_Delay(10);
 8002174:	200a      	movs	r0, #10
 8002176:	f001 fead 	bl	8003ed4 <HAL_Delay>
	read_ADC();
 800217a:	f7ff fe69 	bl	8001e50 <read_ADC>

  MX_SPI1_Init();
 800217e:	f000 feff 	bl	8002f80 <MX_SPI1_Init>
  HAL_Delay(100);
 8002182:	2064      	movs	r0, #100	; 0x64
 8002184:	f001 fea6 	bl	8003ed4 <HAL_Delay>
  sx1278_init();
 8002188:	f001 faea 	bl	8003760 <sx1278_init>

  Link_Packet_t LinkReq;
  LinkReq.Packet_ID = LINK_PACKET_ID;
 800218c:	f64b 33bb 	movw	r3, #48059	; 0xbbbb
 8002190:	80bb      	strh	r3, [r7, #4]
  LinkReq.Payload.Node_ID = NODE_ID;
 8002192:	f64c 23ac 	movw	r3, #51884	; 0xcaac
 8002196:	80fb      	strh	r3, [r7, #6]
  LinkReq.Payload.Node_Status = myStatus;
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <Link_Mode_Handle+0xe4>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	813b      	strh	r3, [r7, #8]
  LinkReq.Payload.Node_Battery_Voltage = (uint16_t)(test_bat_f * 100.0); // 100 x Bat_voltage
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <Link_Mode_Handle+0xe8>)
 80021a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <Link_Mode_Handle+0xec>)
 80021ac:	f7fe f994 	bl	80004d8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc66 	bl	8000a88 <__aeabi_d2uiz>
 80021bc:	4603      	mov	r3, r0
 80021be:	b29b      	uxth	r3, r3
 80021c0:	817b      	strh	r3, [r7, #10]
  LinkReq.Payload.Node_Period = (uint16_t) (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3));
 80021c2:	2103      	movs	r1, #3
 80021c4:	4822      	ldr	r0, [pc, #136]	; (8002250 <Link_Mode_Handle+0xf0>)
 80021c6:	f005 fce9 	bl	8007b9c <HAL_RTCEx_BKUPRead>
 80021ca:	4603      	mov	r3, r0
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	81bb      	strh	r3, [r7, #12]
  memcpy((uint8_t*)&payload, (uint8_t*)&LinkReq, sizeof(Link_Packet_t));
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <Link_Mode_Handle+0xf4>)
 80021d2:	1d3a      	adds	r2, r7, #4
 80021d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d6:	c303      	stmia	r3!, {r0, r1}
 80021d8:	801a      	strh	r2, [r3, #0]

  nTry = 0;
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <Link_Mode_Handle+0xf8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 80021e0:	e009      	b.n	80021f6 <Link_Mode_Handle+0x96>
  {
    nTry++;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <Link_Mode_Handle+0xf8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <Link_Mode_Handle+0xf8>)
 80021ee:	701a      	strb	r2, [r3, #0]
    HAL_Delay(110);
 80021f0:	206e      	movs	r0, #110	; 0x6e
 80021f2:	f001 fe6f 	bl	8003ed4 <HAL_Delay>
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 80021f6:	f7ff ff57 	bl	80020a8 <is_OK_2_Talk>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <Link_Mode_Handle+0xb0>
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <Link_Mode_Handle+0xf8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b09      	cmp	r3, #9
 800220e:	d9e8      	bls.n	80021e2 <Link_Mode_Handle+0x82>
    // HAL_Delay(get_random_value(backupStorage, 50, 200));
  }

  if (nTry == 10)
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <Link_Mode_Handle+0xf8>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b0a      	cmp	r3, #10
 8002218:	d106      	bne.n	8002228 <Link_Mode_Handle+0xc8>
  {
    myStatus = LINK_MODE;
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <Link_Mode_Handle+0xe4>)
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 8002220:	480e      	ldr	r0, [pc, #56]	; (800225c <Link_Mode_Handle+0xfc>)
 8002222:	f005 fd5b 	bl	8007cdc <HAL_SPI_DeInit>
 8002226:	e00a      	b.n	800223e <Link_Mode_Handle+0xde>
    return;
  }

  sx1278_send_data((uint8_t *)&payload, sizeof(Link_Packet_t));
 8002228:	210a      	movs	r1, #10
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <Link_Mode_Handle+0xf4>)
 800222c:	f001 fae0 	bl	80037f0 <sx1278_send_data>

  Response_Handle();
 8002230:	f000 f904 	bl	800243c <Response_Handle>

  sx1278_sleep();
 8002234:	f001 f86e 	bl	8003314 <sx1278_sleep>
  HAL_SPI_DeInit(&hspi1);
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <Link_Mode_Handle+0xfc>)
 800223a:	f005 fd4f 	bl	8007cdc <HAL_SPI_DeInit>
}
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000362 	.word	0x20000362
 8002248:	200002f0 	.word	0x200002f0
 800224c:	40590000 	.word	0x40590000
 8002250:	20000560 	.word	0x20000560
 8002254:	20000364 	.word	0x20000364
 8002258:	200003ec 	.word	0x200003ec
 800225c:	20000574 	.word	0x20000574

08002260 <Normal_Mode_Handle>:

void Normal_Mode_Handle(void)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
  read_ADC();
 8002266:	f7ff fdf3 	bl	8001e50 <read_ADC>
	HAL_Delay(10);
 800226a:	200a      	movs	r0, #10
 800226c:	f001 fe32 	bl	8003ed4 <HAL_Delay>
	read_ADC();
 8002270:	f7ff fdee 	bl	8001e50 <read_ADC>
	HAL_Delay(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f001 fe2d 	bl	8003ed4 <HAL_Delay>
	read_ADC();
 800227a:	f7ff fde9 	bl	8001e50 <read_ADC>

  read_wind_sensor();
 800227e:	f7ff feaf 	bl	8001fe0 <read_wind_sensor>
  read_AHT20();
 8002282:	f7ff feef 	bl	8002064 <read_AHT20>

  MX_SPI1_Init();
 8002286:	f000 fe7b 	bl	8002f80 <MX_SPI1_Init>
  HAL_Delay(100);
 800228a:	2064      	movs	r0, #100	; 0x64
 800228c:	f001 fe22 	bl	8003ed4 <HAL_Delay>
  sx1278_init();
 8002290:	f001 fa66 	bl	8003760 <sx1278_init>

  Data_Packet_t data_packet;
  data_packet.Packet_ID = DATA_PACKET_ID;
 8002294:	f644 234a 	movw	r3, #19018	; 0x4a4a
 8002298:	803b      	strh	r3, [r7, #0]
  data_packet.Payload.Link.Node_ID = NODE_ID;
 800229a:	f64c 23ac 	movw	r3, #51884	; 0xcaac
 800229e:	807b      	strh	r3, [r7, #2]
  data_packet.Payload.Link.Node_Status = myStatus;
 80022a0:	4b5a      	ldr	r3, [pc, #360]	; (800240c <Normal_Mode_Handle+0x1ac>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	80bb      	strh	r3, [r7, #4]
  data_packet.Payload.Link.Node_Battery_Voltage = (uint16_t)(test_bat_f * 100.0); // 100 x Bat_voltage
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <Normal_Mode_Handle+0x1b0>)
 80022aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	4b58      	ldr	r3, [pc, #352]	; (8002414 <Normal_Mode_Handle+0x1b4>)
 80022b4:	f7fe f910 	bl	80004d8 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fbe2 	bl	8000a88 <__aeabi_d2uiz>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	80fb      	strh	r3, [r7, #6]
  data_packet.Payload.Link.Node_Period      = (uint16_t)(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3));
 80022ca:	2103      	movs	r1, #3
 80022cc:	4852      	ldr	r0, [pc, #328]	; (8002418 <Normal_Mode_Handle+0x1b8>)
 80022ce:	f005 fc65 	bl	8007b9c <HAL_RTCEx_BKUPRead>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	813b      	strh	r3, [r7, #8]

  data_packet.Payload.Node_LM35_Temperature = (uint16_t)(myWind.Temperature * 10); // 10 x temp_lm35
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <Normal_Mode_Handle+0x1bc>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4950      	ldr	r1, [pc, #320]	; (8002420 <Normal_Mode_Handle+0x1c0>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fd50 	bl	8000d84 <__aeabi_fmul>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fe9c 	bl	8001024 <__aeabi_f2uiz>
 80022ec:	4603      	mov	r3, r0
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	817b      	strh	r3, [r7, #10]
  data_packet.Payload.Node_AHT_Temperature  = (uint16_t)(myAHT.Temperature * 10);  // 10 x temp_aht
 80022f2:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <Normal_Mode_Handle+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	494a      	ldr	r1, [pc, #296]	; (8002420 <Normal_Mode_Handle+0x1c0>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fd43 	bl	8000d84 <__aeabi_fmul>
 80022fe:	4603      	mov	r3, r0
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fe8f 	bl	8001024 <__aeabi_f2uiz>
 8002306:	4603      	mov	r3, r0
 8002308:	b29b      	uxth	r3, r3
 800230a:	81bb      	strh	r3, [r7, #12]
  data_packet.Payload.Node_AHT_Humidity     = (uint16_t)(myAHT.Humidity * 10);     // 10 x humid_aht
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <Normal_Mode_Handle+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4943      	ldr	r1, [pc, #268]	; (8002420 <Normal_Mode_Handle+0x1c0>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fd36 	bl	8000d84 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fe82 	bl	8001024 <__aeabi_f2uiz>
 8002320:	4603      	mov	r3, r0
 8002322:	b29b      	uxth	r3, r3
 8002324:	81fb      	strh	r3, [r7, #14]
  data_packet.Payload.Node_wind_speed       = (uint16_t)(myWind.Speed * 10);       // 10 x wind speed
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <Normal_Mode_Handle+0x1bc>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	493d      	ldr	r1, [pc, #244]	; (8002420 <Normal_Mode_Handle+0x1c0>)
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fd29 	bl	8000d84 <__aeabi_fmul>
 8002332:	4603      	mov	r3, r0
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fe75 	bl	8001024 <__aeabi_f2uiz>
 800233a:	4603      	mov	r3, r0
 800233c:	b29b      	uxth	r3, r3
 800233e:	823b      	strh	r3, [r7, #16]
  data_packet.Payload.Node_wind_direction   = myWind.Direction;                    // direction type uint16
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <Normal_Mode_Handle+0x1bc>)
 8002342:	8a1b      	ldrh	r3, [r3, #16]
 8002344:	827b      	strh	r3, [r7, #18]
  data_packet.Payload.Node_wind_level       = myWind.windLevel;                    // direction type uint16
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <Normal_Mode_Handle+0x1bc>)
 8002348:	8a5b      	ldrh	r3, [r3, #18]
 800234a:	82bb      	strh	r3, [r7, #20]
  memset(payload, '\0', sizeof(payload));
 800234c:	2264      	movs	r2, #100	; 0x64
 800234e:	2100      	movs	r1, #0
 8002350:	4835      	ldr	r0, [pc, #212]	; (8002428 <Normal_Mode_Handle+0x1c8>)
 8002352:	f007 f8e1 	bl	8009518 <memset>
  memcpy((uint8_t *)payload, (uint8_t *)&data_packet, sizeof(Data_Packet_t));
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <Normal_Mode_Handle+0x1c8>)
 8002358:	461c      	mov	r4, r3
 800235a:	463d      	mov	r5, r7
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002364:	6020      	str	r0, [r4, #0]
 8002366:	3404      	adds	r4, #4
 8002368:	8021      	strh	r1, [r4, #0]

  nTry = 0;
 800236a:	4b30      	ldr	r3, [pc, #192]	; (800242c <Normal_Mode_Handle+0x1cc>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002370:	e009      	b.n	8002386 <Normal_Mode_Handle+0x126>
  {
    nTry++;
 8002372:	4b2e      	ldr	r3, [pc, #184]	; (800242c <Normal_Mode_Handle+0x1cc>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3301      	adds	r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <Normal_Mode_Handle+0x1cc>)
 800237e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(150);
 8002380:	2096      	movs	r0, #150	; 0x96
 8002382:	f001 fda7 	bl	8003ed4 <HAL_Delay>
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002386:	f7ff fe8f 	bl	80020a8 <is_OK_2_Talk>
 800238a:	4603      	mov	r3, r0
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <Normal_Mode_Handle+0x140>
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <Normal_Mode_Handle+0x1cc>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b09      	cmp	r3, #9
 800239e:	d9e8      	bls.n	8002372 <Normal_Mode_Handle+0x112>
    // HAL_Delay(get_random_value(backupStorage, 50, 200));
  }
  if (nTry == 10)
 80023a0:	4b22      	ldr	r3, [pc, #136]	; (800242c <Normal_Mode_Handle+0x1cc>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	d106      	bne.n	80023b8 <Normal_Mode_Handle+0x158>
  {
    myStatus = RETRY_MODE;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <Normal_Mode_Handle+0x1ac>)
 80023ac:	2208      	movs	r2, #8
 80023ae:	701a      	strb	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 80023b0:	481f      	ldr	r0, [pc, #124]	; (8002430 <Normal_Mode_Handle+0x1d0>)
 80023b2:	f005 fc93 	bl	8007cdc <HAL_SPI_DeInit>
 80023b6:	e026      	b.n	8002406 <Normal_Mode_Handle+0x1a6>
    // HAL_GPIO_WritePin(PWR_SUB_GPIO_Port, PWR_SUB_Pin, GPIO_PIN_RESET);
    // HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
    return;
  }

  sx1278_send_data(payload, sizeof(Data_Packet_t));
 80023b8:	2116      	movs	r1, #22
 80023ba:	481b      	ldr	r0, [pc, #108]	; (8002428 <Normal_Mode_Handle+0x1c8>)
 80023bc:	f001 fa18 	bl	80037f0 <sx1278_send_data>
  Response_Handle();
 80023c0:	f000 f83c 	bl	800243c <Response_Handle>

  if (myStatus == RETRY_MODE)
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <Normal_Mode_Handle+0x1ac>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d117      	bne.n	80023fc <Normal_Mode_Handle+0x19c>
  {
    memset(array2store, '\0', sizeof(array2store));
 80023cc:	2220      	movs	r2, #32
 80023ce:	2100      	movs	r1, #0
 80023d0:	4818      	ldr	r0, [pc, #96]	; (8002434 <Normal_Mode_Handle+0x1d4>)
 80023d2:	f007 f8a1 	bl	8009518 <memset>
    memcpy((uint8_t *)&array2store, (uint8_t *)&data_packet, sizeof(Data_Packet_t)); // save value measured
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <Normal_Mode_Handle+0x1d4>)
 80023d8:	461c      	mov	r4, r3
 80023da:	463d      	mov	r5, r7
 80023dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023e4:	6020      	str	r0, [r4, #0]
 80023e6:	3404      	adds	r4, #4
 80023e8:	8021      	strh	r1, [r4, #0]
    Flash_Write_Data(SAVE_ADDR, (uint32_t*)&array2store, 8U);
 80023ea:	2208      	movs	r2, #8
 80023ec:	4911      	ldr	r1, [pc, #68]	; (8002434 <Normal_Mode_Handle+0x1d4>)
 80023ee:	4812      	ldr	r0, [pc, #72]	; (8002438 <Normal_Mode_Handle+0x1d8>)
 80023f0:	f7ff f96e 	bl	80016d0 <Flash_Write_Data>
    HAL_Delay(300);
 80023f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023f8:	f001 fd6c 	bl	8003ed4 <HAL_Delay>
  }

  sx1278_sleep();
 80023fc:	f000 ff8a 	bl	8003314 <sx1278_sleep>
  HAL_SPI_DeInit(&hspi1);
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <Normal_Mode_Handle+0x1d0>)
 8002402:	f005 fc6b 	bl	8007cdc <HAL_SPI_DeInit>
}
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bdb0      	pop	{r4, r5, r7, pc}
 800240c:	20000362 	.word	0x20000362
 8002410:	200002f0 	.word	0x200002f0
 8002414:	40590000 	.word	0x40590000
 8002418:	20000560 	.word	0x20000560
 800241c:	20000304 	.word	0x20000304
 8002420:	41200000 	.word	0x41200000
 8002424:	20000318 	.word	0x20000318
 8002428:	20000364 	.word	0x20000364
 800242c:	200003ec 	.word	0x200003ec
 8002430:	20000574 	.word	0x20000574
 8002434:	200003cc 	.word	0x200003cc
 8002438:	08013030 	.word	0x08013030

0800243c <Response_Handle>:
  sx1278_sleep();
  HAL_SPI_DeInit(&hspi1);
}

void Response_Handle(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af02      	add	r7, sp, #8
  static uint8_t data[100] = {0};
  static uint32_t nByteRx = 0;
  static int rssi = -1;
  static float snr = -1;

  is_LoRa_EXTI = false;
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <Response_Handle+0x1f4>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
  sx1278_start_recv_data();
 8002448:	f001 fa18 	bl	800387c <sx1278_start_recv_data>

  uint32_t timeOut = HAL_GetTick();
 800244c:	f001 fd38 	bl	8003ec0 <HAL_GetTick>
 8002450:	6078      	str	r0, [r7, #4]
  while ((HAL_GetTick() - timeOut) < 5000U)
 8002452:	e0c9      	b.n	80025e8 <Response_Handle+0x1ac>
  {
    if (is_LoRa_EXTI == true)
 8002454:	4b76      	ldr	r3, [pc, #472]	; (8002630 <Response_Handle+0x1f4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80c4 	beq.w	80025e8 <Response_Handle+0x1ac>
    {
      if (sx1278_recv_data((uint8_t *)data, &nByteRx, &rssi, &snr, false) == SX1278_OK)
 8002460:	2300      	movs	r3, #0
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4b73      	ldr	r3, [pc, #460]	; (8002634 <Response_Handle+0x1f8>)
 8002466:	4a74      	ldr	r2, [pc, #464]	; (8002638 <Response_Handle+0x1fc>)
 8002468:	4974      	ldr	r1, [pc, #464]	; (800263c <Response_Handle+0x200>)
 800246a:	4875      	ldr	r0, [pc, #468]	; (8002640 <Response_Handle+0x204>)
 800246c:	f001 fa1a 	bl	80038a4 <sx1278_recv_data>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80a9 	bne.w	80025ca <Response_Handle+0x18e>
      {
        if (nByteRx == sizeof(ResponsePacket_t))  memcpy(&resp, &data, sizeof(ResponsePacket_t));
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <Response_Handle+0x200>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b0a      	cmp	r3, #10
 800247e:	d10b      	bne.n	8002498 <Response_Handle+0x5c>
 8002480:	220a      	movs	r2, #10
 8002482:	496f      	ldr	r1, [pc, #444]	; (8002640 <Response_Handle+0x204>)
 8002484:	486f      	ldr	r0, [pc, #444]	; (8002644 <Response_Handle+0x208>)
 8002486:	f007 f839 	bl	80094fc <memcpy>
          sx1278_set_irq(0x00);
          sx1278_write_reg(REG_IRQ_FLAGS, sx1278_read_reg(REG_IRQ_FLAGS));
          continue;
        }

        if ((resp.Packet_ID != RESPONSE_PACKET_ID) || (resp.Target_Node_ID != NODE_ID))
 800248a:	4b6e      	ldr	r3, [pc, #440]	; (8002644 <Response_Handle+0x208>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	f244 4244 	movw	r2, #17476	; 0x4444
 8002492:	4293      	cmp	r3, r2
 8002494:	d115      	bne.n	80024c2 <Response_Handle+0x86>
 8002496:	e00e      	b.n	80024b6 <Response_Handle+0x7a>
          is_LoRa_EXTI = false;
 8002498:	4b65      	ldr	r3, [pc, #404]	; (8002630 <Response_Handle+0x1f4>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
          sx1278_set_irq(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f001 f950 	bl	8003744 <sx1278_set_irq>
          sx1278_write_reg(REG_IRQ_FLAGS, sx1278_read_reg(REG_IRQ_FLAGS));
 80024a4:	2012      	movs	r0, #18
 80024a6:	f000 fe99 	bl	80031dc <sx1278_read_reg>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4619      	mov	r1, r3
 80024ae:	2012      	movs	r0, #18
 80024b0:	f000 fed4 	bl	800325c <sx1278_write_reg>
          continue;
 80024b4:	e098      	b.n	80025e8 <Response_Handle+0x1ac>
        if ((resp.Packet_ID != RESPONSE_PACKET_ID) || (resp.Target_Node_ID != NODE_ID))
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <Response_Handle+0x208>)
 80024b8:	885b      	ldrh	r3, [r3, #2]
 80024ba:	f64c 22ac 	movw	r2, #51884	; 0xcaac
 80024be:	4293      	cmp	r3, r2
 80024c0:	d005      	beq.n	80024ce <Response_Handle+0x92>
        {
          // this is not what I want OR this is not for me
          is_LoRa_EXTI = false;
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <Response_Handle+0x1f4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
          sx1278_start_recv_data();
 80024c8:	f001 f9d8 	bl	800387c <sx1278_start_recv_data>
          continue;
 80024cc:	e08c      	b.n	80025e8 <Response_Handle+0x1ac>
        }
        else
        {
          // Yep ok this is my packet and ID
          if (myStatus == LINK_MODE)
 80024ce:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <Response_Handle+0x20c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d120      	bne.n	8002518 <Response_Handle+0xdc>
          {
            if ((resp.Target_Node_Response & 0x00FF) != LINK_ACK) {myStatus = LINK_MODE; return;}
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <Response_Handle+0x208>)
 80024d8:	891b      	ldrh	r3, [r3, #8]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2bab      	cmp	r3, #171	; 0xab
 80024de:	d003      	beq.n	80024e8 <Response_Handle+0xac>
 80024e0:	4b59      	ldr	r3, [pc, #356]	; (8002648 <Response_Handle+0x20c>)
 80024e2:	2202      	movs	r2, #2
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e0a0      	b.n	800262a <Response_Handle+0x1ee>
            if      (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_ACCEPT)    myStatus = NORMAL_MODE;
 80024e8:	4b56      	ldr	r3, [pc, #344]	; (8002644 <Response_Handle+0x208>)
 80024ea:	891b      	ldrh	r3, [r3, #8]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2baa      	cmp	r3, #170	; 0xaa
 80024f4:	d103      	bne.n	80024fe <Response_Handle+0xc2>
 80024f6:	4b54      	ldr	r3, [pc, #336]	; (8002648 <Response_Handle+0x20c>)
 80024f8:	2204      	movs	r2, #4
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e05d      	b.n	80025ba <Response_Handle+0x17e>
            else if (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_REJECT)    myStatus = (uint8_t)resp.Target_Node_Status;
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <Response_Handle+0x208>)
 8002500:	891b      	ldrh	r3, [r3, #8]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29b      	uxth	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b55      	cmp	r3, #85	; 0x55
 800250a:	d156      	bne.n	80025ba <Response_Handle+0x17e>
 800250c:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <Response_Handle+0x208>)
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <Response_Handle+0x20c>)
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e050      	b.n	80025ba <Response_Handle+0x17e>
          }
          else if (myStatus == NORMAL_MODE)
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <Response_Handle+0x20c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d120      	bne.n	8002562 <Response_Handle+0x126>
              {
                if ((resp.Target_Node_Response & 0x00FF) != LINK_ACK) {myStatus = RETRY_MODE; return;}
 8002520:	4b48      	ldr	r3, [pc, #288]	; (8002644 <Response_Handle+0x208>)
 8002522:	891b      	ldrh	r3, [r3, #8]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2bab      	cmp	r3, #171	; 0xab
 8002528:	d003      	beq.n	8002532 <Response_Handle+0xf6>
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <Response_Handle+0x20c>)
 800252c:	2208      	movs	r2, #8
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e07b      	b.n	800262a <Response_Handle+0x1ee>
                if      (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_CARRYON)   myStatus = (uint8_t)resp.Target_Node_Status;
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <Response_Handle+0x208>)
 8002534:	891b      	ldrh	r3, [r3, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <Response_Handle+0x110>
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <Response_Handle+0x208>)
 8002542:	889b      	ldrh	r3, [r3, #4]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b40      	ldr	r3, [pc, #256]	; (8002648 <Response_Handle+0x20c>)
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e036      	b.n	80025ba <Response_Handle+0x17e>
                else if (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_DISMISS)   myStatus = LINK_MODE;
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <Response_Handle+0x208>)
 800254e:	891b      	ldrh	r3, [r3, #8]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2bff      	cmp	r3, #255	; 0xff
 8002558:	d12f      	bne.n	80025ba <Response_Handle+0x17e>
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <Response_Handle+0x20c>)
 800255c:	2202      	movs	r2, #2
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e02b      	b.n	80025ba <Response_Handle+0x17e>
              }
              else if (myStatus == RETRY_MODE)
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <Response_Handle+0x20c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b08      	cmp	r3, #8
 8002568:	d127      	bne.n	80025ba <Response_Handle+0x17e>
              {
                if      ((resp.Target_Node_Response & 0x00FF) != LINK_ACK) {myStatus = RETRY_MODE;  return;}
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <Response_Handle+0x208>)
 800256c:	891b      	ldrh	r3, [r3, #8]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2bab      	cmp	r3, #171	; 0xab
 8002572:	d003      	beq.n	800257c <Response_Handle+0x140>
 8002574:	4b34      	ldr	r3, [pc, #208]	; (8002648 <Response_Handle+0x20c>)
 8002576:	2208      	movs	r2, #8
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e056      	b.n	800262a <Response_Handle+0x1ee>
                else if ((resp.Target_Node_Response & 0x00FF) == LINK_ACK) {myStatus = NORMAL_MODE;}
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <Response_Handle+0x208>)
 800257e:	891b      	ldrh	r3, [r3, #8]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2bab      	cmp	r3, #171	; 0xab
 8002584:	d102      	bne.n	800258c <Response_Handle+0x150>
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <Response_Handle+0x20c>)
 8002588:	2204      	movs	r2, #4
 800258a:	701a      	strb	r2, [r3, #0]
                if      (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_CARRYON)   myStatus = (uint8_t)resp.Target_Node_Status;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <Response_Handle+0x208>)
 800258e:	891b      	ldrh	r3, [r3, #8]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29b      	uxth	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <Response_Handle+0x16a>
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <Response_Handle+0x208>)
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <Response_Handle+0x20c>)
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e009      	b.n	80025ba <Response_Handle+0x17e>
                else if (((resp.Target_Node_Response >> 8) & 0x00FF) == LINK_DISMISS)   myStatus = LINK_MODE;
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <Response_Handle+0x208>)
 80025a8:	891b      	ldrh	r3, [r3, #8]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2bff      	cmp	r3, #255	; 0xff
 80025b2:	d102      	bne.n	80025ba <Response_Handle+0x17e>
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <Response_Handle+0x20c>)
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]
              }
          HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, resp.Target_Node_Period);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <Response_Handle+0x208>)
 80025bc:	88db      	ldrh	r3, [r3, #6]
 80025be:	461a      	mov	r2, r3
 80025c0:	2103      	movs	r1, #3
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <Response_Handle+0x210>)
 80025c4:	f005 fad0 	bl	8007b68 <HAL_RTCEx_BKUPWrite>
          return;
 80025c8:	e02f      	b.n	800262a <Response_Handle+0x1ee>
        }
      }
      else
      {
        is_LoRa_EXTI = false;
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <Response_Handle+0x1f4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
        sx1278_set_irq(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f001 f8b7 	bl	8003744 <sx1278_set_irq>
        sx1278_write_reg(REG_IRQ_FLAGS, sx1278_read_reg(REG_IRQ_FLAGS));
 80025d6:	2012      	movs	r0, #18
 80025d8:	f000 fe00 	bl	80031dc <sx1278_read_reg>
 80025dc:	4603      	mov	r3, r0
 80025de:	4619      	mov	r1, r3
 80025e0:	2012      	movs	r0, #18
 80025e2:	f000 fe3b 	bl	800325c <sx1278_write_reg>
        continue;
 80025e6:	bf00      	nop
  while ((HAL_GetTick() - timeOut) < 5000U)
 80025e8:	f001 fc6a 	bl	8003ec0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f67f af2c 	bls.w	8002454 <Response_Handle+0x18>
      }
    }
  }

  if (myStatus == LINK_MODE)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <Response_Handle+0x20c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d103      	bne.n	800260c <Response_Handle+0x1d0>
  {
    myStatus = LINK_MODE;
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <Response_Handle+0x20c>)
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e00e      	b.n	800262a <Response_Handle+0x1ee>
  }
  else if (myStatus == NORMAL_MODE)
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <Response_Handle+0x20c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d103      	bne.n	800261c <Response_Handle+0x1e0>
      {
        myStatus = RETRY_MODE;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <Response_Handle+0x20c>)
 8002616:	2208      	movs	r2, #8
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e006      	b.n	800262a <Response_Handle+0x1ee>
      }
      else if (myStatus == RETRY_MODE)
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <Response_Handle+0x20c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d102      	bne.n	800262a <Response_Handle+0x1ee>
          {
            myStatus = RETRY_MODE;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <Response_Handle+0x20c>)
 8002626:	2208      	movs	r2, #8
 8002628:	701a      	strb	r2, [r3, #0]
          }
}
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200003c8 	.word	0x200003c8
 8002634:	2000000c 	.word	0x2000000c
 8002638:	20000008 	.word	0x20000008
 800263c:	200004e8 	.word	0x200004e8
 8002640:	20000484 	.word	0x20000484
 8002644:	200004ec 	.word	0x200004ec
 8002648:	20000362 	.word	0x20000362
 800264c:	20000560 	.word	0x20000560

08002650 <Node_ID_inNetwork>:

bool Node_ID_inNetwork(uint16_t Node_ID)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	uint16_t N_ID[MAX_NODE];
  N_ID[0] = 0xCAACU;
 800265a:	f64c 23ac 	movw	r3, #51884	; 0xcaac
 800265e:	813b      	strh	r3, [r7, #8]
  N_ID[1] = 0xCAADU;
 8002660:	f64c 23ad 	movw	r3, #51885	; 0xcaad
 8002664:	817b      	strh	r3, [r7, #10]
  N_ID[2] = 0xCAAEU;
 8002666:	f64c 23ae 	movw	r3, #51886	; 0xcaae
 800266a:	81bb      	strh	r3, [r7, #12]
  for (int i = 0; i < MAX_NODE; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e018      	b.n	80026a4 <Node_ID_inNetwork+0x54>
  {
      if (N_ID[i] == NODE_ID) continue;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	3318      	adds	r3, #24
 8002678:	443b      	add	r3, r7
 800267a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800267e:	f64c 22ac 	movw	r2, #51884	; 0xcaac
 8002682:	4293      	cmp	r3, r2
 8002684:	d00a      	beq.n	800269c <Node_ID_inNetwork+0x4c>
      if (N_ID[i] == Node_ID) return true;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	3318      	adds	r3, #24
 800268c:	443b      	add	r3, r7
 800268e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	429a      	cmp	r2, r3
 8002696:	d102      	bne.n	800269e <Node_ID_inNetwork+0x4e>
 8002698:	2301      	movs	r3, #1
 800269a:	e007      	b.n	80026ac <Node_ID_inNetwork+0x5c>
      if (N_ID[i] == NODE_ID) continue;
 800269c:	bf00      	nop
  for (int i = 0; i < MAX_NODE; i++)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3301      	adds	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d9e3      	bls.n	8002672 <Node_ID_inNetwork+0x22>

  }
  return false;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <LoRa_Packet_Parser_Mesh>:

void LoRa_Packet_Parser_Mesh(const uint8_t *data, uint32_t len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b096      	sub	sp, #88	; 0x58
 80026bc:	af02      	add	r7, sp, #8
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    double val_sen = 0;
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    switch ((uint16_t)((data[0] << 8) & 0xFF00) | (uint16_t)(data[1] & 0x00FF))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	3201      	adds	r2, #1
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f644 224a 	movw	r2, #19018	; 0x4a4a
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d06d      	beq.n	80027c6 <LoRa_Packet_Parser_Mesh+0x10e>
 80026ea:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 80026ee:	4293      	cmp	r3, r2
 80026f0:	f040 8257 	bne.w	8002ba2 <LoRa_Packet_Parser_Mesh+0x4ea>
    {
        case PACKET_ID_0_MESH:
        {
            if (len != sizeof(Link_Packet_t)) LOG(TAG, "error");
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d005      	beq.n	8002706 <LoRa_Packet_Parser_Mesh+0x4e>
 80026fa:	4ba4      	ldr	r3, [pc, #656]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	49a4      	ldr	r1, [pc, #656]	; (8002990 <LoRa_Packet_Parser_Mesh+0x2d8>)
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe ff8b 	bl	800161c <LOG>

            Link_Struct_t link_payload;
            memcpy((uint8_t *)&link_payload, (uint8_t *)&data[2], sizeof(Link_Struct_t)); // copy all data link for link_payload
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1c99      	adds	r1, r3, #2
 800270a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800270e:	2208      	movs	r2, #8
 8002710:	4618      	mov	r0, r3
 8002712:	f006 fef3 	bl	80094fc <memcpy>
            sprintf(Log,"Node ID: %02X", link_payload.Node_ID);
 8002716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800271a:	461a      	mov	r2, r3
 800271c:	499d      	ldr	r1, [pc, #628]	; (8002994 <LoRa_Packet_Parser_Mesh+0x2dc>)
 800271e:	489e      	ldr	r0, [pc, #632]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 8002720:	f007 fb62 	bl	8009de8 <siprintf>
            LOG(TAG, Log);
 8002724:	4b99      	ldr	r3, [pc, #612]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	499b      	ldr	r1, [pc, #620]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff76 	bl	800161c <LOG>
            if (Node_ID_inNetwork(link_payload.Node_ID) == true)
 8002730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff8b 	bl	8002650 <Node_ID_inNetwork>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8232 	beq.w	8002ba6 <LoRa_Packet_Parser_Mesh+0x4ee>
            {
                ResponsePacket_t resp = {PACKET_ID_2_MESH, link_payload.Node_ID, NORMAL_MODE, DEFAULT_PERIOD_SEC, (uint16_t)(((LINK_ACCEPT << 8) & 0xFF00) | LINK_ACK)};
 8002742:	f244 4344 	movw	r3, #17476	; 0x4444
 8002746:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002748:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800274c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800274e:	2304      	movs	r3, #4
 8002750:	873b      	strh	r3, [r7, #56]	; 0x38
 8002752:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002756:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002758:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 800275c:	87bb      	strh	r3, [r7, #60]	; 0x3c

                nTry = 0;
 800275e:	4b8f      	ldr	r3, [pc, #572]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
                while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002764:	e009      	b.n	800277a <LoRa_Packet_Parser_Mesh+0xc2>
                {
                  nTry++;
 8002766:	4b8d      	ldr	r3, [pc, #564]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b8a      	ldr	r3, [pc, #552]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002772:	701a      	strb	r2, [r3, #0]
                  HAL_Delay(110);
 8002774:	206e      	movs	r0, #110	; 0x6e
 8002776:	f001 fbad 	bl	8003ed4 <HAL_Delay>
                while ((is_OK_2_Talk() == false) && (nTry < 10))
 800277a:	f7ff fc95 	bl	80020a8 <is_OK_2_Talk>
 800277e:	4603      	mov	r3, r0
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <LoRa_Packet_Parser_Mesh+0xdc>
 800278a:	4b84      	ldr	r3, [pc, #528]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b09      	cmp	r3, #9
 8002792:	d9e8      	bls.n	8002766 <LoRa_Packet_Parser_Mesh+0xae>
                }

                if (nTry == 10)
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d106      	bne.n	80027ac <LoRa_Packet_Parser_Mesh+0xf4>
                {
                  myStatus = LINK_MODE;
 800279e:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <LoRa_Packet_Parser_Mesh+0x2e8>)
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
                  HAL_SPI_DeInit(&hspi1);
 80027a4:	487f      	ldr	r0, [pc, #508]	; (80029a4 <LoRa_Packet_Parser_Mesh+0x2ec>)
 80027a6:	f005 fa99 	bl	8007cdc <HAL_SPI_DeInit>
 80027aa:	e203      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
                  return;
                }                

                sx1278_send_data(&resp, sizeof(ResponsePacket_t));
 80027ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b0:	210a      	movs	r1, #10
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f81c 	bl	80037f0 <sx1278_send_data>
                LOG(TAG, "Done!\n");
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	497a      	ldr	r1, [pc, #488]	; (80029a8 <LoRa_Packet_Parser_Mesh+0x2f0>)
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe ff2c 	bl	800161c <LOG>
 80027c4:	e1f6      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
            break;
        }

        case PACKET_ID_1_MESH:
        {
            if (len != sizeof(Data_Packet_t)) break;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b16      	cmp	r3, #22
 80027ca:	f040 81ee 	bne.w	8002baa <LoRa_Packet_Parser_Mesh+0x4f2>
            LOG(TAG, "Data Packet\t");
 80027ce:	4b6f      	ldr	r3, [pc, #444]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4976      	ldr	r1, [pc, #472]	; (80029ac <LoRa_Packet_Parser_Mesh+0x2f4>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff21 	bl	800161c <LOG>

            Data_Struct_t data_recv;
            memcpy((uint8_t *)&data_recv, (uint8_t *) &data[2], sizeof(Data_Struct_t));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	1c99      	adds	r1, r3, #2
 80027de:	f107 0320 	add.w	r3, r7, #32
 80027e2:	2214      	movs	r2, #20
 80027e4:	4618      	mov	r0, r3
 80027e6:	f006 fe89 	bl	80094fc <memcpy>
            if (data_recv.Link.Node_ID == NODE_ID) break;
 80027ea:	8c3b      	ldrh	r3, [r7, #32]
 80027ec:	f64c 22ac 	movw	r2, #51884	; 0xcaac
 80027f0:	4293      	cmp	r3, r2
 80027f2:	f000 81dc 	beq.w	8002bae <LoRa_Packet_Parser_Mesh+0x4f6>
            if (data_recv.Link.Node_ID == 0xCAAC) 
 80027f6:	8c3b      	ldrh	r3, [r7, #32]
 80027f8:	f64c 22ac 	movw	r2, #51884	; 0xcaac
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d108      	bne.n	8002812 <LoRa_Packet_Parser_Mesh+0x15a>
            {
              memcpy((uint8_t *)&Node_Mesh[0], (uint8_t *) &data[0], sizeof(Data_Packet_t));
 8002800:	2216      	movs	r2, #22
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	486a      	ldr	r0, [pc, #424]	; (80029b0 <LoRa_Packet_Parser_Mesh+0x2f8>)
 8002806:	f006 fe79 	bl	80094fc <memcpy>
              Flag_Node_C = 1;
 800280a:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <LoRa_Packet_Parser_Mesh+0x2fc>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e01a      	b.n	8002848 <LoRa_Packet_Parser_Mesh+0x190>
            }
            else if (data_recv.Link.Node_ID == 0xCAAD) 
 8002812:	8c3b      	ldrh	r3, [r7, #32]
 8002814:	f64c 22ad 	movw	r2, #51885	; 0xcaad
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <LoRa_Packet_Parser_Mesh+0x176>
                 {
                    memcpy((uint8_t *)&Node_Mesh[1], (uint8_t *) &data[0], sizeof(Data_Packet_t));
 800281c:	2216      	movs	r2, #22
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4865      	ldr	r0, [pc, #404]	; (80029b8 <LoRa_Packet_Parser_Mesh+0x300>)
 8002822:	f006 fe6b 	bl	80094fc <memcpy>
                    Flag_Node_D = 1;
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <LoRa_Packet_Parser_Mesh+0x304>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e00c      	b.n	8002848 <LoRa_Packet_Parser_Mesh+0x190>
                 }
                 else if (data_recv.Link.Node_ID == 0xCAAE) 
 800282e:	8c3b      	ldrh	r3, [r7, #32]
 8002830:	f64c 22ae 	movw	r2, #51886	; 0xcaae
 8002834:	4293      	cmp	r3, r2
 8002836:	d107      	bne.n	8002848 <LoRa_Packet_Parser_Mesh+0x190>
                      {
                        memcpy((uint8_t *)&Node_Mesh[2], (uint8_t *) &data[0], sizeof(Data_Packet_t));
 8002838:	2216      	movs	r2, #22
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4860      	ldr	r0, [pc, #384]	; (80029c0 <LoRa_Packet_Parser_Mesh+0x308>)
 800283e:	f006 fe5d 	bl	80094fc <memcpy>
                        Flag_Node_E = 1;
 8002842:	4b60      	ldr	r3, [pc, #384]	; (80029c4 <LoRa_Packet_Parser_Mesh+0x30c>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
                      }

            ResponsePacket_t resp = {PACKET_ID_2_MESH, data_recv.Link.Node_ID, NORMAL_MODE, DEFAULT_PERIOD_SEC, (uint16_t)(((LINK_CARRYON << 8) & 0xFF00) | LINK_ACK)};
 8002848:	f244 4344 	movw	r3, #17476	; 0x4444
 800284c:	82bb      	strh	r3, [r7, #20]
 800284e:	8c3b      	ldrh	r3, [r7, #32]
 8002850:	82fb      	strh	r3, [r7, #22]
 8002852:	2304      	movs	r3, #4
 8002854:	833b      	strh	r3, [r7, #24]
 8002856:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800285a:	837b      	strh	r3, [r7, #26]
 800285c:	23ab      	movs	r3, #171	; 0xab
 800285e:	83bb      	strh	r3, [r7, #28]
            LOG(TAG, "Response Lora Mesh...\t");
 8002860:	4b4a      	ldr	r3, [pc, #296]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4958      	ldr	r1, [pc, #352]	; (80029c8 <LoRa_Packet_Parser_Mesh+0x310>)
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fed8 	bl	800161c <LOG>

            nTry = 0;
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
            while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002872:	e009      	b.n	8002888 <LoRa_Packet_Parser_Mesh+0x1d0>
            {
              nTry++;
 8002874:	4b49      	ldr	r3, [pc, #292]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	3301      	adds	r3, #1
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 8002880:	701a      	strb	r2, [r3, #0]
              HAL_Delay(150);
 8002882:	2096      	movs	r0, #150	; 0x96
 8002884:	f001 fb26 	bl	8003ed4 <HAL_Delay>
            while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002888:	f7ff fc0e 	bl	80020a8 <is_OK_2_Talk>
 800288c:	4603      	mov	r3, r0
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <LoRa_Packet_Parser_Mesh+0x1ea>
 8002898:	4b40      	ldr	r3, [pc, #256]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d9e8      	bls.n	8002874 <LoRa_Packet_Parser_Mesh+0x1bc>
            }
            if (nTry == 10)
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <LoRa_Packet_Parser_Mesh+0x2e4>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b0a      	cmp	r3, #10
 80028aa:	d106      	bne.n	80028ba <LoRa_Packet_Parser_Mesh+0x202>
            {
              myStatus = LINK_MODE;
 80028ac:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <LoRa_Packet_Parser_Mesh+0x2e8>)
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
              HAL_SPI_DeInit(&hspi1);
 80028b2:	483c      	ldr	r0, [pc, #240]	; (80029a4 <LoRa_Packet_Parser_Mesh+0x2ec>)
 80028b4:	f005 fa12 	bl	8007cdc <HAL_SPI_DeInit>
 80028b8:	e17c      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
              return;
            }

            LOG(TAG, "Sending packet response to NODE!\t");
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4943      	ldr	r1, [pc, #268]	; (80029cc <LoRa_Packet_Parser_Mesh+0x314>)
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe feab 	bl	800161c <LOG>
            sx1278_send_data(&resp, sizeof(ResponsePacket_t));
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	210a      	movs	r1, #10
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 ff8f 	bl	80037f0 <sx1278_send_data>
            if (data_recv.Link.Node_ID == 0xCAACU) sprintf(Log,"\nNode_1 ID: %02X",data_recv.Link.Node_ID);
 80028d2:	8c3b      	ldrh	r3, [r7, #32]
 80028d4:	f64c 22ac 	movw	r2, #51884	; 0xcaac
 80028d8:	4293      	cmp	r3, r2
 80028da:	d106      	bne.n	80028ea <LoRa_Packet_Parser_Mesh+0x232>
 80028dc:	8c3b      	ldrh	r3, [r7, #32]
 80028de:	461a      	mov	r2, r3
 80028e0:	493b      	ldr	r1, [pc, #236]	; (80029d0 <LoRa_Packet_Parser_Mesh+0x318>)
 80028e2:	482d      	ldr	r0, [pc, #180]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 80028e4:	f007 fa80 	bl	8009de8 <siprintf>
 80028e8:	e016      	b.n	8002918 <LoRa_Packet_Parser_Mesh+0x260>
			else if (data_recv.Link.Node_ID == 0xCAADU) sprintf(Log,"\nNode_2 ID: %02X",data_recv.Link.Node_ID);
 80028ea:	8c3b      	ldrh	r3, [r7, #32]
 80028ec:	f64c 22ad 	movw	r2, #51885	; 0xcaad
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d106      	bne.n	8002902 <LoRa_Packet_Parser_Mesh+0x24a>
 80028f4:	8c3b      	ldrh	r3, [r7, #32]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4936      	ldr	r1, [pc, #216]	; (80029d4 <LoRa_Packet_Parser_Mesh+0x31c>)
 80028fa:	4827      	ldr	r0, [pc, #156]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 80028fc:	f007 fa74 	bl	8009de8 <siprintf>
 8002900:	e00a      	b.n	8002918 <LoRa_Packet_Parser_Mesh+0x260>
				  else if (data_recv.Link.Node_ID == 0xCAAEU) sprintf(Log,"\nNode_3 ID: %02X",data_recv.Link.Node_ID);
 8002902:	8c3b      	ldrh	r3, [r7, #32]
 8002904:	f64c 22ae 	movw	r2, #51886	; 0xcaae
 8002908:	4293      	cmp	r3, r2
 800290a:	d105      	bne.n	8002918 <LoRa_Packet_Parser_Mesh+0x260>
 800290c:	8c3b      	ldrh	r3, [r7, #32]
 800290e:	461a      	mov	r2, r3
 8002910:	4931      	ldr	r1, [pc, #196]	; (80029d8 <LoRa_Packet_Parser_Mesh+0x320>)
 8002912:	4821      	ldr	r0, [pc, #132]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 8002914:	f007 fa68 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	491e      	ldr	r1, [pc, #120]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fe7c 	bl	800161c <LOG>

			sprintf(Log,"Period: %d",data_recv.Link.Node_Period);
 8002924:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002926:	461a      	mov	r2, r3
 8002928:	492c      	ldr	r1, [pc, #176]	; (80029dc <LoRa_Packet_Parser_Mesh+0x324>)
 800292a:	481b      	ldr	r0, [pc, #108]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 800292c:	f007 fa5c 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4918      	ldr	r1, [pc, #96]	; (8002998 <LoRa_Packet_Parser_Mesh+0x2e0>)
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fe70 	bl	800161c <LOG>
			if (data_recv.Link.Node_Status == 1) LOG(TAG,"Status: WAKEUP MODE!");
 800293c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800293e:	2b01      	cmp	r3, #1
 8002940:	d106      	bne.n	8002950 <LoRa_Packet_Parser_Mesh+0x298>
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4926      	ldr	r1, [pc, #152]	; (80029e0 <LoRa_Packet_Parser_Mesh+0x328>)
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fe67 	bl	800161c <LOG>
 800294e:	e058      	b.n	8002a02 <LoRa_Packet_Parser_Mesh+0x34a>
			else if (data_recv.Link.Node_Status == 2) LOG(TAG,"Status: LINK MODE!");
 8002950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002952:	2b02      	cmp	r3, #2
 8002954:	d106      	bne.n	8002964 <LoRa_Packet_Parser_Mesh+0x2ac>
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4922      	ldr	r1, [pc, #136]	; (80029e4 <LoRa_Packet_Parser_Mesh+0x32c>)
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fe5d 	bl	800161c <LOG>
 8002962:	e04e      	b.n	8002a02 <LoRa_Packet_Parser_Mesh+0x34a>
				  else if (data_recv.Link.Node_Status == 4) LOG(TAG,"Status: NORMAL MODE!");
 8002964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002966:	2b04      	cmp	r3, #4
 8002968:	d106      	bne.n	8002978 <LoRa_Packet_Parser_Mesh+0x2c0>
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	491e      	ldr	r1, [pc, #120]	; (80029e8 <LoRa_Packet_Parser_Mesh+0x330>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fe53 	bl	800161c <LOG>
 8002976:	e044      	b.n	8002a02 <LoRa_Packet_Parser_Mesh+0x34a>
					  else if (data_recv.Link.Node_Status == 8) LOG(TAG,"Status: RETRY MODE!");
 8002978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800297a:	2b08      	cmp	r3, #8
 800297c:	d138      	bne.n	80029f0 <LoRa_Packet_Parser_Mesh+0x338>
 800297e:	4b03      	ldr	r3, [pc, #12]	; (800298c <LoRa_Packet_Parser_Mesh+0x2d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	491a      	ldr	r1, [pc, #104]	; (80029ec <LoRa_Packet_Parser_Mesh+0x334>)
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fe49 	bl	800161c <LOG>
 800298a:	e03a      	b.n	8002a02 <LoRa_Packet_Parser_Mesh+0x34a>
 800298c:	20000000 	.word	0x20000000
 8002990:	0800c2f8 	.word	0x0800c2f8
 8002994:	0800c300 	.word	0x0800c300
 8002998:	200003fc 	.word	0x200003fc
 800299c:	200003ec 	.word	0x200003ec
 80029a0:	20000362 	.word	0x20000362
 80029a4:	20000574 	.word	0x20000574
 80029a8:	0800c310 	.word	0x0800c310
 80029ac:	0800c318 	.word	0x0800c318
 80029b0:	20000320 	.word	0x20000320
 80029b4:	200003f8 	.word	0x200003f8
 80029b8:	20000336 	.word	0x20000336
 80029bc:	200003f4 	.word	0x200003f4
 80029c0:	2000034c 	.word	0x2000034c
 80029c4:	200003f0 	.word	0x200003f0
 80029c8:	0800c328 	.word	0x0800c328
 80029cc:	0800c340 	.word	0x0800c340
 80029d0:	0800c364 	.word	0x0800c364
 80029d4:	0800c378 	.word	0x0800c378
 80029d8:	0800c38c 	.word	0x0800c38c
 80029dc:	0800c3a0 	.word	0x0800c3a0
 80029e0:	0800c3ac 	.word	0x0800c3ac
 80029e4:	0800c3c4 	.word	0x0800c3c4
 80029e8:	0800c3d8 	.word	0x0800c3d8
 80029ec:	0800c3f0 	.word	0x0800c3f0
							else if (data_recv.Link.Node_Status == 16) LOG(TAG,"Status: SHUTDOWN MODE!");
 80029f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d105      	bne.n	8002a02 <LoRa_Packet_Parser_Mesh+0x34a>
 80029f6:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4974      	ldr	r1, [pc, #464]	; (8002bcc <LoRa_Packet_Parser_Mesh+0x514>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fe0d 	bl	800161c <LOG>

			val_sen = (double)(((double)(data_recv.Link.Node_Battery_Voltage))/100.0);
 8002a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fced 	bl	80003e4 <__aeabi_ui2d>
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b70      	ldr	r3, [pc, #448]	; (8002bd0 <LoRa_Packet_Parser_Mesh+0x518>)
 8002a10:	f7fd fe8c 	bl	800072c <__aeabi_ddiv>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			sprintf(Log,"Battery: %.1f", val_sen);
 8002a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a20:	496c      	ldr	r1, [pc, #432]	; (8002bd4 <LoRa_Packet_Parser_Mesh+0x51c>)
 8002a22:	486d      	ldr	r0, [pc, #436]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a24:	f007 f9e0 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002a28:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	496a      	ldr	r1, [pc, #424]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fdf4 	bl	800161c <LOG>

			val_sen = (double)(((double)(data_recv.Node_AHT_Humidity))/10.0);
 8002a34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fcd4 	bl	80003e4 <__aeabi_ui2d>
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <LoRa_Packet_Parser_Mesh+0x524>)
 8002a42:	f7fd fe73 	bl	800072c <__aeabi_ddiv>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			sprintf(Log,"AHT Humidity: %.1f%c", val_sen, 0x25);
 8002a4e:	2325      	movs	r3, #37	; 0x25
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a56:	4962      	ldr	r1, [pc, #392]	; (8002be0 <LoRa_Packet_Parser_Mesh+0x528>)
 8002a58:	485f      	ldr	r0, [pc, #380]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a5a:	f007 f9c5 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002a5e:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	495d      	ldr	r1, [pc, #372]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fdd9 	bl	800161c <LOG>

			val_sen = (double)(((double)(data_recv.Node_AHT_Temperature))/10.0);
 8002a6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fcb9 	bl	80003e4 <__aeabi_ui2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <LoRa_Packet_Parser_Mesh+0x524>)
 8002a78:	f7fd fe58 	bl	800072c <__aeabi_ddiv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			sprintf(Log,"AHT Temperature: %.1f", val_sen);
 8002a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a88:	4956      	ldr	r1, [pc, #344]	; (8002be4 <LoRa_Packet_Parser_Mesh+0x52c>)
 8002a8a:	4853      	ldr	r0, [pc, #332]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a8c:	f007 f9ac 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002a90:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4950      	ldr	r1, [pc, #320]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fdc0 	bl	800161c <LOG>

			val_sen = (double)(((double)(data_recv.Node_LM35_Temperature))/10.0);
 8002a9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fd fca0 	bl	80003e4 <__aeabi_ui2d>
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <LoRa_Packet_Parser_Mesh+0x524>)
 8002aaa:	f7fd fe3f 	bl	800072c <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			sprintf(Log,"LM35: %.1f", val_sen);
 8002ab6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aba:	494b      	ldr	r1, [pc, #300]	; (8002be8 <LoRa_Packet_Parser_Mesh+0x530>)
 8002abc:	4846      	ldr	r0, [pc, #280]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002abe:	f007 f993 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4944      	ldr	r1, [pc, #272]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fda7 	bl	800161c <LOG>

			val_sen = (double)(((double)(data_recv.Node_wind_speed))/10.0 * 3.6);
 8002ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fc87 	bl	80003e4 <__aeabi_ui2d>
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <LoRa_Packet_Parser_Mesh+0x524>)
 8002adc:	f7fd fe26 	bl	800072c <__aeabi_ddiv>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	a335      	add	r3, pc, #212	; (adr r3, 8002bc0 <LoRa_Packet_Parser_Mesh+0x508>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fcf3 	bl	80004d8 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			sprintf(Log,"Wind Speed: %.1f", val_sen);
 8002afa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002afe:	493b      	ldr	r1, [pc, #236]	; (8002bec <LoRa_Packet_Parser_Mesh+0x534>)
 8002b00:	4835      	ldr	r0, [pc, #212]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b02:	f007 f971 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4933      	ldr	r1, [pc, #204]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fd85 	bl	800161c <LOG>

			sprintf(Log,"Wind Level: %d", data_recv.Node_wind_level);
 8002b12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b14:	461a      	mov	r2, r3
 8002b16:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <LoRa_Packet_Parser_Mesh+0x538>)
 8002b18:	482f      	ldr	r0, [pc, #188]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b1a:	f007 f965 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	492d      	ldr	r1, [pc, #180]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fd79 	bl	800161c <LOG>

			sprintf(Log,"Wind Direction: %d", data_recv.Node_wind_direction);
 8002b2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4931      	ldr	r1, [pc, #196]	; (8002bf4 <LoRa_Packet_Parser_Mesh+0x53c>)
 8002b30:	4829      	ldr	r0, [pc, #164]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b32:	f007 f959 	bl	8009de8 <siprintf>
			LOG(TAG, Log);
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4927      	ldr	r1, [pc, #156]	; (8002bd8 <LoRa_Packet_Parser_Mesh+0x520>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fd6d 	bl	800161c <LOG>

            if (Node_ID_inNetwork(data_recv.Link.Node_ID) == false)
 8002b42:	8c3b      	ldrh	r3, [r7, #32]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fd83 	bl	8002650 <Node_ID_inNetwork>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d02d      	beq.n	8002bb2 <LoRa_Packet_Parser_Mesh+0x4fa>
            {
                LOG(TAG, "NOT IN NETWORK");
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4927      	ldr	r1, [pc, #156]	; (8002bf8 <LoRa_Packet_Parser_Mesh+0x540>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fd5d 	bl	800161c <LOG>
                ResponsePacket_t resp = {PACKET_ID_2_MESH, data_recv.Link.Node_ID, LINK_MODE, DEFAULT_PERIOD_SEC, (uint16_t)(((LINK_DISMISS << 8) & 0xFF00) | LINK_ACK)};
 8002b62:	f244 4344 	movw	r3, #17476	; 0x4444
 8002b66:	813b      	strh	r3, [r7, #8]
 8002b68:	8c3b      	ldrh	r3, [r7, #32]
 8002b6a:	817b      	strh	r3, [r7, #10]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	81bb      	strh	r3, [r7, #12]
 8002b70:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b74:	81fb      	strh	r3, [r7, #14]
 8002b76:	f64f 73ab 	movw	r3, #65451	; 0xffab
 8002b7a:	823b      	strh	r3, [r7, #16]
                //   myStatus = RETRY_MODE;
                //   HAL_SPI_DeInit(&hspi1);
                //   return;
                // }

                LOG(TAG, "Sending packet to NODE...\t");
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	491e      	ldr	r1, [pc, #120]	; (8002bfc <LoRa_Packet_Parser_Mesh+0x544>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fd4a 	bl	800161c <LOG>
                sx1278_send_data(&resp, sizeof(ResponsePacket_t));
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fe2e 	bl	80037f0 <sx1278_send_data>
                
                LOG(TAG, "Dismiss NODE!!\n");
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoRa_Packet_Parser_Mesh+0x510>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4919      	ldr	r1, [pc, #100]	; (8002c00 <LoRa_Packet_Parser_Mesh+0x548>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fd3e 	bl	800161c <LOG>
                // sx1278_start_recv_data();
            }
            break;
 8002ba0:	e007      	b.n	8002bb2 <LoRa_Packet_Parser_Mesh+0x4fa>
        }
        default: break;
 8002ba2:	bf00      	nop
 8002ba4:	e006      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
            break;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
            if (len != sizeof(Data_Packet_t)) break;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
            if (data_recv.Link.Node_ID == NODE_ID) break;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <LoRa_Packet_Parser_Mesh+0x4fc>
            break;
 8002bb2:	bf00      	nop
    }
}
 8002bb4:	3750      	adds	r7, #80	; 0x50
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	400ccccc 	.word	0x400ccccc
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	0800c404 	.word	0x0800c404
 8002bd0:	40590000 	.word	0x40590000
 8002bd4:	0800c41c 	.word	0x0800c41c
 8002bd8:	200003fc 	.word	0x200003fc
 8002bdc:	40240000 	.word	0x40240000
 8002be0:	0800c42c 	.word	0x0800c42c
 8002be4:	0800c444 	.word	0x0800c444
 8002be8:	0800c45c 	.word	0x0800c45c
 8002bec:	0800c468 	.word	0x0800c468
 8002bf0:	0800c47c 	.word	0x0800c47c
 8002bf4:	0800c48c 	.word	0x0800c48c
 8002bf8:	0800c4a0 	.word	0x0800c4a0
 8002bfc:	0800c4b0 	.word	0x0800c4b0
 8002c00:	0800c4cc 	.word	0x0800c4cc

08002c04 <Normal_Mode_Mesh_Handle>:

void Normal_Mode_Mesh_Handle(Data_Packet_t Node)
{
 8002c04:	b084      	sub	sp, #16
 8002c06:	b5b0      	push	{r4, r5, r7, lr}
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	f107 0410 	add.w	r4, r7, #16
 8002c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MX_SPI1_Init();
 8002c12:	f000 f9b5 	bl	8002f80 <MX_SPI1_Init>
  HAL_Delay(100);
 8002c16:	2064      	movs	r0, #100	; 0x64
 8002c18:	f001 f95c 	bl	8003ed4 <HAL_Delay>
  sx1278_init();
 8002c1c:	f000 fda0 	bl	8003760 <sx1278_init>

  memset(payload, '\0', sizeof(payload));
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	2100      	movs	r1, #0
 8002c24:	4823      	ldr	r0, [pc, #140]	; (8002cb4 <Normal_Mode_Mesh_Handle+0xb0>)
 8002c26:	f006 fc77 	bl	8009518 <memset>
  memcpy((uint8_t *)payload, (uint8_t *)&Node, sizeof(Data_Packet_t));
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <Normal_Mode_Mesh_Handle+0xb0>)
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	f107 0510 	add.w	r5, r7, #16
 8002c32:	6828      	ldr	r0, [r5, #0]
 8002c34:	6869      	ldr	r1, [r5, #4]
 8002c36:	68aa      	ldr	r2, [r5, #8]
 8002c38:	68eb      	ldr	r3, [r5, #12]
 8002c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3c:	6928      	ldr	r0, [r5, #16]
 8002c3e:	6020      	str	r0, [r4, #0]
 8002c40:	8aab      	ldrh	r3, [r5, #20]
 8002c42:	80a3      	strh	r3, [r4, #4]

  nTry = 0;
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <Normal_Mode_Mesh_Handle+0xb4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002c4a:	e009      	b.n	8002c60 <Normal_Mode_Mesh_Handle+0x5c>
  {
    nTry++;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <Normal_Mode_Mesh_Handle+0xb4>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <Normal_Mode_Mesh_Handle+0xb4>)
 8002c58:	701a      	strb	r2, [r3, #0]
    HAL_Delay(150);
 8002c5a:	2096      	movs	r0, #150	; 0x96
 8002c5c:	f001 f93a 	bl	8003ed4 <HAL_Delay>
  while ((is_OK_2_Talk() == false) && (nTry < 10))
 8002c60:	f7ff fa22 	bl	80020a8 <is_OK_2_Talk>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f083 0301 	eor.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <Normal_Mode_Mesh_Handle+0x76>
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <Normal_Mode_Mesh_Handle+0xb4>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	d9e8      	bls.n	8002c4c <Normal_Mode_Mesh_Handle+0x48>
  }
  if (nTry == 10)
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <Normal_Mode_Mesh_Handle+0xb4>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b0a      	cmp	r3, #10
 8002c82:	d106      	bne.n	8002c92 <Normal_Mode_Mesh_Handle+0x8e>
  {
    myStatus = LINK_MODE;
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <Normal_Mode_Mesh_Handle+0xb8>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	701a      	strb	r2, [r3, #0]
    HAL_SPI_DeInit(&hspi1);
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <Normal_Mode_Mesh_Handle+0xbc>)
 8002c8c:	f005 f826 	bl	8007cdc <HAL_SPI_DeInit>
    return;
 8002c90:	e00a      	b.n	8002ca8 <Normal_Mode_Mesh_Handle+0xa4>
  }

  sx1278_send_data(payload, sizeof(Data_Packet_t));
 8002c92:	2116      	movs	r1, #22
 8002c94:	4807      	ldr	r0, [pc, #28]	; (8002cb4 <Normal_Mode_Mesh_Handle+0xb0>)
 8002c96:	f000 fdab 	bl	80037f0 <sx1278_send_data>
  Response_Handle();
 8002c9a:	f7ff fbcf 	bl	800243c <Response_Handle>

  sx1278_sleep();
 8002c9e:	f000 fb39 	bl	8003314 <sx1278_sleep>
  HAL_SPI_DeInit(&hspi1);
 8002ca2:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <Normal_Mode_Mesh_Handle+0xbc>)
 8002ca4:	f005 f81a 	bl	8007cdc <HAL_SPI_DeInit>
}
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002cae:	b004      	add	sp, #16
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000364 	.word	0x20000364
 8002cb8:	200003ec 	.word	0x200003ec
 8002cbc:	20000362 	.word	0x20000362
 8002cc0:	20000574 	.word	0x20000574

08002cc4 <LoRa_Recv_Node>:

void LoRa_Recv_Node(void)
{
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af02      	add	r7, sp, #8
  // static ResponsePacket_t resp_mesh;
  static uint8_t data_mesh[100] = {0};
  static uint32_t nByteRx_mesh = 0;
  static int rssi_mesh = -1;
  static float snr_mesh = -1;
  uint32_t Tick_Time = HAL_GetTick();
 8002cca:	f001 f8f9 	bl	8003ec0 <HAL_GetTick>
 8002cce:	6078      	str	r0, [r7, #4]
  MX_SPI1_Init();
 8002cd0:	f000 f956 	bl	8002f80 <MX_SPI1_Init>
  HAL_Delay(100);
 8002cd4:	2064      	movs	r0, #100	; 0x64
 8002cd6:	f001 f8fd 	bl	8003ed4 <HAL_Delay>
  sx1278_init();
 8002cda:	f000 fd41 	bl	8003760 <sx1278_init>
  is_LoRa_EXTI = false;
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <LoRa_Recv_Node+0xe8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
  sx1278_start_recv_data();
 8002ce4:	f000 fdca 	bl	800387c <sx1278_start_recv_data>
  while ((HAL_GetTick() - Tick_Time) < TIMEOUT_NODE)
 8002ce8:	e04e      	b.n	8002d88 <LoRa_Recv_Node+0xc4>
  {
    if (is_LoRa_EXTI == true)
 8002cea:	4b30      	ldr	r3, [pc, #192]	; (8002dac <LoRa_Recv_Node+0xe8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d049      	beq.n	8002d88 <LoRa_Recv_Node+0xc4>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	482d      	ldr	r0, [pc, #180]	; (8002db0 <LoRa_Recv_Node+0xec>)
 8002cfa:	f002 fd3b 	bl	8005774 <HAL_GPIO_WritePin>
      if (sx1278_recv_data((uint8_t *)data_mesh, &nByteRx_mesh, &rssi_mesh, &snr_mesh, false) == SX1278_OK)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <LoRa_Recv_Node+0xf0>)
 8002d04:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <LoRa_Recv_Node+0xf4>)
 8002d06:	492d      	ldr	r1, [pc, #180]	; (8002dbc <LoRa_Recv_Node+0xf8>)
 8002d08:	482d      	ldr	r0, [pc, #180]	; (8002dc0 <LoRa_Recv_Node+0xfc>)
 8002d0a:	f000 fdcb 	bl	80038a4 <sx1278_recv_data>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d128      	bne.n	8002d66 <LoRa_Recv_Node+0xa2>
      {
    	  is_LoRa_EXTI = false;
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <LoRa_Recv_Node+0xe8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
    	  sprintf(Log, "\nLoRa Received %lu byte(s) - rssi: %d - snr: %2.1f", nByteRx_mesh, rssi_mesh, snr_mesh);
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <LoRa_Recv_Node+0xf8>)
 8002d1c:	681c      	ldr	r4, [r3, #0]
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <LoRa_Recv_Node+0xf4>)
 8002d20:	681d      	ldr	r5, [r3, #0]
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <LoRa_Recv_Node+0xf0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fb7e 	bl	8000428 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9cd 2300 	strd	r2, r3, [sp]
 8002d34:	462b      	mov	r3, r5
 8002d36:	4622      	mov	r2, r4
 8002d38:	4922      	ldr	r1, [pc, #136]	; (8002dc4 <LoRa_Recv_Node+0x100>)
 8002d3a:	4823      	ldr	r0, [pc, #140]	; (8002dc8 <LoRa_Recv_Node+0x104>)
 8002d3c:	f007 f854 	bl	8009de8 <siprintf>
        LOG(TAG, Log);
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <LoRa_Recv_Node+0x108>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4920      	ldr	r1, [pc, #128]	; (8002dc8 <LoRa_Recv_Node+0x104>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fc68 	bl	800161c <LOG>
            // {
            // 	sprintf(Log, "%02x", data_mesh[i]);
            // 	LOG(TAG, Log);
            // }
//          }
          LoRa_Packet_Parser_Mesh((const uint8_t *)data_mesh, nByteRx_mesh);
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <LoRa_Recv_Node+0xf8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	481b      	ldr	r0, [pc, #108]	; (8002dc0 <LoRa_Recv_Node+0xfc>)
 8002d54:	f7ff fcb0 	bl	80026b8 <LoRa_Packet_Parser_Mesh>
          sx1278_start_recv_data();
 8002d58:	f000 fd90 	bl	800387c <sx1278_start_recv_data>
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4814      	ldr	r0, [pc, #80]	; (8002db0 <LoRa_Recv_Node+0xec>)
 8002d60:	f002 fd20 	bl	80057a4 <HAL_GPIO_TogglePin>
 8002d64:	e00d      	b.n	8002d82 <LoRa_Recv_Node+0xbe>
      }  
      else
      {
    	  is_LoRa_EXTI = false;
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <LoRa_Recv_Node+0xe8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    	  sx1278_set_irq(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 fce9 	bl	8003744 <sx1278_set_irq>
    	  sx1278_write_reg(REG_IRQ_FLAGS, sx1278_read_reg(REG_IRQ_FLAGS));
 8002d72:	2012      	movs	r0, #18
 8002d74:	f000 fa32 	bl	80031dc <sx1278_read_reg>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	2012      	movs	r0, #18
 8002d7e:	f000 fa6d 	bl	800325c <sx1278_write_reg>
      }
      is_LoRa_EXTI = false; 
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <LoRa_Recv_Node+0xe8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
  while ((HAL_GetTick() - Tick_Time) < TIMEOUT_NODE)
 8002d88:	f001 f89a 	bl	8003ec0 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d9a7      	bls.n	8002cea <LoRa_Recv_Node+0x26>
    } 
  }
  
  sx1278_sleep();
 8002d9a:	f000 fabb 	bl	8003314 <sx1278_sleep>
  HAL_SPI_DeInit(&hspi1);
 8002d9e:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <LoRa_Recv_Node+0x10c>)
 8002da0:	f004 ff9c 	bl	8007cdc <HAL_SPI_DeInit>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	200003c8 	.word	0x200003c8
 8002db0:	40010c00 	.word	0x40010c00
 8002db4:	20000014 	.word	0x20000014
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	2000055c 	.word	0x2000055c
 8002dc0:	200004f8 	.word	0x200004f8
 8002dc4:	0800c4dc 	.word	0x0800c4dc
 8002dc8:	200003fc 	.word	0x200003fc
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000574 	.word	0x20000574

08002dd4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  if ((GPIO_Pin == LoRa_EXT0_Pin) && (is_LoRa_EXTI == false))
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d10a      	bne.n	8002dfa <HAL_GPIO_EXTI_Callback+0x26>
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_GPIO_EXTI_Callback+0x30>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_GPIO_EXTI_Callback+0x26>
  {
    is_LoRa_EXTI = true;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GPIO_EXTI_Callback+0x30>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	200003c8 	.word	0x200003c8

08002e08 <HAL_RTCEx_RTCEventCallback>:

void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_NVIC_SystemReset();
 8002e10:	f001 fdb3 	bl	800497a <HAL_NVIC_SystemReset>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <Error_Handler+0x8>
	...

08002e28 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8002e38:	23ff      	movs	r3, #255	; 0xff
 8002e3a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8002e3c:	e013      	b.n	8002e66 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	4053      	eors	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <crc16+0x64>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4413      	add	r3, r2
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4053      	eors	r3, r2
 8002e5a:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8002e5c:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <crc16+0x68>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	807a      	strh	r2, [r7, #2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e6      	bne.n	8002e3e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	b21a      	sxth	r2, r3
 8002e76:	7bbb      	ldrb	r3, [r7, #14]
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	b29b      	uxth	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	0800c5e0 	.word	0x0800c5e0
 8002e90:	0800c6e0 	.word	0x0800c6e0

08002e94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	801a      	strh	r2, [r3, #0]
 8002ea2:	460a      	mov	r2, r1
 8002ea4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <MX_RTC_Init+0x90>)
 8002eae:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ebe:	4818      	ldr	r0, [pc, #96]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002ec0:	f004 fa8e 	bl	80073e0 <HAL_RTC_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8002eca:	f7ff ffa7 	bl	8002e1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	2201      	movs	r2, #1
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480f      	ldr	r0, [pc, #60]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002ee2:	f004 fb09 	bl	80074f8 <HAL_RTC_SetTime>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8002eec:	f7ff ff96 	bl	8002e1c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002f00:	463b      	mov	r3, r7
 8002f02:	2201      	movs	r2, #1
 8002f04:	4619      	mov	r1, r3
 8002f06:	4806      	ldr	r0, [pc, #24]	; (8002f20 <MX_RTC_Init+0x8c>)
 8002f08:	f004 fb8e 	bl	8007628 <HAL_RTC_SetDate>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002f12:	f7ff ff83 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000560 	.word	0x20000560
 8002f24:	40002800 	.word	0x40002800

08002f28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_RTC_MspInit+0x4c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d118      	bne.n	8002f6c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002f3a:	f003 fcc9 	bl	80068d0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_RTC_MspInit+0x50>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_RTC_MspInit+0x50>)
 8002f44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RTC_MspInit+0x50>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_RTC_MspInit+0x54>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2003      	movs	r0, #3
 8002f62:	f001 fce0 	bl	8004926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f001 fcf9 	bl	800495e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40002800 	.word	0x40002800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	4242043c 	.word	0x4242043c

08002f80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <MX_SPI1_Init+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fcc:	220a      	movs	r2, #10
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fd2:	f004 fdff 	bl	8007bd4 <HAL_SPI_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fdc:	f7ff ff1e 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000574 	.word	0x20000574
 8002fe8:	40013000 	.word	0x40013000

08002fec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_SPI_MspInit+0xa4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d13d      	bne.n	8003088 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 8003012:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003016:	6193      	str	r3, [r2, #24]
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6193      	str	r3, [r2, #24]
 8003030:	4b18      	ldr	r3, [pc, #96]	; (8003094 <HAL_SPI_MspInit+0xa8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800303c:	2328      	movs	r3, #40	; 0x28
 800303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4812      	ldr	r0, [pc, #72]	; (8003098 <HAL_SPI_MspInit+0xac>)
 8003050:	f002 f950 	bl	80052f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003054:	2310      	movs	r3, #16
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4619      	mov	r1, r3
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <HAL_SPI_MspInit+0xac>)
 8003068:	f002 f944 	bl	80052f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_SPI_MspInit+0xb0>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	4a06      	ldr	r2, [pc, #24]	; (800309c <HAL_SPI_MspInit+0xb0>)
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40013000 	.word	0x40013000
 8003094:	40021000 	.word	0x40021000
 8003098:	40010c00 	.word	0x40010c00
 800309c:	40010000 	.word	0x40010000

080030a0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_SPI_MspDeInit+0x30>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d109      	bne.n	80030c6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_SPI_MspDeInit+0x34>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_SPI_MspDeInit+0x34>)
 80030b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030bc:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 80030be:	2138      	movs	r1, #56	; 0x38
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_SPI_MspDeInit+0x38>)
 80030c2:	f002 fa9b 	bl	80055fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40013000 	.word	0x40013000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010c00 	.word	0x40010c00

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_MspInit+0x5c>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <HAL_MspInit+0x5c>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_MspInit+0x5c>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_MspInit+0x5c>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_MspInit+0x5c>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_MspInit+0x5c>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_MspInit+0x60>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <HAL_MspInit+0x60>)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000

08003140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003144:	e7fe      	b.n	8003144 <NMI_Handler+0x4>

08003146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800314a:	e7fe      	b.n	800314a <HardFault_Handler+0x4>

0800314c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003150:	e7fe      	b.n	8003150 <MemManage_Handler+0x4>

08003152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003156:	e7fe      	b.n	8003156 <BusFault_Handler+0x4>

08003158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800315c:	e7fe      	b.n	800315c <UsageFault_Handler+0x4>

0800315e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003186:	f000 fe89 	bl	8003e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <RTC_IRQHandler+0x10>)
 8003196:	f004 fca7 	bl	8007ae8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000560 	.word	0x20000560

080031a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LoRa_EXT0_Pin);
 80031a8:	2002      	movs	r0, #2
 80031aa:	f002 fb15 	bl	80057d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <DMA1_Channel1_IRQHandler+0x10>)
 80031ba:	f001 fd5d 	bl	8004c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000244 	.word	0x20000244

080031c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <USART1_IRQHandler+0x10>)
 80031ce:	f005 fbed 	bl	80089ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	200005d4 	.word	0x200005d4

080031dc <sx1278_read_reg>:
static const char *TAG = "SX1278";

uint8_t ver; 

uint8_t sx1278_read_reg(uint8_t reg)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
	uint8_t txByte = reg & 0x7f;
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(LoRa_CS_PORT, LoRa_CS_PIN, GPIO_PIN_RESET);
 80031f4:	2200      	movs	r2, #0
 80031f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031fa:	4816      	ldr	r0, [pc, #88]	; (8003254 <sx1278_read_reg+0x78>)
 80031fc:	f002 faba 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(HSPI, &txByte, 1, 1000);
 8003200:	f107 010f 	add.w	r1, r7, #15
 8003204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003208:	2201      	movs	r2, #1
 800320a:	4813      	ldr	r0, [pc, #76]	; (8003258 <sx1278_read_reg+0x7c>)
 800320c:	f004 fd8e 	bl	8007d2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(HSPI) != HAL_SPI_STATE_READY);
 8003210:	bf00      	nop
 8003212:	4811      	ldr	r0, [pc, #68]	; (8003258 <sx1278_read_reg+0x7c>)
 8003214:	f005 f995 	bl	8008542 <HAL_SPI_GetState>
 8003218:	4603      	mov	r3, r0
 800321a:	2b01      	cmp	r3, #1
 800321c:	d1f9      	bne.n	8003212 <sx1278_read_reg+0x36>
	HAL_SPI_Receive(HSPI, &rxByte, 1, 1000);
 800321e:	f107 010e 	add.w	r1, r7, #14
 8003222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003226:	2201      	movs	r2, #1
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <sx1278_read_reg+0x7c>)
 800322a:	f004 fec2 	bl	8007fb2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(HSPI) != HAL_SPI_STATE_READY);
 800322e:	bf00      	nop
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <sx1278_read_reg+0x7c>)
 8003232:	f005 f986 	bl	8008542 <HAL_SPI_GetState>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d1f9      	bne.n	8003230 <sx1278_read_reg+0x54>
    HAL_GPIO_WritePin(LoRa_CS_PORT, LoRa_CS_PIN, GPIO_PIN_SET);
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003242:	4804      	ldr	r0, [pc, #16]	; (8003254 <sx1278_read_reg+0x78>)
 8003244:	f002 fa96 	bl	8005774 <HAL_GPIO_WritePin>
    return rxByte;
 8003248:	7bbb      	ldrb	r3, [r7, #14]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40010800 	.word	0x40010800
 8003258:	20000574 	.word	0x20000574

0800325c <sx1278_write_reg>:

void sx1278_write_reg(uint8_t reg, uint8_t val)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	460a      	mov	r2, r1
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	4613      	mov	r3, r2
 800326a:	71bb      	strb	r3, [r7, #6]
	uint8_t ureg = reg | 0x80;
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003272:	b2db      	uxtb	r3, r3
 8003274:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(LoRa_CS_PORT, LoRa_CS_PIN, GPIO_PIN_RESET);
 8003276:	2200      	movs	r2, #0
 8003278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800327c:	4814      	ldr	r0, [pc, #80]	; (80032d0 <sx1278_write_reg+0x74>)
 800327e:	f002 fa79 	bl	8005774 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(HSPI, &ureg, 1, 1000);
 8003282:	f107 010f 	add.w	r1, r7, #15
 8003286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328a:	2201      	movs	r2, #1
 800328c:	4811      	ldr	r0, [pc, #68]	; (80032d4 <sx1278_write_reg+0x78>)
 800328e:	f004 fd4d 	bl	8007d2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(HSPI) != HAL_SPI_STATE_READY);
 8003292:	bf00      	nop
 8003294:	480f      	ldr	r0, [pc, #60]	; (80032d4 <sx1278_write_reg+0x78>)
 8003296:	f005 f954 	bl	8008542 <HAL_SPI_GetState>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d1f9      	bne.n	8003294 <sx1278_write_reg+0x38>
	HAL_SPI_Transmit(HSPI, &val, 1, 1000);
 80032a0:	1db9      	adds	r1, r7, #6
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	2201      	movs	r2, #1
 80032a8:	480a      	ldr	r0, [pc, #40]	; (80032d4 <sx1278_write_reg+0x78>)
 80032aa:	f004 fd3f 	bl	8007d2c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(HSPI) != HAL_SPI_STATE_READY);
 80032ae:	bf00      	nop
 80032b0:	4808      	ldr	r0, [pc, #32]	; (80032d4 <sx1278_write_reg+0x78>)
 80032b2:	f005 f946 	bl	8008542 <HAL_SPI_GetState>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d1f9      	bne.n	80032b0 <sx1278_write_reg+0x54>
	HAL_GPIO_WritePin(LoRa_CS_PORT, LoRa_CS_PIN, GPIO_PIN_SET);
 80032bc:	2201      	movs	r2, #1
 80032be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <sx1278_write_reg+0x74>)
 80032c4:	f002 fa56 	bl	8005774 <HAL_GPIO_WritePin>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40010800 	.word	0x40010800
 80032d4:	20000574 	.word	0x20000574

080032d8 <sx1278_reset>:

void sx1278_reset(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LoRa_RST_PORT, LoRa_RST_PIN, GPIO_PIN_RESET);
 80032dc:	2200      	movs	r2, #0
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	480a      	ldr	r0, [pc, #40]	; (800330c <sx1278_reset+0x34>)
 80032e2:	f002 fa47 	bl	8005774 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80032e6:	2032      	movs	r0, #50	; 0x32
 80032e8:	f000 fdf4 	bl	8003ed4 <HAL_Delay>
    HAL_GPIO_WritePin(LoRa_RST_PORT, LoRa_RST_PIN, GPIO_PIN_SET);
 80032ec:	2201      	movs	r2, #1
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	4806      	ldr	r0, [pc, #24]	; (800330c <sx1278_reset+0x34>)
 80032f2:	f002 fa3f 	bl	8005774 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80032f6:	2032      	movs	r0, #50	; 0x32
 80032f8:	f000 fdec 	bl	8003ed4 <HAL_Delay>
    HAL_GPIO_WritePin(LoRa_CS_PORT, LoRa_CS_PIN, GPIO_PIN_SET);
 80032fc:	2201      	movs	r2, #1
 80032fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003302:	4803      	ldr	r0, [pc, #12]	; (8003310 <sx1278_reset+0x38>)
 8003304:	f002 fa36 	bl	8005774 <HAL_GPIO_WritePin>
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010c00 	.word	0x40010c00
 8003310:	40010800 	.word	0x40010800

08003314 <sx1278_sleep>:

void sx1278_sleep(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	2001      	movs	r0, #1
 800331c:	f7ff ff9e 	bl	800325c <sx1278_write_reg>
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <sx1278_standby>:

void sx1278_standby(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8003328:	2181      	movs	r1, #129	; 0x81
 800332a:	2001      	movs	r0, #1
 800332c:	f7ff ff96 	bl	800325c <sx1278_write_reg>
}
 8003330:	bf00      	nop
 8003332:	bd80      	pop	{r7, pc}

08003334 <sx1278_rx_contiuous>:

void sx1278_rx_contiuous(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8003338:	2185      	movs	r1, #133	; 0x85
 800333a:	2001      	movs	r0, #1
 800333c:	f7ff ff8e 	bl	800325c <sx1278_write_reg>
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}

08003344 <sx1278_tx>:
{
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
}

void sx1278_tx(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8003348:	2183      	movs	r1, #131	; 0x83
 800334a:	2001      	movs	r0, #1
 800334c:	f7ff ff86 	bl	800325c <sx1278_write_reg>
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <sx1278_cad>:

void sx1278_cad(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	sx1278_set_irq(0x80);
 8003358:	2080      	movs	r0, #128	; 0x80
 800335a:	f000 f9f3 	bl	8003744 <sx1278_set_irq>
    sx1278_write_reg(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
 800335e:	2187      	movs	r1, #135	; 0x87
 8003360:	2001      	movs	r0, #1
 8003362:	f7ff ff7b 	bl	800325c <sx1278_write_reg>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <sx1278_set_tx_power>:

void sx1278_set_tx_power(uint8_t output_power)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
    if (output_power > 15)
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2b0f      	cmp	r3, #15
 800337a:	d906      	bls.n	800338a <sx1278_set_tx_power+0x1e>
    {
        LOG(TAG, "Invalid output power");
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <sx1278_set_tx_power+0x34>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4908      	ldr	r1, [pc, #32]	; (80033a4 <sx1278_set_tx_power+0x38>)
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe f94a 	bl	800161c <LOG>
        return;
 8003388:	e007      	b.n	800339a <sx1278_set_tx_power+0x2e>
    }
    // PA output pin: PA_BOOST pin
    sx1278_write_reg(REG_PA_CONFIG, PA_BOOST | output_power);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	2009      	movs	r0, #9
 8003396:	f7ff ff61 	bl	800325c <sx1278_write_reg>
}
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000018 	.word	0x20000018
 80033a4:	0800c518 	.word	0x0800c518

080033a8 <sx1278_set_LNA_gain>:

void sx1278_set_LNA_gain(uint8_t gain)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    if (gain > 6)
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d906      	bls.n	80033c6 <sx1278_set_LNA_gain+0x1e>
    {
        LOG(TAG, "Invalid gain");
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <sx1278_set_LNA_gain+0x5c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4912      	ldr	r1, [pc, #72]	; (8003408 <sx1278_set_LNA_gain+0x60>)
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f92c 	bl	800161c <LOG>
        return;
 80033c4:	e01a      	b.n	80033fc <sx1278_set_LNA_gain+0x54>
    }

    if (gain == 0)
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <sx1278_set_LNA_gain+0x2e>
    {
        sx1278_write_reg(REG_MODEM_CONFIG_3, 0x04);
 80033cc:	2104      	movs	r1, #4
 80033ce:	2026      	movs	r0, #38	; 0x26
 80033d0:	f7ff ff44 	bl	800325c <sx1278_write_reg>
 80033d4:	e012      	b.n	80033fc <sx1278_set_LNA_gain+0x54>
    }
    else
    {
        sx1278_write_reg(REG_MODEM_CONFIG_3, 0x00);
 80033d6:	2100      	movs	r1, #0
 80033d8:	2026      	movs	r0, #38	; 0x26
 80033da:	f7ff ff3f 	bl	800325c <sx1278_write_reg>
        sx1278_write_reg(REG_LNA, sx1278_read_reg(REG_LNA) | (gain << 5));
 80033de:	200c      	movs	r0, #12
 80033e0:	f7ff fefc 	bl	80031dc <sx1278_read_reg>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b25a      	sxtb	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	015b      	lsls	r3, r3, #5
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4619      	mov	r1, r3
 80033f6:	200c      	movs	r0, #12
 80033f8:	f7ff ff30 	bl	800325c <sx1278_write_reg>
    }
}
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000018 	.word	0x20000018
 8003408:	0800c530 	.word	0x0800c530

0800340c <sx1278_set_freq>:

void sx1278_set_freq(uint64_t freq)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	e9c7 0100 	strd	r0, r1, [r7]
    uint64_t frf = ((uint64_t)freq << 19) / 32000000;
 8003416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	04d9      	lsls	r1, r3, #19
 8003424:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8003428:	04d0      	lsls	r0, r2, #19
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <sx1278_set_freq+0x80>)
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	f7fd fe18 	bl	8001064 <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	e9c7 2302 	strd	r2, r3, [r7, #8]
    sx1278_write_reg(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800343c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	0c02      	lsrs	r2, r0, #16
 800344a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800344e:	0c0b      	lsrs	r3, r1, #16
 8003450:	b2d3      	uxtb	r3, r2
 8003452:	4619      	mov	r1, r3
 8003454:	2006      	movs	r0, #6
 8003456:	f7ff ff01 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_FRF_MID, (uint8_t)(frf >> 8));
 800345a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	0a02      	lsrs	r2, r0, #8
 8003468:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800346c:	0a0b      	lsrs	r3, r1, #8
 800346e:	b2d3      	uxtb	r3, r2
 8003470:	4619      	mov	r1, r3
 8003472:	2007      	movs	r0, #7
 8003474:	f7ff fef2 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8003478:	7a3b      	ldrb	r3, [r7, #8]
 800347a:	4619      	mov	r1, r3
 800347c:	2008      	movs	r0, #8
 800347e:	f7ff feed 	bl	800325c <sx1278_write_reg>
}
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	01e84800 	.word	0x01e84800

08003490 <sx1278_set_bandwidth>:

void sx1278_set_bandwidth(long band)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    int bw;
    if (band <= 7.8E3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f641 6278 	movw	r2, #7800	; 0x1e78
 800349e:	4293      	cmp	r3, r2
 80034a0:	dc02      	bgt.n	80034a8 <sx1278_set_bandwidth+0x18>
        bw = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e03f      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 10.4E3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	dc02      	bgt.n	80034b8 <sx1278_set_bandwidth+0x28>
        bw = 1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e037      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 15.6E3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80034be:	4293      	cmp	r3, r2
 80034c0:	dc02      	bgt.n	80034c8 <sx1278_set_bandwidth+0x38>
        bw = 2;
 80034c2:	2302      	movs	r3, #2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e02f      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 20.8E3)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f245 1240 	movw	r2, #20800	; 0x5140
 80034ce:	4293      	cmp	r3, r2
 80034d0:	dc02      	bgt.n	80034d8 <sx1278_set_bandwidth+0x48>
        bw = 3;
 80034d2:	2303      	movs	r3, #3
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e027      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 31.25E3)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f647 2212 	movw	r2, #31250	; 0x7a12
 80034de:	4293      	cmp	r3, r2
 80034e0:	dc02      	bgt.n	80034e8 <sx1278_set_bandwidth+0x58>
        bw = 4;
 80034e2:	2304      	movs	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e01f      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 41.7E3)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80034ee:	4293      	cmp	r3, r2
 80034f0:	dc02      	bgt.n	80034f8 <sx1278_set_bandwidth+0x68>
        bw = 5;
 80034f2:	2305      	movs	r3, #5
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e017      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 62.5E3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f24f 4224 	movw	r2, #62500	; 0xf424
 80034fe:	4293      	cmp	r3, r2
 8003500:	dc02      	bgt.n	8003508 <sx1278_set_bandwidth+0x78>
        bw = 6;
 8003502:	2306      	movs	r3, #6
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e00f      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 125E3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <sx1278_set_bandwidth+0xc4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	dc02      	bgt.n	8003516 <sx1278_set_bandwidth+0x86>
        bw = 7;
 8003510:	2307      	movs	r3, #7
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e008      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else if (band <= 250E3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <sx1278_set_bandwidth+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	dc02      	bgt.n	8003524 <sx1278_set_bandwidth+0x94>
        bw = 8;
 800351e:	2308      	movs	r3, #8
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e001      	b.n	8003528 <sx1278_set_bandwidth+0x98>
    else
        bw = 9;
 8003524:	2309      	movs	r3, #9
 8003526:	60fb      	str	r3, [r7, #12]
    sx1278_write_reg(REG_MODEM_CONFIG_1, (sx1278_read_reg(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8003528:	201d      	movs	r0, #29
 800352a:	f7ff fe57 	bl	80031dc <sx1278_read_reg>
 800352e:	4603      	mov	r3, r0
 8003530:	b25b      	sxtb	r3, r3
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	b25a      	sxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	b25b      	sxtb	r3, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	b25b      	sxtb	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	4619      	mov	r1, r3
 8003546:	201d      	movs	r0, #29
 8003548:	f7ff fe88 	bl	800325c <sx1278_write_reg>
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	0001e848 	.word	0x0001e848
 8003558:	0003d090 	.word	0x0003d090

0800355c <sx1278_set_sf>:

void sx1278_set_sf(uint8_t sf)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
    if (sf < 6 || sf > 12)
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d902      	bls.n	8003572 <sx1278_set_sf+0x16>
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d906      	bls.n	8003580 <sx1278_set_sf+0x24>
    {
        LOG(TAG, "Invalid spreading factor");
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <sx1278_set_sf+0x78>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4918      	ldr	r1, [pc, #96]	; (80035d8 <sx1278_set_sf+0x7c>)
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe f84f 	bl	800161c <LOG>
        return;
 800357e:	e025      	b.n	80035cc <sx1278_set_sf+0x70>
    }

    if (sf == 6)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d108      	bne.n	8003598 <sx1278_set_sf+0x3c>
    {
        sx1278_write_reg(REG_DETECTION_OPTIMIZE, 0xc5);
 8003586:	21c5      	movs	r1, #197	; 0xc5
 8003588:	2031      	movs	r0, #49	; 0x31
 800358a:	f7ff fe67 	bl	800325c <sx1278_write_reg>
        sx1278_write_reg(REG_DETECTION_THRESHOLD, 0x0c);
 800358e:	210c      	movs	r1, #12
 8003590:	2037      	movs	r0, #55	; 0x37
 8003592:	f7ff fe63 	bl	800325c <sx1278_write_reg>
 8003596:	e007      	b.n	80035a8 <sx1278_set_sf+0x4c>
    }
    else
    {
        sx1278_write_reg(REG_DETECTION_OPTIMIZE, 0xc3);
 8003598:	21c3      	movs	r1, #195	; 0xc3
 800359a:	2031      	movs	r0, #49	; 0x31
 800359c:	f7ff fe5e 	bl	800325c <sx1278_write_reg>
        sx1278_write_reg(REG_DETECTION_THRESHOLD, 0x0a);
 80035a0:	210a      	movs	r1, #10
 80035a2:	2037      	movs	r0, #55	; 0x37
 80035a4:	f7ff fe5a 	bl	800325c <sx1278_write_reg>
    }
    sx1278_write_reg(REG_MODEM_CONFIG_2, (sx1278_read_reg(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80035a8:	201e      	movs	r0, #30
 80035aa:	f7ff fe17 	bl	80031dc <sx1278_read_reg>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b25a      	sxtb	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	4619      	mov	r1, r3
 80035c6:	201e      	movs	r0, #30
 80035c8:	f7ff fe48 	bl	800325c <sx1278_write_reg>
}
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000018 	.word	0x20000018
 80035d8:	0800c540 	.word	0x0800c540

080035dc <sx1278_set_cr>:

void sx1278_set_cr(uint8_t cr)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
    if ((cr < 5U) || (cr > 8U))
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d902      	bls.n	80035f2 <sx1278_set_cr+0x16>
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d906      	bls.n	8003600 <sx1278_set_cr+0x24>
    {
        LOG(TAG, "Invalid coding rate");
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <sx1278_set_cr+0x54>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	490f      	ldr	r1, [pc, #60]	; (8003634 <sx1278_set_cr+0x58>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f80f 	bl	800161c <LOG>
        return;
 80035fe:	e014      	b.n	800362a <sx1278_set_cr+0x4e>
    }

    cr = cr - 4;
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	3b04      	subs	r3, #4
 8003604:	71fb      	strb	r3, [r7, #7]
    sx1278_write_reg(REG_MODEM_CONFIG_1, (sx1278_read_reg(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8003606:	201d      	movs	r0, #29
 8003608:	f7ff fde8 	bl	80031dc <sx1278_read_reg>
 800360c:	4603      	mov	r3, r0
 800360e:	b25b      	sxtb	r3, r3
 8003610:	f023 030e 	bic.w	r3, r3, #14
 8003614:	b25a      	sxtb	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	b25b      	sxtb	r3, r3
 800361c:	4313      	orrs	r3, r2
 800361e:	b25b      	sxtb	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	201d      	movs	r0, #29
 8003626:	f7ff fe19 	bl	800325c <sx1278_write_reg>
}
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000018 	.word	0x20000018
 8003634:	0800c55c 	.word	0x0800c55c

08003638 <sx1278_set_header>:

void sx1278_set_header(bool en, uint32_t size)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	71fb      	strb	r3, [r7, #7]
    if (en)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <sx1278_set_header+0x2a>
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) & 0xfe);
 800364a:	201d      	movs	r0, #29
 800364c:	f7ff fdc6 	bl	80031dc <sx1278_read_reg>
 8003650:	4603      	mov	r3, r0
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	201d      	movs	r0, #29
 800365c:	f7ff fdfe 	bl	800325c <sx1278_write_reg>
    else
    {
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) | 0x01);
        sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
    }
}
 8003660:	e010      	b.n	8003684 <sx1278_set_header+0x4c>
        sx1278_write_reg(REG_MODEM_CONFIG_1, sx1278_read_reg(REG_MODEM_CONFIG_1) | 0x01);
 8003662:	201d      	movs	r0, #29
 8003664:	f7ff fdba 	bl	80031dc <sx1278_read_reg>
 8003668:	4603      	mov	r3, r0
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	201d      	movs	r0, #29
 8003674:	f7ff fdf2 	bl	800325c <sx1278_write_reg>
        sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	4619      	mov	r1, r3
 800367e:	2022      	movs	r0, #34	; 0x22
 8003680:	f7ff fdec 	bl	800325c <sx1278_write_reg>
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <sx1278_set_crc>:

void sx1278_set_crc(bool en)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
    if (en)
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <sx1278_set_crc+0x28>
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) | 0x04);
 800369c:	201e      	movs	r0, #30
 800369e:	f7ff fd9d 	bl	80031dc <sx1278_read_reg>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	201e      	movs	r0, #30
 80036ae:	f7ff fdd5 	bl	800325c <sx1278_write_reg>
    else
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) & 0xfb);
}
 80036b2:	e00a      	b.n	80036ca <sx1278_set_crc+0x3e>
        sx1278_write_reg(REG_MODEM_CONFIG_2, sx1278_read_reg(REG_MODEM_CONFIG_2) & 0xfb);
 80036b4:	201e      	movs	r0, #30
 80036b6:	f7ff fd91 	bl	80031dc <sx1278_read_reg>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4619      	mov	r1, r3
 80036c4:	201e      	movs	r0, #30
 80036c6:	f7ff fdc9 	bl	800325c <sx1278_write_reg>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <sx1278_set_preamble>:

void sx1278_set_preamble(int len)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
    sx1278_write_reg(REG_PREAMBLE_MSB, (uint8_t)(len >> 8));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	121b      	asrs	r3, r3, #8
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	2020      	movs	r0, #32
 80036e4:	f7ff fdba 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_PREAMBLE_LSB, (uint8_t)(len >> 0));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	2021      	movs	r0, #33	; 0x21
 80036f0:	f7ff fdb4 	bl	800325c <sx1278_write_reg>
}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <sx1278_get_rssi>:

int sx1278_get_rssi(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
    return (sx1278_read_reg(REG_PKT_RSSI_VALUE) - 164);
 8003700:	201a      	movs	r0, #26
 8003702:	f7ff fd6b 	bl	80031dc <sx1278_read_reg>
 8003706:	4603      	mov	r3, r0
 8003708:	3ba4      	subs	r3, #164	; 0xa4
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <sx1278_get_snr>:

float sx1278_get_snr(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
    return ((int8_t)sx1278_read_reg(REG_PKT_SNR_VALUE) * 0.25);
 8003714:	2019      	movs	r0, #25
 8003716:	f7ff fd61 	bl	80031dc <sx1278_read_reg>
 800371a:	4603      	mov	r3, r0
 800371c:	b25b      	sxtb	r3, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f7fc fe70 	bl	8000404 <__aeabi_i2d>
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <sx1278_get_snr+0x30>)
 800372a:	f7fc fed5 	bl	80004d8 <__aeabi_dmul>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	f7fd f9c7 	bl	8000ac8 <__aeabi_d2f>
 800373a:	4603      	mov	r3, r0
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	3fd00000 	.word	0x3fd00000

08003744 <sx1278_set_irq>:

void sx1278_set_irq(uint8_t val)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
    sx1278_write_reg(REG_DIO_MAPPING_1, val);
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	4619      	mov	r1, r3
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f7ff fd82 	bl	800325c <sx1278_write_reg>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <sx1278_init>:

void sx1278_init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	sx1278_reset();
 8003764:	f7ff fdb8 	bl	80032d8 <sx1278_reset>
	ver = sx1278_read_reg(REG_VERSION);
 8003768:	2042      	movs	r0, #66	; 0x42
 800376a:	f7ff fd37 	bl	80031dc <sx1278_read_reg>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <sx1278_init+0x88>)
 8003774:	701a      	strb	r2, [r3, #0]
//    logPC("Version: 0x%02X\n", ver);
	sx1278_sleep();
 8003776:	f7ff fdcd 	bl	8003314 <sx1278_sleep>
    sx1278_write_reg(REG_FIFO_RX_BASE_ADDR, 0x00);
 800377a:	2100      	movs	r1, #0
 800377c:	200f      	movs	r0, #15
 800377e:	f7ff fd6d 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_FIFO_TX_BASE_ADDR, 0x00);
 8003782:	2100      	movs	r1, #0
 8003784:	200e      	movs	r0, #14
 8003786:	f7ff fd69 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_DIO_MAPPING_1, 0x08);
 800378a:	2108      	movs	r1, #8
 800378c:	2040      	movs	r0, #64	; 0x40
 800378e:	f7ff fd65 	bl	800325c <sx1278_write_reg>
    sx1278_set_LNA_gain(0);
 8003792:	2000      	movs	r0, #0
 8003794:	f7ff fe08 	bl	80033a8 <sx1278_set_LNA_gain>
    sx1278_set_tx_power(13);        // Pout = 13 dBm
 8003798:	200d      	movs	r0, #13
 800379a:	f7ff fde7 	bl	800336c <sx1278_set_tx_power>
    sx1278_set_freq(433000000);
 800379e:	a110      	add	r1, pc, #64	; (adr r1, 80037e0 <sx1278_init+0x80>)
 80037a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037a4:	f7ff fe32 	bl	800340c <sx1278_set_freq>
    sx1278_set_bandwidth(250000);   // Bandwidth: 250 kHz
 80037a8:	4810      	ldr	r0, [pc, #64]	; (80037ec <sx1278_init+0x8c>)
 80037aa:	f7ff fe71 	bl	8003490 <sx1278_set_bandwidth>
    sx1278_set_sf(10U);
 80037ae:	200a      	movs	r0, #10
 80037b0:	f7ff fed4 	bl	800355c <sx1278_set_sf>
    sx1278_set_cr(5U);
 80037b4:	2005      	movs	r0, #5
 80037b6:	f7ff ff11 	bl	80035dc <sx1278_set_cr>
    sx1278_set_preamble(12);
 80037ba:	200c      	movs	r0, #12
 80037bc:	f7ff ff89 	bl	80036d2 <sx1278_set_preamble>
    sx1278_set_header(true, 0);
 80037c0:	2100      	movs	r1, #0
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7ff ff38 	bl	8003638 <sx1278_set_header>
    sx1278_set_crc(true);
 80037c8:	2001      	movs	r0, #1
 80037ca:	f7ff ff5f 	bl	800368c <sx1278_set_crc>
    sx1278_set_irq(0x00);
 80037ce:	2000      	movs	r0, #0
 80037d0:	f7ff ffb8 	bl	8003744 <sx1278_set_irq>
    sx1278_standby();
 80037d4:	f7ff fda6 	bl	8003324 <sx1278_standby>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	f3af 8000 	nop.w
 80037e0:	19cf0e40 	.word	0x19cf0e40
 80037e4:	00000000 	.word	0x00000000
 80037e8:	200005cc 	.word	0x200005cc
 80037ec:	0003d090 	.word	0x0003d090

080037f0 <sx1278_send_data>:

void sx1278_send_data(uint8_t *data_send, int size)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    sx1278_standby();
 80037fa:	f7ff fd93 	bl	8003324 <sx1278_standby>
    sx1278_write_reg(REG_FIFO_ADDR_PTR, 0);
 80037fe:	2100      	movs	r1, #0
 8003800:	200d      	movs	r0, #13
 8003802:	f7ff fd2b 	bl	800325c <sx1278_write_reg>
    sx1278_write_reg(REG_PAYLOAD_LENGTH, 0);
 8003806:	2100      	movs	r1, #0
 8003808:	2022      	movs	r0, #34	; 0x22
 800380a:	f7ff fd27 	bl	800325c <sx1278_write_reg>
    for (int index = 0; index < size; index++)
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e00a      	b.n	800382a <sx1278_send_data+0x3a>
    {
        sx1278_write_reg(REG_FIFO, data_send[index]);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	2000      	movs	r0, #0
 8003820:	f7ff fd1c 	bl	800325c <sx1278_write_reg>
    for (int index = 0; index < size; index++)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	dbf0      	blt.n	8003814 <sx1278_send_data+0x24>
    }
    sx1278_write_reg(REG_PAYLOAD_LENGTH, size);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	2022      	movs	r0, #34	; 0x22
 800383a:	f7ff fd0f 	bl	800325c <sx1278_write_reg>
    // Start transmission and wait for conclusion
    sx1278_tx();
 800383e:	f7ff fd81 	bl	8003344 <sx1278_tx>
    while (!(sx1278_read_reg(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 8003842:	e002      	b.n	800384a <sx1278_send_data+0x5a>
    {
        HAL_Delay(10);
 8003844:	200a      	movs	r0, #10
 8003846:	f000 fb45 	bl	8003ed4 <HAL_Delay>
    while (!(sx1278_read_reg(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 800384a:	2012      	movs	r0, #18
 800384c:	f7ff fcc6 	bl	80031dc <sx1278_read_reg>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f4      	beq.n	8003844 <sx1278_send_data+0x54>
    }
    int irq = sx1278_read_reg(REG_IRQ_FLAGS);
 800385a:	2012      	movs	r0, #18
 800385c:	f7ff fcbe 	bl	80031dc <sx1278_read_reg>
 8003860:	4603      	mov	r3, r0
 8003862:	60bb      	str	r3, [r7, #8]
    sx1278_write_reg(REG_IRQ_FLAGS, irq);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	2012      	movs	r0, #18
 800386c:	f7ff fcf6 	bl	800325c <sx1278_write_reg>
    
    sx1278_sleep();
 8003870:	f7ff fd50 	bl	8003314 <sx1278_sleep>
    //sx1278_standby();
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <sx1278_start_recv_data>:
/**
 * @brief put module into downlink mode, ready to recieve data
 * 
 */
void sx1278_start_recv_data(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    sx1278_standby();
 8003880:	f7ff fd50 	bl	8003324 <sx1278_standby>
	sx1278_set_irq(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7ff ff5d 	bl	8003744 <sx1278_set_irq>
    sx1278_write_reg(REG_IRQ_FLAGS, sx1278_read_reg(REG_IRQ_FLAGS));
 800388a:	2012      	movs	r0, #18
 800388c:	f7ff fca6 	bl	80031dc <sx1278_read_reg>
 8003890:	4603      	mov	r3, r0
 8003892:	4619      	mov	r1, r3
 8003894:	2012      	movs	r0, #18
 8003896:	f7ff fce1 	bl	800325c <sx1278_write_reg>
    sx1278_rx_contiuous();
 800389a:	f7ff fd4b 	bl	8003334 <sx1278_rx_contiuous>
    // sx1278_rx_single();
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <sx1278_recv_data>:
 * @param snr Signal-to-Noise Ratio
 * @param node place to store data
 * @return sx1278_err_t 
 */
sx1278_err_t sx1278_recv_data(uint8_t *data_recv, uint32_t *len, int *rssi, float *snr, bool isStayinRX)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
    memset((char *)data_recv, '\0', strlen((char *)data_recv));
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7fc fc4c 	bl	8000150 <strlen>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	2100      	movs	r1, #0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f005 fe2a 	bl	8009518 <memset>
    int irq = sx1278_read_reg(REG_IRQ_FLAGS);
 80038c4:	2012      	movs	r0, #18
 80038c6:	f7ff fc89 	bl	80031dc <sx1278_read_reg>
 80038ca:	4603      	mov	r3, r0
 80038cc:	613b      	str	r3, [r7, #16]
    sx1278_write_reg(REG_IRQ_FLAGS, irq);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4619      	mov	r1, r3
 80038d4:	2012      	movs	r0, #18
 80038d6:	f7ff fcc1 	bl	800325c <sx1278_write_reg>

    if (!(irq & IRQ_RX_DONE_MASK))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <sx1278_recv_data+0x50>
    {
        LOG(TAG, "Invalid RxDone Interrupt");
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <sx1278_recv_data+0xf8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	492d      	ldr	r1, [pc, #180]	; (80039a0 <sx1278_recv_data+0xfc>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fe96 	bl	800161c <LOG>
        return SX1278_INVALID_RX_DONE;
 80038f0:	2302      	movs	r3, #2
 80038f2:	e04f      	b.n	8003994 <sx1278_recv_data+0xf0>
    }

    if (!(irq & IRQ_VALID_HEADER_MASK))
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <sx1278_recv_data+0x6a>
    {
        LOG(TAG, "Invalid Header Interrupt");
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <sx1278_recv_data+0xf8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4928      	ldr	r1, [pc, #160]	; (80039a4 <sx1278_recv_data+0x100>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fe89 	bl	800161c <LOG>
        return SX1278_INVALID_HEADER;
 800390a:	2304      	movs	r3, #4
 800390c:	e042      	b.n	8003994 <sx1278_recv_data+0xf0>
    }

    if (irq & IRQ_PAYLOAD_CRC_ERROR_MASK)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <sx1278_recv_data+0x84>
    {
        LOG(TAG, "Payload Crc Error Interrupt");
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <sx1278_recv_data+0xf8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4922      	ldr	r1, [pc, #136]	; (80039a8 <sx1278_recv_data+0x104>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fe7c 	bl	800161c <LOG>
        return SX1278_PAYLOAD_CRC_ERROR;
 8003924:	2303      	movs	r3, #3
 8003926:	e035      	b.n	8003994 <sx1278_recv_data+0xf0>
    }

    *len = sx1278_read_reg(REG_RX_NB_BYTES);
 8003928:	2013      	movs	r0, #19
 800392a:	f7ff fc57 	bl	80031dc <sx1278_read_reg>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	601a      	str	r2, [r3, #0]
    *rssi = sx1278_get_rssi();
 8003936:	f7ff fee1 	bl	80036fc <sx1278_get_rssi>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
    *snr = sx1278_get_snr();
 8003940:	f7ff fee6 	bl	8003710 <sx1278_get_snr>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	601a      	str	r2, [r3, #0]
    sx1278_write_reg(REG_FIFO_ADDR_PTR, sx1278_read_reg(REG_FIFO_RX_CURRENT_ADDR));
 800394a:	2010      	movs	r0, #16
 800394c:	f7ff fc46 	bl	80031dc <sx1278_read_reg>
 8003950:	4603      	mov	r3, r0
 8003952:	4619      	mov	r1, r3
 8003954:	200d      	movs	r0, #13
 8003956:	f7ff fc81 	bl	800325c <sx1278_write_reg>
    for (int index = 0; index < *len; index++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e00a      	b.n	8003976 <sx1278_recv_data+0xd2>
    {
        data_recv[index] = sx1278_read_reg(REG_FIFO);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	18d4      	adds	r4, r2, r3
 8003966:	2000      	movs	r0, #0
 8003968:	f7ff fc38 	bl	80031dc <sx1278_read_reg>
 800396c:	4603      	mov	r3, r0
 800396e:	7023      	strb	r3, [r4, #0]
    for (int index = 0; index < *len; index++)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	d8ef      	bhi.n	8003960 <sx1278_recv_data+0xbc>
    }
    if (isStayinRX == false)    sx1278_standby();
 8003980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <sx1278_recv_data+0xee>
 800398e:	f7ff fcc9 	bl	8003324 <sx1278_standby>
    return SX1278_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	20000018 	.word	0x20000018
 80039a0:	0800c570 	.word	0x0800c570
 80039a4:	0800c58c 	.word	0x0800c58c
 80039a8:	0800c5a8 	.word	0x0800c5a8

080039ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return 1;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <_kill>:

int _kill(int pid, int sig)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039c4:	f005 fd70 	bl	80094a8 <__errno>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2216      	movs	r2, #22
 80039cc:	601a      	str	r2, [r3, #0]
  return -1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_exit>:

void _exit (int status)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039e2:	f04f 31ff 	mov.w	r1, #4294967295
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ffe7 	bl	80039ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80039ec:	e7fe      	b.n	80039ec <_exit+0x12>

080039ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e00a      	b.n	8003a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a00:	f3af 8000 	nop.w
 8003a04:	4601      	mov	r1, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	60ba      	str	r2, [r7, #8]
 8003a0c:	b2ca      	uxtb	r2, r1
 8003a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	3301      	adds	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	dbf0      	blt.n	8003a00 <_read+0x12>
  }

  return len;
 8003a1e:	687b      	ldr	r3, [r7, #4]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e009      	b.n	8003a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	60ba      	str	r2, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbf1      	blt.n	8003a3a <_write+0x12>
  }
  return len;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_close>:

int _close(int file)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a86:	605a      	str	r2, [r3, #4]
  return 0;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <_isatty>:

int _isatty(int file)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <_sbrk+0x5c>)
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <_sbrk+0x60>)
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ad4:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <_sbrk+0x64>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <_sbrk+0x64>)
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <_sbrk+0x68>)
 8003ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <_sbrk+0x64>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d207      	bcs.n	8003b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003af0:	f005 fcda 	bl	80094a8 <__errno>
 8003af4:	4603      	mov	r3, r0
 8003af6:	220c      	movs	r2, #12
 8003af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	e009      	b.n	8003b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <_sbrk+0x64>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <_sbrk+0x64>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <_sbrk+0x64>)
 8003b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20005000 	.word	0x20005000
 8003b20:	00000400 	.word	0x00000400
 8003b24:	200005d0 	.word	0x200005d0
 8003b28:	200006e0 	.word	0x200006e0

08003b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <MX_USART1_UART_Init+0x50>)
 8003b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b44:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8003b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4a:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b5e:	220c      	movs	r2, #12
 8003b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b6e:	4805      	ldr	r0, [pc, #20]	; (8003b84 <MX_USART1_UART_Init+0x4c>)
 8003b70:	f004 fdec 	bl	800874c <HAL_UART_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b7a:	f7ff f94f 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200005d4 	.word	0x200005d4
 8003b88:	40013800 	.word	0x40013800

08003b8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <MX_USART2_UART_Init+0x50>)
 8003b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bc2:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <MX_USART2_UART_Init+0x4c>)
 8003bc4:	f004 fdc2 	bl	800874c <HAL_UART_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003bce:	f7ff f925 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000061c 	.word	0x2000061c
 8003bdc:	40004400 	.word	0x40004400

08003be0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <MX_USART3_UART_Init+0x50>)
 8003be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003c06:	220c      	movs	r2, #12
 8003c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c16:	4805      	ldr	r0, [pc, #20]	; (8003c2c <MX_USART3_UART_Init+0x4c>)
 8003c18:	f004 fd98 	bl	800874c <HAL_UART_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003c22:	f7ff f8fb 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000664 	.word	0x20000664
 8003c30:	40004800 	.word	0x40004800

08003c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	; 0x30
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 0320 	add.w	r3, r7, #32
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_UART_MspInit+0x178>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d13a      	bne.n	8003cca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c54:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4a55      	ldr	r2, [pc, #340]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5e:	6193      	str	r3, [r2, #24]
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	4a4f      	ldr	r2, [pc, #316]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6193      	str	r3, [r2, #24]
 8003c78:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c92:	f107 0320 	add.w	r3, r7, #32
 8003c96:	4619      	mov	r1, r3
 8003c98:	4846      	ldr	r0, [pc, #280]	; (8003db4 <HAL_UART_MspInit+0x180>)
 8003c9a:	f001 fb2b 	bl	80052f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f107 0320 	add.w	r3, r7, #32
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4840      	ldr	r0, [pc, #256]	; (8003db4 <HAL_UART_MspInit+0x180>)
 8003cb4:	f001 fb1e 	bl	80052f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2025      	movs	r0, #37	; 0x25
 8003cbe:	f000 fe32 	bl	8004926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cc2:	2025      	movs	r0, #37	; 0x25
 8003cc4:	f000 fe4b 	bl	800495e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003cc8:	e06c      	b.n	8003da4 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3a      	ldr	r2, [pc, #232]	; (8003db8 <HAL_UART_MspInit+0x184>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d130      	bne.n	8003d36 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd4:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a35      	ldr	r2, [pc, #212]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cec:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6193      	str	r3, [r2, #24]
 8003cf8:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d04:	2304      	movs	r3, #4
 8003d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d10:	f107 0320 	add.w	r3, r7, #32
 8003d14:	4619      	mov	r1, r3
 8003d16:	4827      	ldr	r0, [pc, #156]	; (8003db4 <HAL_UART_MspInit+0x180>)
 8003d18:	f001 faec 	bl	80052f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d28:	f107 0320 	add.w	r3, r7, #32
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4821      	ldr	r0, [pc, #132]	; (8003db4 <HAL_UART_MspInit+0x180>)
 8003d30:	f001 fae0 	bl	80052f4 <HAL_GPIO_Init>
}
 8003d34:	e036      	b.n	8003da4 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART3)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <HAL_UART_MspInit+0x188>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d131      	bne.n	8003da4 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d40:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4a:	61d3      	str	r3, [r2, #28]
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d5e:	f043 0308 	orr.w	r3, r3, #8
 8003d62:	6193      	str	r3, [r2, #24]
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_UART_MspInit+0x17c>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7e:	f107 0320 	add.w	r3, r7, #32
 8003d82:	4619      	mov	r1, r3
 8003d84:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <HAL_UART_MspInit+0x18c>)
 8003d86:	f001 fab5 	bl	80052f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d90:	2300      	movs	r3, #0
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d98:	f107 0320 	add.w	r3, r7, #32
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <HAL_UART_MspInit+0x18c>)
 8003da0:	f001 faa8 	bl	80052f4 <HAL_GPIO_Init>
}
 8003da4:	bf00      	nop
 8003da6:	3730      	adds	r7, #48	; 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010800 	.word	0x40010800
 8003db8:	40004400 	.word	0x40004400
 8003dbc:	40004800 	.word	0x40004800
 8003dc0:	40010c00 	.word	0x40010c00

08003dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003dc4:	f7ff feb2 	bl	8003b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dc8:	480b      	ldr	r0, [pc, #44]	; (8003df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003dca:	490c      	ldr	r1, [pc, #48]	; (8003dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dd0:	e002      	b.n	8003dd8 <LoopCopyDataInit>

08003dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dd6:	3304      	adds	r3, #4

08003dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ddc:	d3f9      	bcc.n	8003dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dde:	4a09      	ldr	r2, [pc, #36]	; (8003e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003de0:	4c09      	ldr	r4, [pc, #36]	; (8003e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003de4:	e001      	b.n	8003dea <LoopFillZerobss>

08003de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003de8:	3204      	adds	r2, #4

08003dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dec:	d3fb      	bcc.n	8003de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dee:	f005 fb61 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003df2:	f7fd fe67 	bl	8001ac4 <main>
  bx lr
 8003df6:	4770      	bx	lr
  ldr r0, =_sdata
 8003df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dfc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003e00:	0800cc0c 	.word	0x0800cc0c
  ldr r2, =_sbss
 8003e04:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003e08:	200006e0 	.word	0x200006e0

08003e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e0c:	e7fe      	b.n	8003e0c <ADC1_2_IRQHandler>
	...

08003e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_Init+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <HAL_Init+0x28>)
 8003e1a:	f043 0310 	orr.w	r3, r3, #16
 8003e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e20:	2003      	movs	r0, #3
 8003e22:	f000 fd75 	bl	8004910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e26:	200f      	movs	r0, #15
 8003e28:	f000 f808 	bl	8003e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e2c:	f7ff f956 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40022000 	.word	0x40022000

08003e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_InitTick+0x54>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <HAL_InitTick+0x58>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fd91 	bl	8004982 <HAL_SYSTICK_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e00e      	b.n	8003e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d80a      	bhi.n	8003e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e70:	2200      	movs	r2, #0
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	f04f 30ff 	mov.w	r0, #4294967295
 8003e78:	f000 fd55 	bl	8004926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e7c:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <HAL_InitTick+0x5c>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2000001c 	.word	0x2000001c
 8003e94:	20000024 	.word	0x20000024
 8003e98:	20000020 	.word	0x20000020

08003e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_IncTick+0x1c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_IncTick+0x20>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <HAL_IncTick+0x20>)
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000024 	.word	0x20000024
 8003ebc:	200006ac 	.word	0x200006ac

08003ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <HAL_GetTick+0x10>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	200006ac 	.word	0x200006ac

08003ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d005      	beq.n	8003efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_Delay+0x44>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003efa:	bf00      	nop
 8003efc:	f7ff ffe0 	bl	8003ec0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f7      	bhi.n	8003efc <HAL_Delay+0x28>
  {
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000024 	.word	0x20000024

08003f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e0be      	b.n	80040bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fa54 	bl	8001408 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fb4b 	bl	80045fc <ADC_ConversionStop_Disable>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8099 	bne.w	80040aa <HAL_ADC_Init+0x18e>
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8095 	bne.w	80040aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f88:	f023 0302 	bic.w	r3, r3, #2
 8003f8c:	f043 0202 	orr.w	r2, r3, #2
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7b1b      	ldrb	r3, [r3, #12]
 8003fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb4:	d003      	beq.n	8003fbe <HAL_ADC_Init+0xa2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_ADC_Init+0xa8>
 8003fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fc2:	e000      	b.n	8003fc6 <HAL_ADC_Init+0xaa>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7d1b      	ldrb	r3, [r3, #20]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d119      	bne.n	8004008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7b1b      	ldrb	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	035a      	lsls	r2, r3, #13
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e00b      	b.n	8004008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_ADC_Init+0x1a8>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	430b      	orrs	r3, r1
 800402e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d003      	beq.n	8004042 <HAL_ADC_Init+0x126>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d104      	bne.n	800404c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	3b01      	subs	r3, #1
 8004048:	051b      	lsls	r3, r3, #20
 800404a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	430a      	orrs	r2, r1
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <HAL_ADC_Init+0x1ac>)
 8004068:	4013      	ands	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d10b      	bne.n	8004088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004086:	e018      	b.n	80040ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f023 0312 	bic.w	r3, r3, #18
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040a8:	e007      	b.n	80040ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f043 0210 	orr.w	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	ffe1f7fd 	.word	0xffe1f7fd
 80040c8:	ff1f0efe 	.word	0xff1f0efe

080040cc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a64      	ldr	r2, [pc, #400]	; (8004274 <HAL_ADC_Start_DMA+0x1a8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_ADC_Start_DMA+0x24>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a63      	ldr	r2, [pc, #396]	; (8004278 <HAL_ADC_Start_DMA+0x1ac>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d106      	bne.n	80040fe <HAL_ADC_Start_DMA+0x32>
 80040f0:	4b60      	ldr	r3, [pc, #384]	; (8004274 <HAL_ADC_Start_DMA+0x1a8>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 80b3 	bne.w	8004264 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_ADC_Start_DMA+0x40>
 8004108:	2302      	movs	r3, #2
 800410a:	e0ae      	b.n	800426a <HAL_ADC_Start_DMA+0x19e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa17 	bl	8004548 <ADC_Enable>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 809a 	bne.w	800425a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4e      	ldr	r2, [pc, #312]	; (8004278 <HAL_ADC_Start_DMA+0x1ac>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d105      	bne.n	8004150 <HAL_ADC_Start_DMA+0x84>
 8004144:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <HAL_ADC_Start_DMA+0x1a8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d115      	bne.n	800417c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d026      	beq.n	80041b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800417a:	e01d      	b.n	80041b8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_ADC_Start_DMA+0x1a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_ADC_Start_DMA+0xd0>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a38      	ldr	r2, [pc, #224]	; (8004278 <HAL_ADC_Start_DMA+0x1ac>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d10d      	bne.n	80041b8 <HAL_ADC_Start_DMA+0xec>
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_ADC_Start_DMA+0x1a8>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d007      	beq.n	80041b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f023 0206 	bic.w	r2, r3, #6
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80041d0:	e002      	b.n	80041d8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4a25      	ldr	r2, [pc, #148]	; (800427c <HAL_ADC_Start_DMA+0x1b0>)
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_ADC_Start_DMA+0x1b4>)
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <HAL_ADC_Start_DMA+0x1b8>)
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004210:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a18      	ldr	r0, [r3, #32]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	334c      	adds	r3, #76	; 0x4c
 800421c:	4619      	mov	r1, r3
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f000 fc15 	bl	8004a50 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004230:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004234:	d108      	bne.n	8004248 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004244:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004246:	e00f      	b.n	8004268 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004256:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004258:	e006      	b.n	8004268 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004262:	e001      	b.n	8004268 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40012400 	.word	0x40012400
 8004278:	40012800 	.word	0x40012800
 800427c:	0800467f 	.word	0x0800467f
 8004280:	080046fb 	.word	0x080046fb
 8004284:	08004717 	.word	0x08004717

08004288 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Stop_DMA+0x1a>
 800429e:	2302      	movs	r3, #2
 80042a0:	e03a      	b.n	8004318 <HAL_ADC_Stop_DMA+0x90>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9a6 	bl	80045fc <ADC_ConversionStop_Disable>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d129      	bne.n	800430e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d11a      	bne.n	800430e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fc17 	bl	8004b10 <HAL_DMA_Abort>
 80042e2:	4603      	mov	r3, r0
 80042e4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004300:	e005      	b.n	800430e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
	...

08004358 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x20>
 8004374:	2302      	movs	r3, #2
 8004376:	e0dc      	b.n	8004532 <HAL_ADC_ConfigChannel+0x1da>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d81c      	bhi.n	80043c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	3b05      	subs	r3, #5
 800439a:	221f      	movs	r2, #31
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	4019      	ands	r1, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b05      	subs	r3, #5
 80043b4:	fa00 f203 	lsl.w	r2, r0, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	635a      	str	r2, [r3, #52]	; 0x34
 80043c0:	e03c      	b.n	800443c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	d81c      	bhi.n	8004404 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3b23      	subs	r3, #35	; 0x23
 80043dc:	221f      	movs	r2, #31
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43db      	mvns	r3, r3
 80043e4:	4019      	ands	r1, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	3b23      	subs	r3, #35	; 0x23
 80043f6:	fa00 f203 	lsl.w	r2, r0, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
 8004402:	e01b      	b.n	800443c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	3b41      	subs	r3, #65	; 0x41
 8004416:	221f      	movs	r2, #31
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	4019      	ands	r1, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b41      	subs	r3, #65	; 0x41
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b09      	cmp	r3, #9
 8004442:	d91c      	bls.n	800447e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68d9      	ldr	r1, [r3, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	3b1e      	subs	r3, #30
 8004456:	2207      	movs	r2, #7
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	4019      	ands	r1, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6898      	ldr	r0, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	3b1e      	subs	r3, #30
 8004470:	fa00 f203 	lsl.w	r2, r0, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e019      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	2207      	movs	r2, #7
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	4019      	ands	r1, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6898      	ldr	r0, [r3, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	fa00 f203 	lsl.w	r2, r0, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d003      	beq.n	80044c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80044be:	2b11      	cmp	r3, #17
 80044c0:	d132      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_ADC_ConfigChannel+0x1e4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d125      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d126      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d11a      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044f2:	4b13      	ldr	r3, [pc, #76]	; (8004540 <HAL_ADC_ConfigChannel+0x1e8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_ADC_ConfigChannel+0x1ec>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	0c9a      	lsrs	r2, r3, #18
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004508:	e002      	b.n	8004510 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f9      	bne.n	800450a <HAL_ADC_ConfigChannel+0x1b2>
 8004516:	e007      	b.n	8004528 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr
 800453c:	40012400 	.word	0x40012400
 8004540:	2000001c 	.word	0x2000001c
 8004544:	431bde83 	.word	0x431bde83

08004548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d040      	beq.n	80045e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <ADC_Enable+0xac>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <ADC_Enable+0xb0>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	0c9b      	lsrs	r3, r3, #18
 8004582:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004584:	e002      	b.n	800458c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f9      	bne.n	8004586 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004592:	f7ff fc95 	bl	8003ec0 <HAL_GetTick>
 8004596:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004598:	e01f      	b.n	80045da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800459a:	f7ff fc91 	bl	8003ec0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d918      	bls.n	80045da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d011      	beq.n	80045da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f043 0210 	orr.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e007      	b.n	80045ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d1d8      	bne.n	800459a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	2000001c 	.word	0x2000001c
 80045f8:	431bde83 	.word	0x431bde83

080045fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d12e      	bne.n	8004674 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004626:	f7ff fc4b 	bl	8003ec0 <HAL_GetTick>
 800462a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800462c:	e01b      	b.n	8004666 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800462e:	f7ff fc47 	bl	8003ec0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d914      	bls.n	8004666 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b01      	cmp	r3, #1
 8004648:	d10d      	bne.n	8004666 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	f043 0210 	orr.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f043 0201 	orr.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e007      	b.n	8004676 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d0dc      	beq.n	800462e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004694:	2b00      	cmp	r3, #0
 8004696:	d127      	bne.n	80046e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80046ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80046b2:	d115      	bne.n	80046e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d111      	bne.n	80046e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fe1d 	bl	8004320 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80046e6:	e004      	b.n	80046f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fe12 	bl	8004332 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fe01 	bl	8004344 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477e:	4a04      	ldr	r2, [pc, #16]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	60d3      	str	r3, [r2, #12]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4906      	ldr	r1, [pc, #24]	; (80047e4 <__NVIC_EnableIRQ+0x34>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	e000e100 	.word	0xe000e100

080047e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db0a      	blt.n	8004812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	490c      	ldr	r1, [pc, #48]	; (8004834 <__NVIC_SetPriority+0x4c>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	0112      	lsls	r2, r2, #4
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	440b      	add	r3, r1
 800480c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004810:	e00a      	b.n	8004828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	4908      	ldr	r1, [pc, #32]	; (8004838 <__NVIC_SetPriority+0x50>)
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	3b04      	subs	r3, #4
 8004820:	0112      	lsls	r2, r2, #4
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	440b      	add	r3, r1
 8004826:	761a      	strb	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	e000e100 	.word	0xe000e100
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f1c3 0307 	rsb	r3, r3, #7
 8004856:	2b04      	cmp	r3, #4
 8004858:	bf28      	it	cs
 800485a:	2304      	movcs	r3, #4
 800485c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3304      	adds	r3, #4
 8004862:	2b06      	cmp	r3, #6
 8004864:	d902      	bls.n	800486c <NVIC_EncodePriority+0x30>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3b03      	subs	r3, #3
 800486a:	e000      	b.n	800486e <NVIC_EncodePriority+0x32>
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	f04f 32ff 	mov.w	r2, #4294967295
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43da      	mvns	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	401a      	ands	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004884:	f04f 31ff 	mov.w	r1, #4294967295
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	43d9      	mvns	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	4313      	orrs	r3, r2
         );
}
 8004896:	4618      	mov	r0, r3
 8004898:	3724      	adds	r7, #36	; 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048a4:	f3bf 8f4f 	dsb	sy
}
 80048a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <__NVIC_SystemReset+0x24>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80048b2:	4904      	ldr	r1, [pc, #16]	; (80048c4 <__NVIC_SystemReset+0x24>)
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <__NVIC_SystemReset+0x28>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80048ba:	f3bf 8f4f 	dsb	sy
}
 80048be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <__NVIC_SystemReset+0x20>
 80048c4:	e000ed00 	.word	0xe000ed00
 80048c8:	05fa0004 	.word	0x05fa0004

080048cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048dc:	d301      	bcc.n	80048e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048de:	2301      	movs	r3, #1
 80048e0:	e00f      	b.n	8004902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <SysTick_Config+0x40>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ea:	210f      	movs	r1, #15
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	f7ff ff7a 	bl	80047e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <SysTick_Config+0x40>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <SysTick_Config+0x40>)
 80048fc:	2207      	movs	r2, #7
 80048fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	e000e010 	.word	0xe000e010

08004910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff ff17 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	4603      	mov	r3, r0
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004938:	f7ff ff2c 	bl	8004794 <__NVIC_GetPriorityGrouping>
 800493c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	6978      	ldr	r0, [r7, #20]
 8004944:	f7ff ff7a 	bl	800483c <NVIC_EncodePriority>
 8004948:	4602      	mov	r2, r0
 800494a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff49 	bl	80047e8 <__NVIC_SetPriority>
}
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	4603      	mov	r3, r0
 8004966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff1f 	bl	80047b0 <__NVIC_EnableIRQ>
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800497e:	f7ff ff8f 	bl	80048a0 <__NVIC_SystemReset>

08004982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff ff9e 	bl	80048cc <SysTick_Config>
 8004990:	4603      	mov	r3, r0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e043      	b.n	8004a3a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b22      	ldr	r3, [pc, #136]	; (8004a44 <HAL_DMA_Init+0xa8>)
 80049ba:	4413      	add	r3, r2
 80049bc:	4a22      	ldr	r2, [pc, #136]	; (8004a48 <HAL_DMA_Init+0xac>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	009a      	lsls	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_DMA_Init+0xb0>)
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80049ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	bffdfff8 	.word	0xbffdfff8
 8004a48:	cccccccd 	.word	0xcccccccd
 8004a4c:	40020000 	.word	0x40020000

08004a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_DMA_Start_IT+0x20>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e04b      	b.n	8004b08 <HAL_DMA_Start_IT+0xb8>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d13a      	bne.n	8004afa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f9eb 	bl	8004e84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 020e 	orr.w	r2, r2, #14
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e00f      	b.n	8004ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0204 	bic.w	r2, r2, #4
 8004ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 020a 	orr.w	r2, r2, #10
 8004ae6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e005      	b.n	8004b06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d008      	beq.n	8004b3a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e020      	b.n	8004b7c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 020e 	bic.w	r2, r2, #14
 8004b48:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2101      	movs	r1, #1
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d005      	beq.n	8004bac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e051      	b.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 020e 	bic.w	r2, r2, #14
 8004bba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <HAL_DMA_Abort_IT+0xd4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d029      	beq.n	8004c2a <HAL_DMA_Abort_IT+0xa2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a21      	ldr	r2, [pc, #132]	; (8004c60 <HAL_DMA_Abort_IT+0xd8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x9e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_DMA_Abort_IT+0xdc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01a      	beq.n	8004c20 <HAL_DMA_Abort_IT+0x98>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_DMA_Abort_IT+0xe0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d012      	beq.n	8004c1a <HAL_DMA_Abort_IT+0x92>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_DMA_Abort_IT+0xe4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00a      	beq.n	8004c14 <HAL_DMA_Abort_IT+0x8c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_DMA_Abort_IT+0xe8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d102      	bne.n	8004c0e <HAL_DMA_Abort_IT+0x86>
 8004c08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c0c:	e00e      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c12:	e00b      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c18:	e008      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1e:	e005      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c24:	e002      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c26:	2310      	movs	r3, #16
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_Abort_IT+0xa4>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <HAL_DMA_Abort_IT+0xec>)
 8004c2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
    } 
  }
  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40020008 	.word	0x40020008
 8004c60:	4002001c 	.word	0x4002001c
 8004c64:	40020030 	.word	0x40020030
 8004c68:	40020044 	.word	0x40020044
 8004c6c:	40020058 	.word	0x40020058
 8004c70:	4002006c 	.word	0x4002006c
 8004c74:	40020000 	.word	0x40020000

08004c78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2204      	movs	r2, #4
 8004c96:	409a      	lsls	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d04f      	beq.n	8004d40 <HAL_DMA_IRQHandler+0xc8>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d04a      	beq.n	8004d40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0204 	bic.w	r2, r2, #4
 8004cc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_DMA_IRQHandler+0x1f0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d029      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a65      	ldr	r2, [pc, #404]	; (8004e6c <HAL_DMA_IRQHandler+0x1f4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_IRQHandler+0xaa>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_DMA_IRQHandler+0x1f8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0xa4>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a62      	ldr	r2, [pc, #392]	; (8004e74 <HAL_DMA_IRQHandler+0x1fc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d012      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x9e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a60      	ldr	r2, [pc, #384]	; (8004e78 <HAL_DMA_IRQHandler+0x200>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00a      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x98>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a5f      	ldr	r2, [pc, #380]	; (8004e7c <HAL_DMA_IRQHandler+0x204>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d102      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x92>
 8004d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d08:	e00e      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d0e:	e00b      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d14:	e008      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d1a:	e005      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d20:	e002      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d22:	2340      	movs	r3, #64	; 0x40
 8004d24:	e000      	b.n	8004d28 <HAL_DMA_IRQHandler+0xb0>
 8004d26:	2304      	movs	r3, #4
 8004d28:	4a55      	ldr	r2, [pc, #340]	; (8004e80 <HAL_DMA_IRQHandler+0x208>)
 8004d2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8094 	beq.w	8004e5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d3e:	e08e      	b.n	8004e5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2202      	movs	r2, #2
 8004d46:	409a      	lsls	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d056      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x186>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d051      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 020a 	bic.w	r2, r2, #10
 8004d76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a38      	ldr	r2, [pc, #224]	; (8004e68 <HAL_DMA_IRQHandler+0x1f0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d029      	beq.n	8004dde <HAL_DMA_IRQHandler+0x166>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <HAL_DMA_IRQHandler+0x1f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_DMA_IRQHandler+0x162>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a35      	ldr	r2, [pc, #212]	; (8004e70 <HAL_DMA_IRQHandler+0x1f8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x15c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_DMA_IRQHandler+0x1fc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d012      	beq.n	8004dce <HAL_DMA_IRQHandler+0x156>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a32      	ldr	r2, [pc, #200]	; (8004e78 <HAL_DMA_IRQHandler+0x200>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00a      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x150>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_DMA_IRQHandler+0x204>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d102      	bne.n	8004dc2 <HAL_DMA_IRQHandler+0x14a>
 8004dbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004dc0:	e00e      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dc6:	e00b      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dcc:	e008      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd2:	e005      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd8:	e002      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dda:	2320      	movs	r3, #32
 8004ddc:	e000      	b.n	8004de0 <HAL_DMA_IRQHandler+0x168>
 8004dde:	2302      	movs	r3, #2
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <HAL_DMA_IRQHandler+0x208>)
 8004de2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d034      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004dfc:	e02f      	b.n	8004e5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2208      	movs	r2, #8
 8004e04:	409a      	lsls	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d028      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x1e8>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d023      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 020e 	bic.w	r2, r2, #14
 8004e26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f202 	lsl.w	r2, r1, r2
 8004e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
    }
  }
  return;
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
}
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40020008 	.word	0x40020008
 8004e6c:	4002001c 	.word	0x4002001c
 8004e70:	40020030 	.word	0x40020030
 8004e74:	40020044 	.word	0x40020044
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	4002006c 	.word	0x4002006c
 8004e80:	40020000 	.word	0x40020000

08004e84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d108      	bne.n	8004ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ec2:	e007      	b.n	8004ed4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004efa:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <HAL_FLASH_Program+0xd8>)
 8004efc:	7e1b      	ldrb	r3, [r3, #24]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_FLASH_Program+0x26>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e054      	b.n	8004fb0 <HAL_FLASH_Program+0xd0>
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <HAL_FLASH_Program+0xd8>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f10:	f000 f8b2 	bl	8005078 <FLASH_WaitForLastOperation>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d144      	bne.n	8004fa8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d102      	bne.n	8004f2a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004f24:	2301      	movs	r3, #1
 8004f26:	757b      	strb	r3, [r7, #21]
 8004f28:	e007      	b.n	8004f3a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d102      	bne.n	8004f36 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004f30:	2302      	movs	r3, #2
 8004f32:	757b      	strb	r3, [r7, #21]
 8004f34:	e001      	b.n	8004f3a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004f36:	2304      	movs	r3, #4
 8004f38:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75bb      	strb	r3, [r7, #22]
 8004f3e:	e02d      	b.n	8004f9c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004f40:	7dbb      	ldrb	r3, [r7, #22]
 8004f42:	005a      	lsls	r2, r3, #1
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	eb02 0c03 	add.w	ip, r2, r3
 8004f4a:	7dbb      	ldrb	r3, [r7, #22]
 8004f4c:	0119      	lsls	r1, r3, #4
 8004f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f52:	f1c1 0620 	rsb	r6, r1, #32
 8004f56:	f1a1 0020 	sub.w	r0, r1, #32
 8004f5a:	fa22 f401 	lsr.w	r4, r2, r1
 8004f5e:	fa03 f606 	lsl.w	r6, r3, r6
 8004f62:	4334      	orrs	r4, r6
 8004f64:	fa23 f000 	lsr.w	r0, r3, r0
 8004f68:	4304      	orrs	r4, r0
 8004f6a:	fa23 f501 	lsr.w	r5, r3, r1
 8004f6e:	b2a3      	uxth	r3, r4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4660      	mov	r0, ip
 8004f74:	f000 f864 	bl	8005040 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f7c:	f000 f87c 	bl	8005078 <FLASH_WaitForLastOperation>
 8004f80:	4603      	mov	r3, r0
 8004f82:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_FLASH_Program+0xdc>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	4a0c      	ldr	r2, [pc, #48]	; (8004fbc <HAL_FLASH_Program+0xdc>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004f96:	7dbb      	ldrb	r3, [r7, #22]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	75bb      	strb	r3, [r7, #22]
 8004f9c:	7dba      	ldrb	r2, [r7, #22]
 8004f9e:	7d7b      	ldrb	r3, [r7, #21]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d3cd      	bcc.n	8004f40 <HAL_FLASH_Program+0x60>
 8004fa4:	e000      	b.n	8004fa8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004fa6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <HAL_FLASH_Program+0xd8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	761a      	strb	r2, [r3, #24]

  return status;
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	200006b0 	.word	0x200006b0
 8004fbc:	40022000 	.word	0x40022000

08004fc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <HAL_FLASH_Unlock+0x44>)
 8004fda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <HAL_FLASH_Unlock+0x48>)
 8004fe0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <HAL_FLASH_Unlock+0x40>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40022000 	.word	0x40022000
 8005004:	45670123 	.word	0x45670123
 8005008:	cdef89ab 	.word	0xcdef89ab

0800500c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_FLASH_Lock+0x1c>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <HAL_FLASH_Lock+0x1c>)
 8005016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40022000 	.word	0x40022000

0800502c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005030:	4b02      	ldr	r3, [pc, #8]	; (800503c <HAL_FLASH_GetError+0x10>)
 8005032:	69db      	ldr	r3, [r3, #28]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	200006b0 	.word	0x200006b0

08005040 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <FLASH_Program_HalfWord+0x30>)
 800504e:	2200      	movs	r2, #0
 8005050:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <FLASH_Program_HalfWord+0x34>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <FLASH_Program_HalfWord+0x34>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	887a      	ldrh	r2, [r7, #2]
 8005062:	801a      	strh	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200006b0 	.word	0x200006b0
 8005074:	40022000 	.word	0x40022000

08005078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7fe ff1e 	bl	8003ec0 <HAL_GetTick>
 8005084:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005086:	e010      	b.n	80050aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d00c      	beq.n	80050aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <FLASH_WaitForLastOperation+0x2e>
 8005096:	f7fe ff13 	bl	8003ec0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d201      	bcs.n	80050aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e025      	b.n	80050f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e8      	bne.n	8005088 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050c4:	2220      	movs	r2, #32
 80050c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d105      	bne.n	80050ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <FLASH_WaitForLastOperation+0x88>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80050ec:	f000 f80a 	bl	8005104 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40022000 	.word	0x40022000

08005104 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800510e:	4b23      	ldr	r3, [pc, #140]	; (800519c <FLASH_SetErrorCode+0x98>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 8005124:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f043 0310 	orr.w	r3, r3, #16
 800512c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <FLASH_SetErrorCode+0x98>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 8005144:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <FLASH_SetErrorCode+0x98>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <FLASH_SetErrorCode+0x9c>)
 8005164:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <FLASH_SetErrorCode+0x98>)
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <FLASH_SetErrorCode+0x98>)
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f240 1201 	movw	r2, #257	; 0x101
 8005178:	4293      	cmp	r3, r2
 800517a:	d106      	bne.n	800518a <FLASH_SetErrorCode+0x86>
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <FLASH_SetErrorCode+0x98>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4a06      	ldr	r2, [pc, #24]	; (800519c <FLASH_SetErrorCode+0x98>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	61d3      	str	r3, [r2, #28]
}  
 8005188:	e002      	b.n	8005190 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800518a:	4a04      	ldr	r2, [pc, #16]	; (800519c <FLASH_SetErrorCode+0x98>)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60d3      	str	r3, [r2, #12]
}  
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40022000 	.word	0x40022000
 80051a0:	200006b0 	.word	0x200006b0

080051a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051b6:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <HAL_FLASHEx_Erase+0xd0>)
 80051b8:	7e1b      	ldrb	r3, [r3, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_FLASHEx_Erase+0x1e>
 80051be:	2302      	movs	r3, #2
 80051c0:	e053      	b.n	800526a <HAL_FLASHEx_Erase+0xc6>
 80051c2:	4b2c      	ldr	r3, [pc, #176]	; (8005274 <HAL_FLASHEx_Erase+0xd0>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d116      	bne.n	80051fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80051d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051d4:	f7ff ff50 	bl	8005078 <FLASH_WaitForLastOperation>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d141      	bne.n	8005262 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80051de:	2001      	movs	r0, #1
 80051e0:	f000 f84c 	bl	800527c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051e8:	f7ff ff46 	bl	8005078 <FLASH_WaitForLastOperation>
 80051ec:	4603      	mov	r3, r0
 80051ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_FLASHEx_Erase+0xd4>)
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_FLASHEx_Erase+0xd4>)
 80051f6:	f023 0304 	bic.w	r3, r3, #4
 80051fa:	6113      	str	r3, [r2, #16]
 80051fc:	e031      	b.n	8005262 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80051fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005202:	f7ff ff39 	bl	8005078 <FLASH_WaitForLastOperation>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d12a      	bne.n	8005262 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	e019      	b.n	8005250 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800521c:	68b8      	ldr	r0, [r7, #8]
 800521e:	f000 f849 	bl	80052b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005222:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005226:	f7ff ff27 	bl	8005078 <FLASH_WaitForLastOperation>
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <HAL_FLASHEx_Erase+0xd4>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	4a11      	ldr	r2, [pc, #68]	; (8005278 <HAL_FLASHEx_Erase+0xd4>)
 8005234:	f023 0302 	bic.w	r3, r3, #2
 8005238:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	601a      	str	r2, [r3, #0]
            break;
 8005246:	e00c      	b.n	8005262 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	029a      	lsls	r2, r3, #10
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3dc      	bcc.n	800521c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <HAL_FLASHEx_Erase+0xd0>)
 8005264:	2200      	movs	r2, #0
 8005266:	761a      	strb	r2, [r3, #24]

  return status;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200006b0 	.word	0x200006b0
 8005278:	40022000 	.word	0x40022000

0800527c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <FLASH_MassErase+0x30>)
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <FLASH_MassErase+0x34>)
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <FLASH_MassErase+0x34>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <FLASH_MassErase+0x34>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <FLASH_MassErase+0x34>)
 800529c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	200006b0 	.word	0x200006b0
 80052b0:	40022000 	.word	0x40022000

080052b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FLASH_PageErase+0x38>)
 80052be:	2200      	movs	r2, #0
 80052c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <FLASH_PageErase+0x3c>)
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	4a0a      	ldr	r2, [pc, #40]	; (80052f0 <FLASH_PageErase+0x3c>)
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80052ce:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <FLASH_PageErase+0x3c>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <FLASH_PageErase+0x3c>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <FLASH_PageErase+0x3c>)
 80052da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	200006b0 	.word	0x200006b0
 80052f0:	40022000 	.word	0x40022000

080052f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b08b      	sub	sp, #44	; 0x2c
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005302:	2300      	movs	r3, #0
 8005304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005306:	e169      	b.n	80055dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005308:	2201      	movs	r2, #1
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	429a      	cmp	r2, r3
 8005322:	f040 8158 	bne.w	80055d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a9a      	ldr	r2, [pc, #616]	; (8005594 <HAL_GPIO_Init+0x2a0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d05e      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
 8005330:	4a98      	ldr	r2, [pc, #608]	; (8005594 <HAL_GPIO_Init+0x2a0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d875      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 8005336:	4a98      	ldr	r2, [pc, #608]	; (8005598 <HAL_GPIO_Init+0x2a4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d058      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
 800533c:	4a96      	ldr	r2, [pc, #600]	; (8005598 <HAL_GPIO_Init+0x2a4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d86f      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 8005342:	4a96      	ldr	r2, [pc, #600]	; (800559c <HAL_GPIO_Init+0x2a8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d052      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
 8005348:	4a94      	ldr	r2, [pc, #592]	; (800559c <HAL_GPIO_Init+0x2a8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d869      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 800534e:	4a94      	ldr	r2, [pc, #592]	; (80055a0 <HAL_GPIO_Init+0x2ac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d04c      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
 8005354:	4a92      	ldr	r2, [pc, #584]	; (80055a0 <HAL_GPIO_Init+0x2ac>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d863      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 800535a:	4a92      	ldr	r2, [pc, #584]	; (80055a4 <HAL_GPIO_Init+0x2b0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d046      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
 8005360:	4a90      	ldr	r2, [pc, #576]	; (80055a4 <HAL_GPIO_Init+0x2b0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d85d      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 8005366:	2b12      	cmp	r3, #18
 8005368:	d82a      	bhi.n	80053c0 <HAL_GPIO_Init+0xcc>
 800536a:	2b12      	cmp	r3, #18
 800536c:	d859      	bhi.n	8005422 <HAL_GPIO_Init+0x12e>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_GPIO_Init+0x80>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	080053ef 	.word	0x080053ef
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053db 	.word	0x080053db
 8005380:	0800541d 	.word	0x0800541d
 8005384:	08005423 	.word	0x08005423
 8005388:	08005423 	.word	0x08005423
 800538c:	08005423 	.word	0x08005423
 8005390:	08005423 	.word	0x08005423
 8005394:	08005423 	.word	0x08005423
 8005398:	08005423 	.word	0x08005423
 800539c:	08005423 	.word	0x08005423
 80053a0:	08005423 	.word	0x08005423
 80053a4:	08005423 	.word	0x08005423
 80053a8:	08005423 	.word	0x08005423
 80053ac:	08005423 	.word	0x08005423
 80053b0:	08005423 	.word	0x08005423
 80053b4:	08005423 	.word	0x08005423
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	4a79      	ldr	r2, [pc, #484]	; (80055a8 <HAL_GPIO_Init+0x2b4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053c6:	e02c      	b.n	8005422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	623b      	str	r3, [r7, #32]
          break;
 80053ce:	e029      	b.n	8005424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	3304      	adds	r3, #4
 80053d6:	623b      	str	r3, [r7, #32]
          break;
 80053d8:	e024      	b.n	8005424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	3308      	adds	r3, #8
 80053e0:	623b      	str	r3, [r7, #32]
          break;
 80053e2:	e01f      	b.n	8005424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	330c      	adds	r3, #12
 80053ea:	623b      	str	r3, [r7, #32]
          break;
 80053ec:	e01a      	b.n	8005424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d102      	bne.n	80053fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80053f6:	2304      	movs	r3, #4
 80053f8:	623b      	str	r3, [r7, #32]
          break;
 80053fa:	e013      	b.n	8005424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005404:	2308      	movs	r3, #8
 8005406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	611a      	str	r2, [r3, #16]
          break;
 800540e:	e009      	b.n	8005424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005410:	2308      	movs	r3, #8
 8005412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	615a      	str	r2, [r3, #20]
          break;
 800541a:	e003      	b.n	8005424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800541c:	2300      	movs	r3, #0
 800541e:	623b      	str	r3, [r7, #32]
          break;
 8005420:	e000      	b.n	8005424 <HAL_GPIO_Init+0x130>
          break;
 8005422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2bff      	cmp	r3, #255	; 0xff
 8005428:	d801      	bhi.n	800542e <HAL_GPIO_Init+0x13a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	e001      	b.n	8005432 <HAL_GPIO_Init+0x13e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2bff      	cmp	r3, #255	; 0xff
 8005438:	d802      	bhi.n	8005440 <HAL_GPIO_Init+0x14c>
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	e002      	b.n	8005446 <HAL_GPIO_Init+0x152>
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	3b08      	subs	r3, #8
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	210f      	movs	r1, #15
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	6a39      	ldr	r1, [r7, #32]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	431a      	orrs	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80b1 	beq.w	80055d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005474:	4b4d      	ldr	r3, [pc, #308]	; (80055ac <HAL_GPIO_Init+0x2b8>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	4a4c      	ldr	r2, [pc, #304]	; (80055ac <HAL_GPIO_Init+0x2b8>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6193      	str	r3, [r2, #24]
 8005480:	4b4a      	ldr	r3, [pc, #296]	; (80055ac <HAL_GPIO_Init+0x2b8>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800548c:	4a48      	ldr	r2, [pc, #288]	; (80055b0 <HAL_GPIO_Init+0x2bc>)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	3302      	adds	r3, #2
 8005494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	220f      	movs	r2, #15
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4013      	ands	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a40      	ldr	r2, [pc, #256]	; (80055b4 <HAL_GPIO_Init+0x2c0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_GPIO_Init+0x1ec>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3f      	ldr	r2, [pc, #252]	; (80055b8 <HAL_GPIO_Init+0x2c4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00d      	beq.n	80054dc <HAL_GPIO_Init+0x1e8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3e      	ldr	r2, [pc, #248]	; (80055bc <HAL_GPIO_Init+0x2c8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <HAL_GPIO_Init+0x1e4>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <HAL_GPIO_Init+0x2cc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d101      	bne.n	80054d4 <HAL_GPIO_Init+0x1e0>
 80054d0:	2303      	movs	r3, #3
 80054d2:	e006      	b.n	80054e2 <HAL_GPIO_Init+0x1ee>
 80054d4:	2304      	movs	r3, #4
 80054d6:	e004      	b.n	80054e2 <HAL_GPIO_Init+0x1ee>
 80054d8:	2302      	movs	r3, #2
 80054da:	e002      	b.n	80054e2 <HAL_GPIO_Init+0x1ee>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_GPIO_Init+0x1ee>
 80054e0:	2300      	movs	r3, #0
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	f002 0203 	and.w	r2, r2, #3
 80054e8:	0092      	lsls	r2, r2, #2
 80054ea:	4093      	lsls	r3, r2
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054f2:	492f      	ldr	r1, [pc, #188]	; (80055b0 <HAL_GPIO_Init+0x2bc>)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	3302      	adds	r3, #2
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800550c:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	492c      	ldr	r1, [pc, #176]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	4313      	orrs	r3, r2
 8005516:	608b      	str	r3, [r1, #8]
 8005518:	e006      	b.n	8005528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	43db      	mvns	r3, r3
 8005522:	4928      	ldr	r1, [pc, #160]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005524:	4013      	ands	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	4922      	ldr	r1, [pc, #136]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	60cb      	str	r3, [r1, #12]
 8005540:	e006      	b.n	8005550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005542:	4b20      	ldr	r3, [pc, #128]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	43db      	mvns	r3, r3
 800554a:	491e      	ldr	r1, [pc, #120]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800554c:	4013      	ands	r3, r2
 800554e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800555c:	4b19      	ldr	r3, [pc, #100]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	4918      	ldr	r1, [pc, #96]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]
 8005568:	e006      	b.n	8005578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	43db      	mvns	r3, r3
 8005572:	4914      	ldr	r1, [pc, #80]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005574:	4013      	ands	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d021      	beq.n	80055c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005584:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	490e      	ldr	r1, [pc, #56]	; (80055c4 <HAL_GPIO_Init+0x2d0>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	e021      	b.n	80055d6 <HAL_GPIO_Init+0x2e2>
 8005592:	bf00      	nop
 8005594:	10320000 	.word	0x10320000
 8005598:	10310000 	.word	0x10310000
 800559c:	10220000 	.word	0x10220000
 80055a0:	10210000 	.word	0x10210000
 80055a4:	10120000 	.word	0x10120000
 80055a8:	10110000 	.word	0x10110000
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010800 	.word	0x40010800
 80055b8:	40010c00 	.word	0x40010c00
 80055bc:	40011000 	.word	0x40011000
 80055c0:	40011400 	.word	0x40011400
 80055c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055c8:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <HAL_GPIO_Init+0x304>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	43db      	mvns	r3, r3
 80055d0:	4909      	ldr	r1, [pc, #36]	; (80055f8 <HAL_GPIO_Init+0x304>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	3301      	adds	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f47f ae8e 	bne.w	8005308 <HAL_GPIO_Init+0x14>
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	372c      	adds	r7, #44	; 0x2c
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800560a:	e09a      	b.n	8005742 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800560c:	2201      	movs	r2, #1
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 808d 	beq.w	800573c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005622:	4a4e      	ldr	r2, [pc, #312]	; (800575c <HAL_GPIO_DeInit+0x160>)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	220f      	movs	r2, #15
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4013      	ands	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a46      	ldr	r2, [pc, #280]	; (8005760 <HAL_GPIO_DeInit+0x164>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_GPIO_DeInit+0x78>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a45      	ldr	r2, [pc, #276]	; (8005764 <HAL_GPIO_DeInit+0x168>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00d      	beq.n	8005670 <HAL_GPIO_DeInit+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a44      	ldr	r2, [pc, #272]	; (8005768 <HAL_GPIO_DeInit+0x16c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <HAL_GPIO_DeInit+0x70>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a43      	ldr	r2, [pc, #268]	; (800576c <HAL_GPIO_DeInit+0x170>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_GPIO_DeInit+0x6c>
 8005664:	2303      	movs	r3, #3
 8005666:	e006      	b.n	8005676 <HAL_GPIO_DeInit+0x7a>
 8005668:	2304      	movs	r3, #4
 800566a:	e004      	b.n	8005676 <HAL_GPIO_DeInit+0x7a>
 800566c:	2302      	movs	r3, #2
 800566e:	e002      	b.n	8005676 <HAL_GPIO_DeInit+0x7a>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <HAL_GPIO_DeInit+0x7a>
 8005674:	2300      	movs	r3, #0
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	f002 0203 	and.w	r2, r2, #3
 800567c:	0092      	lsls	r2, r2, #2
 800567e:	4093      	lsls	r3, r2
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	429a      	cmp	r2, r3
 8005684:	d132      	bne.n	80056ec <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005686:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	43db      	mvns	r3, r3
 800568e:	4938      	ldr	r1, [pc, #224]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 8005690:	4013      	ands	r3, r2
 8005692:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005694:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	43db      	mvns	r3, r3
 800569c:	4934      	ldr	r1, [pc, #208]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 800569e:	4013      	ands	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80056a2:	4b33      	ldr	r3, [pc, #204]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	4931      	ldr	r1, [pc, #196]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80056b0:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	492d      	ldr	r1, [pc, #180]	; (8005770 <HAL_GPIO_DeInit+0x174>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	220f      	movs	r2, #15
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80056ce:	4a23      	ldr	r2, [pc, #140]	; (800575c <HAL_GPIO_DeInit+0x160>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	43da      	mvns	r2, r3
 80056de:	481f      	ldr	r0, [pc, #124]	; (800575c <HAL_GPIO_DeInit+0x160>)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	400a      	ands	r2, r1
 80056e6:	3302      	adds	r3, #2
 80056e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2bff      	cmp	r3, #255	; 0xff
 80056f0:	d801      	bhi.n	80056f6 <HAL_GPIO_DeInit+0xfa>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	e001      	b.n	80056fa <HAL_GPIO_DeInit+0xfe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2bff      	cmp	r3, #255	; 0xff
 8005700:	d802      	bhi.n	8005708 <HAL_GPIO_DeInit+0x10c>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	e002      	b.n	800570e <HAL_GPIO_DeInit+0x112>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3b08      	subs	r3, #8
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	210f      	movs	r1, #15
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	401a      	ands	r2, r3
 8005720:	2104      	movs	r1, #4
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	fa01 f303 	lsl.w	r3, r1, r3
 8005728:	431a      	orrs	r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	fa22 f303 	lsr.w	r3, r2, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	f47f af5e 	bne.w	800560c <HAL_GPIO_DeInit+0x10>
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	40010000 	.word	0x40010000
 8005760:	40010800 	.word	0x40010800
 8005764:	40010c00 	.word	0x40010c00
 8005768:	40011000 	.word	0x40011000
 800576c:	40011400 	.word	0x40011400
 8005770:	40010400 	.word	0x40010400

08005774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	807b      	strh	r3, [r7, #2]
 8005780:	4613      	mov	r3, r2
 8005782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005784:	787b      	ldrb	r3, [r7, #1]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578a:	887a      	ldrh	r2, [r7, #2]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005790:	e003      	b.n	800579a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	041a      	lsls	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057b6:	887a      	ldrh	r2, [r7, #2]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4013      	ands	r3, r2
 80057bc:	041a      	lsls	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	43d9      	mvns	r1, r3
 80057c2:	887b      	ldrh	r3, [r7, #2]
 80057c4:	400b      	ands	r3, r1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057ee:	4a05      	ldr	r2, [pc, #20]	; (8005804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd faec 	bl	8002dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40010400 	.word	0x40010400

08005808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e12b      	b.n	8005a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc f890 	bl	8001954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800586a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800586c:	f001 fc06 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 8005870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4a81      	ldr	r2, [pc, #516]	; (8005a7c <HAL_I2C_Init+0x274>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d807      	bhi.n	800588c <HAL_I2C_Init+0x84>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a80      	ldr	r2, [pc, #512]	; (8005a80 <HAL_I2C_Init+0x278>)
 8005880:	4293      	cmp	r3, r2
 8005882:	bf94      	ite	ls
 8005884:	2301      	movls	r3, #1
 8005886:	2300      	movhi	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e006      	b.n	800589a <HAL_I2C_Init+0x92>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a7d      	ldr	r2, [pc, #500]	; (8005a84 <HAL_I2C_Init+0x27c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	bf94      	ite	ls
 8005894:	2301      	movls	r3, #1
 8005896:	2300      	movhi	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0e7      	b.n	8005a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a78      	ldr	r2, [pc, #480]	; (8005a88 <HAL_I2C_Init+0x280>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	0c9b      	lsrs	r3, r3, #18
 80058ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a6a      	ldr	r2, [pc, #424]	; (8005a7c <HAL_I2C_Init+0x274>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d802      	bhi.n	80058dc <HAL_I2C_Init+0xd4>
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	3301      	adds	r3, #1
 80058da:	e009      	b.n	80058f0 <HAL_I2C_Init+0xe8>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	4a69      	ldr	r2, [pc, #420]	; (8005a8c <HAL_I2C_Init+0x284>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	099b      	lsrs	r3, r3, #6
 80058ee:	3301      	adds	r3, #1
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	495c      	ldr	r1, [pc, #368]	; (8005a7c <HAL_I2C_Init+0x274>)
 800590c:	428b      	cmp	r3, r1
 800590e:	d819      	bhi.n	8005944 <HAL_I2C_Init+0x13c>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e59      	subs	r1, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	fbb1 f3f3 	udiv	r3, r1, r3
 800591e:	1c59      	adds	r1, r3, #1
 8005920:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005924:	400b      	ands	r3, r1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <HAL_I2C_Init+0x138>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1e59      	subs	r1, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fbb1 f3f3 	udiv	r3, r1, r3
 8005938:	3301      	adds	r3, #1
 800593a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593e:	e051      	b.n	80059e4 <HAL_I2C_Init+0x1dc>
 8005940:	2304      	movs	r3, #4
 8005942:	e04f      	b.n	80059e4 <HAL_I2C_Init+0x1dc>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d111      	bne.n	8005970 <HAL_I2C_Init+0x168>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	1e58      	subs	r0, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6859      	ldr	r1, [r3, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	440b      	add	r3, r1
 800595a:	fbb0 f3f3 	udiv	r3, r0, r3
 800595e:	3301      	adds	r3, #1
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e012      	b.n	8005996 <HAL_I2C_Init+0x18e>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	1e58      	subs	r0, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6859      	ldr	r1, [r3, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	440b      	add	r3, r1
 800597e:	0099      	lsls	r1, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	fbb0 f3f3 	udiv	r3, r0, r3
 8005986:	3301      	adds	r3, #1
 8005988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_I2C_Init+0x196>
 800599a:	2301      	movs	r3, #1
 800599c:	e022      	b.n	80059e4 <HAL_I2C_Init+0x1dc>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10e      	bne.n	80059c4 <HAL_I2C_Init+0x1bc>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1e58      	subs	r0, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6859      	ldr	r1, [r3, #4]
 80059ae:	460b      	mov	r3, r1
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	440b      	add	r3, r1
 80059b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b8:	3301      	adds	r3, #1
 80059ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	e00f      	b.n	80059e4 <HAL_I2C_Init+0x1dc>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1e58      	subs	r0, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	0099      	lsls	r1, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	6809      	ldr	r1, [r1, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6911      	ldr	r1, [r2, #16]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68d2      	ldr	r2, [r2, #12]
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	000186a0 	.word	0x000186a0
 8005a80:	001e847f 	.word	0x001e847f
 8005a84:	003d08ff 	.word	0x003d08ff
 8005a88:	431bde83 	.word	0x431bde83
 8005a8c:	10624dd3 	.word	0x10624dd3

08005a90 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e021      	b.n	8005ae6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb ff9a 	bl	80019f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	461a      	mov	r2, r3
 8005afc:	460b      	mov	r3, r1
 8005afe:	817b      	strh	r3, [r7, #10]
 8005b00:	4613      	mov	r3, r2
 8005b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7fe f9dc 	bl	8003ec0 <HAL_GetTick>
 8005b08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	f040 80e0 	bne.w	8005cd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	2319      	movs	r3, #25
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4970      	ldr	r1, [pc, #448]	; (8005ce4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fc9e 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e0d3      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_I2C_Master_Transmit+0x50>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e0cc      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d007      	beq.n	8005b66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0201 	orr.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2210      	movs	r2, #16
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	893a      	ldrh	r2, [r7, #8]
 8005b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a50      	ldr	r2, [pc, #320]	; (8005ce8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ba8:	8979      	ldrh	r1, [r7, #10]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fb08 	bl	80061c4 <I2C_MasterRequestWrite>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e08d      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bd4:	e066      	b.n	8005ca4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6a39      	ldr	r1, [r7, #32]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fd5c 	bl	8006698 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d107      	bne.n	8005bfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e06b      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d11b      	bne.n	8005c78 <HAL_I2C_Master_Transmit+0x188>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d017      	beq.n	8005c78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	6a39      	ldr	r1, [r7, #32]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fd53 	bl	8006728 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d107      	bne.n	8005ca0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01a      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d194      	bne.n	8005bd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	00100002 	.word	0x00100002
 8005ce8:	ffff0000 	.word	0xffff0000

08005cec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	817b      	strh	r3, [r7, #10]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d04:	f7fe f8dc 	bl	8003ec0 <HAL_GetTick>
 8005d08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 824b 	bne.w	80061ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2319      	movs	r3, #25
 8005d1e:	2201      	movs	r2, #1
 8005d20:	497f      	ldr	r1, [pc, #508]	; (8005f20 <HAL_I2C_Master_Receive+0x234>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fb9e 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e23e      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_I2C_Master_Receive+0x54>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e237      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d007      	beq.n	8005d66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2222      	movs	r2, #34	; 0x22
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2210      	movs	r2, #16
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	893a      	ldrh	r2, [r7, #8]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a5f      	ldr	r2, [pc, #380]	; (8005f24 <HAL_I2C_Master_Receive+0x238>)
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005da8:	8979      	ldrh	r1, [r7, #10]
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa8a 	bl	80062c8 <I2C_MasterRequestRead>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1f8      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d113      	bne.n	8005dee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	61fb      	str	r3, [r7, #28]
 8005dda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e1cc      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d11e      	bne.n	8005e34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e06:	b672      	cpsid	i
}
 8005e08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e30:	b662      	cpsie	i
}
 8005e32:	e035      	b.n	8005ea0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d11e      	bne.n	8005e7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e4c:	b672      	cpsid	i
}
 8005e4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e76:	b662      	cpsie	i
}
 8005e78:	e012      	b.n	8005ea0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005ea0:	e172      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	f200 811f 	bhi.w	80060ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d123      	bne.n	8005efc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fc7d 	bl	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e173      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005efa:	e145      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d152      	bne.n	8005faa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	4906      	ldr	r1, [pc, #24]	; (8005f28 <HAL_I2C_Master_Receive+0x23c>)
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 faa8 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e148      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
 8005f1e:	bf00      	nop
 8005f20:	00100002 	.word	0x00100002
 8005f24:	ffff0000 	.word	0xffff0000
 8005f28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005f2c:	b672      	cpsid	i
}
 8005f2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f72:	b662      	cpsie	i
}
 8005f74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fa8:	e0ee      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4981      	ldr	r1, [pc, #516]	; (80061b8 <HAL_I2C_Master_Receive+0x4cc>)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fa55 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0f5      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fd4:	b672      	cpsid	i
}
 8005fd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800600a:	4b6c      	ldr	r3, [pc, #432]	; (80061bc <HAL_I2C_Master_Receive+0x4d0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	4a6b      	ldr	r2, [pc, #428]	; (80061c0 <HAL_I2C_Master_Receive+0x4d4>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a1a      	lsrs	r2, r3, #8
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	3b01      	subs	r3, #1
 8006028:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d118      	bne.n	8006062 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006052:	b662      	cpsie	i
}
 8006054:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e0a6      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d1d9      	bne.n	8006024 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80060b2:	b662      	cpsie	i
}
 80060b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e8:	e04e      	b.n	8006188 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb62 	bl	80067b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e058      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d124      	bne.n	8006188 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	2b03      	cmp	r3, #3
 8006144:	d107      	bne.n	8006156 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006154:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f ae88 	bne.w	8005ea2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	e000      	b.n	80061b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80061ae:	2302      	movs	r3, #2
  }
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3728      	adds	r7, #40	; 0x28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	00010004 	.word	0x00010004
 80061bc:	2000001c 	.word	0x2000001c
 80061c0:	14f8b589 	.word	0x14f8b589

080061c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	460b      	mov	r3, r1
 80061d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d006      	beq.n	80061ee <I2C_MasterRequestWrite+0x2a>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d003      	beq.n	80061ee <I2C_MasterRequestWrite+0x2a>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061ec:	d108      	bne.n	8006200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e00b      	b.n	8006218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	2b12      	cmp	r3, #18
 8006206:	d107      	bne.n	8006218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f91d 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623e:	d103      	bne.n	8006248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e035      	b.n	80062b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006254:	d108      	bne.n	8006268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006256:	897b      	ldrh	r3, [r7, #10]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006264:	611a      	str	r2, [r3, #16]
 8006266:	e01b      	b.n	80062a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006268:	897b      	ldrh	r3, [r7, #10]
 800626a:	11db      	asrs	r3, r3, #7
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0306 	and.w	r3, r3, #6
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f063 030f 	orn	r3, r3, #15
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	490e      	ldr	r1, [pc, #56]	; (80062c0 <I2C_MasterRequestWrite+0xfc>)
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f966 	bl	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e010      	b.n	80062b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006296:	897b      	ldrh	r3, [r7, #10]
 8006298:	b2da      	uxtb	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	4907      	ldr	r1, [pc, #28]	; (80062c4 <I2C_MasterRequestWrite+0x100>)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f956 	bl	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	00010008 	.word	0x00010008
 80062c4:	00010002 	.word	0x00010002

080062c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	460b      	mov	r3, r1
 80062d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d006      	beq.n	8006302 <I2C_MasterRequestRead+0x3a>
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d003      	beq.n	8006302 <I2C_MasterRequestRead+0x3a>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006300:	d108      	bne.n	8006314 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e00b      	b.n	800632c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	2b11      	cmp	r3, #17
 800631a:	d107      	bne.n	800632c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800632a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f893 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00d      	beq.n	8006360 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006352:	d103      	bne.n	800635c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800635a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e079      	b.n	8006454 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006368:	d108      	bne.n	800637c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800636a:	897b      	ldrh	r3, [r7, #10]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f043 0301 	orr.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	611a      	str	r2, [r3, #16]
 800637a:	e05f      	b.n	800643c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800637c:	897b      	ldrh	r3, [r7, #10]
 800637e:	11db      	asrs	r3, r3, #7
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0306 	and.w	r3, r3, #6
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f063 030f 	orn	r3, r3, #15
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4930      	ldr	r1, [pc, #192]	; (800645c <I2C_MasterRequestRead+0x194>)
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f8dc 	bl	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e054      	b.n	8006454 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063aa:	897b      	ldrh	r3, [r7, #10]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	4929      	ldr	r1, [pc, #164]	; (8006460 <I2C_MasterRequestRead+0x198>)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f8cc 	bl	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e044      	b.n	8006454 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f831 	bl	8006464 <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d103      	bne.n	8006420 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e017      	b.n	8006454 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006424:	897b      	ldrh	r3, [r7, #10]
 8006426:	11db      	asrs	r3, r3, #7
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 0306 	and.w	r3, r3, #6
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f063 030e 	orn	r3, r3, #14
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4907      	ldr	r1, [pc, #28]	; (8006460 <I2C_MasterRequestRead+0x198>)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f888 	bl	8006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	00010008 	.word	0x00010008
 8006460:	00010002 	.word	0x00010002

08006464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	4613      	mov	r3, r2
 8006472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006474:	e048      	b.n	8006508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647c:	d044      	beq.n	8006508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647e:	f7fd fd1f 	bl	8003ec0 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d302      	bcc.n	8006494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d139      	bne.n	8006508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10d      	bne.n	80064ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	43da      	mvns	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4013      	ands	r3, r2
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	e00c      	b.n	80064d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	79fb      	ldrb	r3, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d116      	bne.n	8006508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f043 0220 	orr.w	r2, r3, #32
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e023      	b.n	8006550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10d      	bne.n	800652e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	43da      	mvns	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	e00c      	b.n	8006548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	43da      	mvns	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	bf0c      	ite	eq
 8006540:	2301      	moveq	r3, #1
 8006542:	2300      	movne	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	461a      	mov	r2, r3
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	429a      	cmp	r2, r3
 800654c:	d093      	beq.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006566:	e071      	b.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006576:	d123      	bne.n	80065c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f043 0204 	orr.w	r2, r3, #4
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e067      	b.n	8006690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c6:	d041      	beq.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c8:	f7fd fc7a 	bl	8003ec0 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d136      	bne.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d10c      	bne.n	8006602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	43da      	mvns	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4013      	ands	r3, r2
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf14      	ite	ne
 80065fa:	2301      	movne	r3, #1
 80065fc:	2300      	moveq	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	e00b      	b.n	800661a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	43da      	mvns	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4013      	ands	r3, r2
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e021      	b.n	8006690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	0c1b      	lsrs	r3, r3, #16
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b01      	cmp	r3, #1
 8006654:	d10c      	bne.n	8006670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	43da      	mvns	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4013      	ands	r3, r2
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	e00b      	b.n	8006688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	43da      	mvns	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf14      	ite	ne
 8006682:	2301      	movne	r3, #1
 8006684:	2300      	moveq	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f af6d 	bne.w	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a4:	e034      	b.n	8006710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f8e3 	bl	8006872 <I2C_IsAcknowledgeFailed>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e034      	b.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d028      	beq.n	8006710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066be:	f7fd fbff 	bl	8003ec0 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11d      	bne.n	8006710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d016      	beq.n	8006710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e007      	b.n	8006720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b80      	cmp	r3, #128	; 0x80
 800671c:	d1c3      	bne.n	80066a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006734:	e034      	b.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f89b 	bl	8006872 <I2C_IsAcknowledgeFailed>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e034      	b.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d028      	beq.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674e:	f7fd fbb7 	bl	8003ec0 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	d302      	bcc.n	8006764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d11d      	bne.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d016      	beq.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	f043 0220 	orr.w	r2, r3, #32
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e007      	b.n	80067b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d1c3      	bne.n	8006736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067c4:	e049      	b.n	800685a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d119      	bne.n	8006808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0210 	mvn.w	r2, #16
 80067dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e030      	b.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006808:	f7fd fb5a 	bl	8003ec0 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	429a      	cmp	r2, r3
 8006816:	d302      	bcc.n	800681e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11d      	bne.n	800685a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d016      	beq.n	800685a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e007      	b.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d1ae      	bne.n	80067c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006888:	d11b      	bne.n	80068c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006892:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr
	...

080068d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	420e0020 	.word	0x420e0020

080068e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e272      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8087 	beq.w	8006a16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006908:	4b92      	ldr	r3, [pc, #584]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f003 030c 	and.w	r3, r3, #12
 8006910:	2b04      	cmp	r3, #4
 8006912:	d00c      	beq.n	800692e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006914:	4b8f      	ldr	r3, [pc, #572]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f003 030c 	and.w	r3, r3, #12
 800691c:	2b08      	cmp	r3, #8
 800691e:	d112      	bne.n	8006946 <HAL_RCC_OscConfig+0x5e>
 8006920:	4b8c      	ldr	r3, [pc, #560]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692c:	d10b      	bne.n	8006946 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800692e:	4b89      	ldr	r3, [pc, #548]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d06c      	beq.n	8006a14 <HAL_RCC_OscConfig+0x12c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d168      	bne.n	8006a14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e24c      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694e:	d106      	bne.n	800695e <HAL_RCC_OscConfig+0x76>
 8006950:	4b80      	ldr	r3, [pc, #512]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a7f      	ldr	r2, [pc, #508]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	e02e      	b.n	80069bc <HAL_RCC_OscConfig+0xd4>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10c      	bne.n	8006980 <HAL_RCC_OscConfig+0x98>
 8006966:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a7a      	ldr	r2, [pc, #488]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 800696c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	4b78      	ldr	r3, [pc, #480]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	e01d      	b.n	80069bc <HAL_RCC_OscConfig+0xd4>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0xbc>
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4b6f      	ldr	r3, [pc, #444]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6e      	ldr	r2, [pc, #440]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e00b      	b.n	80069bc <HAL_RCC_OscConfig+0xd4>
 80069a4:	4b6b      	ldr	r3, [pc, #428]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6a      	ldr	r2, [pc, #424]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 80069aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	4b68      	ldr	r3, [pc, #416]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a67      	ldr	r2, [pc, #412]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 80069b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c4:	f7fd fa7c 	bl	8003ec0 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fd fa78 	bl	8003ec0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e200      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069de:	4b5d      	ldr	r3, [pc, #372]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0xe4>
 80069ea:	e014      	b.n	8006a16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fd fa68 	bl	8003ec0 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f4:	f7fd fa64 	bl	8003ec0 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1ec      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a06:	4b53      	ldr	r3, [pc, #332]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x10c>
 8006a12:	e000      	b.n	8006a16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d063      	beq.n	8006aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a22:	4b4c      	ldr	r3, [pc, #304]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f003 030c 	and.w	r3, r3, #12
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00b      	beq.n	8006a46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a2e:	4b49      	ldr	r3, [pc, #292]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d11c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x18c>
 8006a3a:	4b46      	ldr	r3, [pc, #280]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d116      	bne.n	8006a74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a46:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d005      	beq.n	8006a5e <HAL_RCC_OscConfig+0x176>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e1c0      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4939      	ldr	r1, [pc, #228]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a72:	e03a      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d020      	beq.n	8006abe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a7c:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <HAL_RCC_OscConfig+0x270>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a82:	f7fd fa1d 	bl	8003ec0 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a8a:	f7fd fa19 	bl	8003ec0 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e1a1      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a9c:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4927      	ldr	r1, [pc, #156]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
 8006abc:	e015      	b.n	8006aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006abe:	4b26      	ldr	r3, [pc, #152]	; (8006b58 <HAL_RCC_OscConfig+0x270>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fd f9fc 	bl	8003ec0 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006acc:	f7fd f9f8 	bl	8003ec0 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e180      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03a      	beq.n	8006b6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d019      	beq.n	8006b32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_RCC_OscConfig+0x274>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b04:	f7fd f9dc 	bl	8003ec0 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b0c:	f7fd f9d8 	bl	8003ec0 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e160      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <HAL_RCC_OscConfig+0x26c>)
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0f0      	beq.n	8006b0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	f000 face 	bl	80070cc <RCC_Delay>
 8006b30:	e01c      	b.n	8006b6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <HAL_RCC_OscConfig+0x274>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b38:	f7fd f9c2 	bl	8003ec0 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b3e:	e00f      	b.n	8006b60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b40:	f7fd f9be 	bl	8003ec0 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d908      	bls.n	8006b60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e146      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000
 8006b58:	42420000 	.word	0x42420000
 8006b5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b60:	4b92      	ldr	r3, [pc, #584]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e9      	bne.n	8006b40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80a6 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b7e:	4b8b      	ldr	r3, [pc, #556]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4a87      	ldr	r2, [pc, #540]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b94:	61d3      	str	r3, [r2, #28]
 8006b96:	4b85      	ldr	r3, [pc, #532]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba6:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <HAL_RCC_OscConfig+0x4c8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d118      	bne.n	8006be4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <HAL_RCC_OscConfig+0x4c8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a7e      	ldr	r2, [pc, #504]	; (8006db0 <HAL_RCC_OscConfig+0x4c8>)
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bbe:	f7fd f97f 	bl	8003ec0 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc6:	f7fd f97b 	bl	8003ec0 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b64      	cmp	r3, #100	; 0x64
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e103      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd8:	4b75      	ldr	r3, [pc, #468]	; (8006db0 <HAL_RCC_OscConfig+0x4c8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d106      	bne.n	8006bfa <HAL_RCC_OscConfig+0x312>
 8006bec:	4b6f      	ldr	r3, [pc, #444]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	4a6e      	ldr	r2, [pc, #440]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	6213      	str	r3, [r2, #32]
 8006bf8:	e02d      	b.n	8006c56 <HAL_RCC_OscConfig+0x36e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCC_OscConfig+0x334>
 8006c02:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	4a69      	ldr	r2, [pc, #420]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6213      	str	r3, [r2, #32]
 8006c0e:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	4a66      	ldr	r2, [pc, #408]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	f023 0304 	bic.w	r3, r3, #4
 8006c18:	6213      	str	r3, [r2, #32]
 8006c1a:	e01c      	b.n	8006c56 <HAL_RCC_OscConfig+0x36e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d10c      	bne.n	8006c3e <HAL_RCC_OscConfig+0x356>
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	4a60      	ldr	r2, [pc, #384]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c2a:	f043 0304 	orr.w	r3, r3, #4
 8006c2e:	6213      	str	r3, [r2, #32]
 8006c30:	4b5e      	ldr	r3, [pc, #376]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	4a5d      	ldr	r2, [pc, #372]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6213      	str	r3, [r2, #32]
 8006c3c:	e00b      	b.n	8006c56 <HAL_RCC_OscConfig+0x36e>
 8006c3e:	4b5b      	ldr	r3, [pc, #364]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	4a5a      	ldr	r2, [pc, #360]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	6213      	str	r3, [r2, #32]
 8006c4a:	4b58      	ldr	r3, [pc, #352]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	4a57      	ldr	r2, [pc, #348]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5e:	f7fd f92f 	bl	8003ec0 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c64:	e00a      	b.n	8006c7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c66:	f7fd f92b 	bl	8003ec0 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e0b1      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c7c:	4b4b      	ldr	r3, [pc, #300]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0ee      	beq.n	8006c66 <HAL_RCC_OscConfig+0x37e>
 8006c88:	e014      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8a:	f7fd f919 	bl	8003ec0 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c90:	e00a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c92:	f7fd f915 	bl	8003ec0 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e09b      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ca8:	4b40      	ldr	r3, [pc, #256]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ee      	bne.n	8006c92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d105      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cba:	4b3c      	ldr	r3, [pc, #240]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 8087 	beq.w	8006dde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cd0:	4b36      	ldr	r3, [pc, #216]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f003 030c 	and.w	r3, r3, #12
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d061      	beq.n	8006da0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d146      	bne.n	8006d72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce4:	4b33      	ldr	r3, [pc, #204]	; (8006db4 <HAL_RCC_OscConfig+0x4cc>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cea:	f7fd f8e9 	bl	8003ec0 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf2:	f7fd f8e5 	bl	8003ec0 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e06d      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d04:	4b29      	ldr	r3, [pc, #164]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f0      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d18:	d108      	bne.n	8006d2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4921      	ldr	r1, [pc, #132]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d2c:	4b1f      	ldr	r3, [pc, #124]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a19      	ldr	r1, [r3, #32]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	491b      	ldr	r1, [pc, #108]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_RCC_OscConfig+0x4cc>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d4a:	f7fd f8b9 	bl	8003ec0 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d52:	f7fd f8b5 	bl	8003ec0 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e03d      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d64:	4b11      	ldr	r3, [pc, #68]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0f0      	beq.n	8006d52 <HAL_RCC_OscConfig+0x46a>
 8006d70:	e035      	b.n	8006dde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d72:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_RCC_OscConfig+0x4cc>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d78:	f7fd f8a2 	bl	8003ec0 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d80:	f7fd f89e 	bl	8003ec0 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e026      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x498>
 8006d9e:	e01e      	b.n	8006dde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e019      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
 8006dac:	40021000 	.word	0x40021000
 8006db0:	40007000 	.word	0x40007000
 8006db4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006db8:	4b0b      	ldr	r3, [pc, #44]	; (8006de8 <HAL_RCC_OscConfig+0x500>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d106      	bne.n	8006dda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d001      	beq.n	8006dde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40021000 	.word	0x40021000

08006dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0d0      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e00:	4b6a      	ldr	r3, [pc, #424]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d910      	bls.n	8006e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0e:	4b67      	ldr	r3, [pc, #412]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f023 0207 	bic.w	r2, r3, #7
 8006e16:	4965      	ldr	r1, [pc, #404]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b63      	ldr	r3, [pc, #396]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0b8      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d020      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e48:	4b59      	ldr	r3, [pc, #356]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4a58      	ldr	r2, [pc, #352]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e60:	4b53      	ldr	r3, [pc, #332]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a52      	ldr	r2, [pc, #328]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e6c:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	494d      	ldr	r1, [pc, #308]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d040      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e92:	4b47      	ldr	r3, [pc, #284]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d115      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e07f      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d107      	bne.n	8006eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eaa:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e073      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	4b3d      	ldr	r3, [pc, #244]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e06b      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eca:	4b39      	ldr	r3, [pc, #228]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f023 0203 	bic.w	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4936      	ldr	r1, [pc, #216]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006edc:	f7fc fff0 	bl	8003ec0 <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee2:	e00a      	b.n	8006efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee4:	f7fc ffec 	bl	8003ec0 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e053      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006efa:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 020c 	and.w	r2, r3, #12
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1eb      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b27      	ldr	r3, [pc, #156]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d210      	bcs.n	8006f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b24      	ldr	r3, [pc, #144]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f023 0207 	bic.w	r2, r3, #7
 8006f22:	4922      	ldr	r1, [pc, #136]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2a:	4b20      	ldr	r3, [pc, #128]	; (8006fac <HAL_RCC_ClockConfig+0x1c0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e032      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d008      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f48:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4916      	ldr	r1, [pc, #88]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0308 	and.w	r3, r3, #8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f66:	4b12      	ldr	r3, [pc, #72]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	490e      	ldr	r1, [pc, #56]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f7a:	f000 f821 	bl	8006fc0 <HAL_RCC_GetSysClockFreq>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	091b      	lsrs	r3, r3, #4
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	490a      	ldr	r1, [pc, #40]	; (8006fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8c:	5ccb      	ldrb	r3, [r1, r3]
 8006f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f92:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8006f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f96:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <HAL_RCC_ClockConfig+0x1d0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fc ff4e 	bl	8003e3c <HAL_InitTick>

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40022000 	.word	0x40022000
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800c7e0 	.word	0x0800c7e0
 8006fb8:	2000001c 	.word	0x2000001c
 8006fbc:	20000020 	.word	0x20000020

08006fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006fda:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d002      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8006fee:	e027      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ff0:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ff2:	613b      	str	r3, [r7, #16]
      break;
 8006ff4:	e027      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	0c9b      	lsrs	r3, r3, #18
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007000:	5cd3      	ldrb	r3, [r2, r3]
 8007002:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <HAL_RCC_GetSysClockFreq+0x94>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	0c5b      	lsrs	r3, r3, #17
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	4a11      	ldr	r2, [pc, #68]	; (8007060 <HAL_RCC_GetSysClockFreq+0xa0>)
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a0d      	ldr	r2, [pc, #52]	; (8007058 <HAL_RCC_GetSysClockFreq+0x98>)
 8007022:	fb03 f202 	mul.w	r2, r3, r2
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e004      	b.n	800703a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a0c      	ldr	r2, [pc, #48]	; (8007064 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	613b      	str	r3, [r7, #16]
      break;
 800703e:	e002      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_RCC_GetSysClockFreq+0x98>)
 8007042:	613b      	str	r3, [r7, #16]
      break;
 8007044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007046:	693b      	ldr	r3, [r7, #16]
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000
 8007058:	007a1200 	.word	0x007a1200
 800705c:	0800c7f8 	.word	0x0800c7f8
 8007060:	0800c808 	.word	0x0800c808
 8007064:	003d0900 	.word	0x003d0900

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <HAL_RCC_GetHCLKFreq+0x10>)
 800706e:	681b      	ldr	r3, [r3, #0]
}
 8007070:	4618      	mov	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	bc80      	pop	{r7}
 8007076:	4770      	bx	lr
 8007078:	2000001c 	.word	0x2000001c

0800707c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007080:	f7ff fff2 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 8007084:	4602      	mov	r2, r0
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	4903      	ldr	r1, [pc, #12]	; (80070a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007092:	5ccb      	ldrb	r3, [r1, r3]
 8007094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007098:	4618      	mov	r0, r3
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40021000 	.word	0x40021000
 80070a0:	0800c7f0 	.word	0x0800c7f0

080070a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070a8:	f7ff ffde 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	0adb      	lsrs	r3, r3, #11
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	4903      	ldr	r1, [pc, #12]	; (80070c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ba:	5ccb      	ldrb	r3, [r1, r3]
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40021000 	.word	0x40021000
 80070c8:	0800c7f0 	.word	0x0800c7f0

080070cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <RCC_Delay+0x34>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a0a      	ldr	r2, [pc, #40]	; (8007104 <RCC_Delay+0x38>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	0a5b      	lsrs	r3, r3, #9
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
 80070e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80070e8:	bf00      	nop
  }
  while (Delay --);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1e5a      	subs	r2, r3, #1
 80070ee:	60fa      	str	r2, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f9      	bne.n	80070e8 <RCC_Delay+0x1c>
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	2000001c 	.word	0x2000001c
 8007104:	10624dd3 	.word	0x10624dd3

08007108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d07d      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007128:	4b4f      	ldr	r3, [pc, #316]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10d      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007134:	4b4c      	ldr	r3, [pc, #304]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4a4b      	ldr	r2, [pc, #300]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800713a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800713e:	61d3      	str	r3, [r2, #28]
 8007140:	4b49      	ldr	r3, [pc, #292]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	4b46      	ldr	r3, [pc, #280]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d118      	bne.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800715c:	4b43      	ldr	r3, [pc, #268]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a42      	ldr	r2, [pc, #264]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007168:	f7fc feaa 	bl	8003ec0 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800716e:	e008      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007170:	f7fc fea6 	bl	8003ec0 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e06d      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007182:	4b3a      	ldr	r3, [pc, #232]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800718e:	4b36      	ldr	r3, [pc, #216]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007196:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d02e      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d027      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071ac:	4b2e      	ldr	r3, [pc, #184]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071b6:	4b2e      	ldr	r3, [pc, #184]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071bc:	4b2c      	ldr	r3, [pc, #176]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071c2:	4a29      	ldr	r2, [pc, #164]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d014      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d2:	f7fc fe75 	bl	8003ec0 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	e00a      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071da:	f7fc fe71 	bl	8003ec0 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e036      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f0:	4b1d      	ldr	r3, [pc, #116]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ee      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071fc:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4917      	ldr	r1, [pc, #92]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800720a:	4313      	orrs	r3, r2
 800720c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d105      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007214:	4b14      	ldr	r3, [pc, #80]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	4a13      	ldr	r2, [pc, #76]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800721a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	490b      	ldr	r1, [pc, #44]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	4313      	orrs	r3, r2
 800723c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800724a:	4b07      	ldr	r3, [pc, #28]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	4904      	ldr	r1, [pc, #16]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007258:	4313      	orrs	r3, r2
 800725a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40021000 	.word	0x40021000
 800726c:	40007000 	.word	0x40007000
 8007270:	42420440 	.word	0x42420440

08007274 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	2300      	movs	r3, #0
 800728e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b10      	cmp	r3, #16
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b10      	cmp	r3, #16
 800729a:	f200 808a 	bhi.w	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d045      	beq.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d075      	beq.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80072aa:	e082      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80072ac:	4b46      	ldr	r3, [pc, #280]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072b2:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d07b      	beq.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	0c9b      	lsrs	r3, r3, #18
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	4a41      	ldr	r2, [pc, #260]	; (80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80072c8:	5cd3      	ldrb	r3, [r2, r3]
 80072ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d015      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	0c5b      	lsrs	r3, r3, #17
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	4a3b      	ldr	r2, [pc, #236]	; (80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80072e2:	5cd3      	ldrb	r3, [r2, r3]
 80072e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00d      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80072f0:	4a38      	ldr	r2, [pc, #224]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	fb02 f303 	mul.w	r3, r2, r3
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	e004      	b.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4a34      	ldr	r2, [pc, #208]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800730c:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007318:	d102      	bne.n	8007320 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	61bb      	str	r3, [r7, #24]
      break;
 800731e:	e04a      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	61bb      	str	r3, [r7, #24]
      break;
 800732e:	e042      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007330:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007340:	d108      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800734c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e01f      	b.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800735a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735e:	d109      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007360:	4b19      	ldr	r3, [pc, #100]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800736c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	e00f      	b.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737e:	d11c      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800738c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007390:	61bb      	str	r3, [r7, #24]
      break;
 8007392:	e012      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007394:	e011      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007396:	f7ff fe85 	bl	80070a4 <HAL_RCC_GetPCLK2Freq>
 800739a:	4602      	mov	r2, r0
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	0b9b      	lsrs	r3, r3, #14
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	3301      	adds	r3, #1
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	61bb      	str	r3, [r7, #24]
      break;
 80073b0:	e004      	b.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073b2:	bf00      	nop
 80073b4:	e002      	b.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073b6:	bf00      	nop
 80073b8:	e000      	b.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80073ba:	bf00      	nop
    }
  }
  return (frequency);
 80073bc:	69bb      	ldr	r3, [r7, #24]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
 80073cc:	0800c80c 	.word	0x0800c80c
 80073d0:	0800c81c 	.word	0x0800c81c
 80073d4:	007a1200 	.word	0x007a1200
 80073d8:	003d0900 	.word	0x003d0900
 80073dc:	aaaaaaab 	.word	0xaaaaaaab

080073e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e07a      	b.n	80074ec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7c5b      	ldrb	r3, [r3, #17]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb fd8e 	bl	8002f28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9be 	bl	8007794 <HAL_RTC_WaitForSynchro>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e061      	b.n	80074ec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fa77 	bl	800791c <RTC_EnterInitMode>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2204      	movs	r2, #4
 8007438:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e056      	b.n	80074ec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0207 	bic.w	r2, r2, #7
 800744c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007456:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <HAL_RTC_Init+0x114>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	4a26      	ldr	r2, [pc, #152]	; (80074f4 <HAL_RTC_Init+0x114>)
 800745c:	f023 0301 	bic.w	r3, r3, #1
 8007460:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007462:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <HAL_RTC_Init+0x114>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4921      	ldr	r1, [pc, #132]	; (80074f4 <HAL_RTC_Init+0x114>)
 8007470:	4313      	orrs	r3, r2
 8007472:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d003      	beq.n	8007486 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e00e      	b.n	80074a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007486:	2001      	movs	r0, #1
 8007488:	f7ff fef4 	bl	8007274 <HAL_RCCEx_GetPeriphCLKFreq>
 800748c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2204      	movs	r2, #4
 8007498:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e026      	b.n	80074ec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	0c1a      	lsrs	r2, r3, #16
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f002 020f 	and.w	r2, r2, #15
 80074b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	b292      	uxth	r2, r2
 80074ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa55 	bl	800796c <RTC_ExitInitMode>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d004      	beq.n	80074d2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2204      	movs	r2, #4
 80074cc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e00c      	b.n	80074ec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80074ea:	2300      	movs	r3, #0
  }
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40006c00 	.word	0x40006c00

080074f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80074f8:	b590      	push	{r4, r7, lr}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_RTC_SetTime+0x20>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e080      	b.n	800761e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	7c1b      	ldrb	r3, [r3, #16]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_RTC_SetTime+0x30>
 8007524:	2302      	movs	r3, #2
 8007526:	e07a      	b.n	800761e <HAL_RTC_SetTime+0x126>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2202      	movs	r2, #2
 8007532:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d113      	bne.n	8007562 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007544:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	4619      	mov	r1, r3
 800754e:	460b      	mov	r3, r1
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007556:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800755c:	4413      	add	r3, r2
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e01e      	b.n	80075a0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa28 	bl	80079bc <RTC_Bcd2ToByte>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007574:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fa1d 	bl	80079bc <RTC_Bcd2ToByte>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	4613      	mov	r3, r2
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800758e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	789b      	ldrb	r3, [r3, #2]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fa11 	bl	80079bc <RTC_Bcd2ToByte>
 800759a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800759c:	4423      	add	r3, r4
 800759e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f953 	bl	800784e <RTC_WriteTimeCounter>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2204      	movs	r2, #4
 80075b2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e02f      	b.n	800761e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0205 	bic.w	r2, r2, #5
 80075cc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 f964 	bl	800789c <RTC_ReadAlarmCounter>
 80075d4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d018      	beq.n	8007610 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d214      	bcs.n	8007610 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80075ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80075f0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80075f2:	6939      	ldr	r1, [r7, #16]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f96a 	bl	80078ce <RTC_WriteAlarmCounter>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2204      	movs	r2, #4
 8007604:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e006      	b.n	800761e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd90      	pop	{r4, r7, pc}
	...

08007628 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_RTC_SetDate+0x24>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e097      	b.n	8007780 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	7c1b      	ldrb	r3, [r3, #16]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_RTC_SetDate+0x34>
 8007658:	2302      	movs	r3, #2
 800765a:	e091      	b.n	8007780 <HAL_RTC_SetDate+0x158>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2202      	movs	r2, #2
 8007666:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10c      	bne.n	8007688 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	78da      	ldrb	r2, [r3, #3]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	785a      	ldrb	r2, [r3, #1]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	789a      	ldrb	r2, [r3, #2]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	739a      	strb	r2, [r3, #14]
 8007686:	e01a      	b.n	80076be <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	78db      	ldrb	r3, [r3, #3]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f995 	bl	80079bc <RTC_Bcd2ToByte>
 8007692:	4603      	mov	r3, r0
 8007694:	461a      	mov	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f98c 	bl	80079bc <RTC_Bcd2ToByte>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	789b      	ldrb	r3, [r3, #2]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f983 	bl	80079bc <RTC_Bcd2ToByte>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	7bdb      	ldrb	r3, [r3, #15]
 80076c2:	4618      	mov	r0, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7b59      	ldrb	r1, [r3, #13]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	7b9b      	ldrb	r3, [r3, #14]
 80076cc:	461a      	mov	r2, r3
 80076ce:	f000 f993 	bl	80079f8 <RTC_WeekDayNum>
 80076d2:	4603      	mov	r3, r0
 80076d4:	461a      	mov	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7b1a      	ldrb	r2, [r3, #12]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f883 	bl	80077ee <RTC_ReadTimeCounter>
 80076e8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4a26      	ldr	r2, [pc, #152]	; (8007788 <HAL_RTC_SetDate+0x160>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	0adb      	lsrs	r3, r3, #11
 80076f4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b18      	cmp	r3, #24
 80076fa:	d93a      	bls.n	8007772 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	4a23      	ldr	r2, [pc, #140]	; (800778c <HAL_RTC_SetDate+0x164>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	091b      	lsrs	r3, r3, #4
 8007706:	4a22      	ldr	r2, [pc, #136]	; (8007790 <HAL_RTC_SetDate+0x168>)
 8007708:	fb02 f303 	mul.w	r3, r2, r3
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007712:	69f9      	ldr	r1, [r7, #28]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f89a 	bl	800784e <RTC_WriteTimeCounter>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2204      	movs	r2, #4
 8007724:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e027      	b.n	8007780 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f8b3 	bl	800789c <RTC_ReadAlarmCounter>
 8007736:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d018      	beq.n	8007772 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	429a      	cmp	r2, r3
 8007746:	d214      	bcs.n	8007772 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800774e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007752:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f8b9 	bl	80078ce <RTC_WriteAlarmCounter>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2204      	movs	r2, #4
 8007766:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e006      	b.n	8007780 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	91a2b3c5 	.word	0x91a2b3c5
 800778c:	aaaaaaab 	.word	0xaaaaaaab
 8007790:	00015180 	.word	0x00015180

08007794 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e01d      	b.n	80077e6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0208 	bic.w	r2, r2, #8
 80077b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80077ba:	f7fc fb81 	bl	8003ec0 <HAL_GetTick>
 80077be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80077c0:	e009      	b.n	80077d6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80077c2:	f7fc fb7d 	bl	8003ec0 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077d0:	d901      	bls.n	80077d6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e007      	b.n	80077e6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ee      	beq.n	80077c2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b087      	sub	sp, #28
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	827b      	strh	r3, [r7, #18]
 80077fa:	2300      	movs	r3, #0
 80077fc:	823b      	strh	r3, [r7, #16]
 80077fe:	2300      	movs	r3, #0
 8007800:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800781e:	8a7a      	ldrh	r2, [r7, #18]
 8007820:	8a3b      	ldrh	r3, [r7, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d008      	beq.n	8007838 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007826:	8a3b      	ldrh	r3, [r7, #16]
 8007828:	041a      	lsls	r2, r3, #16
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e004      	b.n	8007842 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007838:	8a7b      	ldrh	r3, [r7, #18]
 800783a:	041a      	lsls	r2, r3, #16
 800783c:	89fb      	ldrh	r3, [r7, #14]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f85d 	bl	800791c <RTC_EnterInitMode>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e011      	b.n	8007892 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	0c12      	lsrs	r2, r2, #16
 8007876:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	b292      	uxth	r2, r2
 8007880:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f872 	bl	800796c <RTC_ExitInitMode>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	81fb      	strh	r3, [r7, #14]
 80078a8:	2300      	movs	r3, #0
 80078aa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80078bc:	89fb      	ldrh	r3, [r7, #14]
 80078be:	041a      	lsls	r2, r3, #16
 80078c0:	89bb      	ldrh	r3, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f81d 	bl	800791c <RTC_EnterInitMode>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
 80078ec:	e011      	b.n	8007912 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	0c12      	lsrs	r2, r2, #16
 80078f6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	b292      	uxth	r2, r2
 8007900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f832 	bl	800796c <RTC_ExitInitMode>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007928:	f7fc faca 	bl	8003ec0 <HAL_GetTick>
 800792c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800792e:	e009      	b.n	8007944 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007930:	f7fc fac6 	bl	8003ec0 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793e:	d901      	bls.n	8007944 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e00f      	b.n	8007964 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0ee      	beq.n	8007930 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0210 	orr.w	r2, r2, #16
 8007960:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0210 	bic.w	r2, r2, #16
 8007986:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007988:	f7fc fa9a 	bl	8003ec0 <HAL_GetTick>
 800798c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800798e:	e009      	b.n	80079a4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007990:	f7fc fa96 	bl	8003ec0 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800799e:	d901      	bls.n	80079a4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e007      	b.n	80079b4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0ee      	beq.n	8007990 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	f003 030f 	and.w	r3, r3, #15
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	b2db      	uxtb	r3, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr
	...

080079f8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
 8007a04:	4613      	mov	r3, r2
 8007a06:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007a16:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d82d      	bhi.n	8007a7a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4613      	mov	r3, r2
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	4413      	add	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <RTC_WeekDayNum+0xe4>)
 8007a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a30:	085a      	lsrs	r2, r3, #1
 8007a32:	78bb      	ldrb	r3, [r7, #2]
 8007a34:	441a      	add	r2, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	441a      	add	r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	441a      	add	r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	4926      	ldr	r1, [pc, #152]	; (8007ae0 <RTC_WeekDayNum+0xe8>)
 8007a48:	fba1 1303 	umull	r1, r3, r1, r3
 8007a4c:	095b      	lsrs	r3, r3, #5
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	4922      	ldr	r1, [pc, #136]	; (8007ae0 <RTC_WeekDayNum+0xe8>)
 8007a56:	fba1 1303 	umull	r1, r3, r1, r3
 8007a5a:	09db      	lsrs	r3, r3, #7
 8007a5c:	4413      	add	r3, r2
 8007a5e:	1d1a      	adds	r2, r3, #4
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <RTC_WeekDayNum+0xec>)
 8007a62:	fba3 1302 	umull	r1, r3, r3, r2
 8007a66:	1ad1      	subs	r1, r2, r3
 8007a68:	0849      	lsrs	r1, r1, #1
 8007a6a:	440b      	add	r3, r1
 8007a6c:	0899      	lsrs	r1, r3, #2
 8007a6e:	460b      	mov	r3, r1
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	1a5b      	subs	r3, r3, r1
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e029      	b.n	8007ace <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	4a15      	ldr	r2, [pc, #84]	; (8007adc <RTC_WeekDayNum+0xe4>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	085a      	lsrs	r2, r3, #1
 8007a8e:	78bb      	ldrb	r3, [r7, #2]
 8007a90:	441a      	add	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	441a      	add	r2, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	089b      	lsrs	r3, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4910      	ldr	r1, [pc, #64]	; (8007ae0 <RTC_WeekDayNum+0xe8>)
 8007aa0:	fba1 1303 	umull	r1, r3, r1, r3
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	490d      	ldr	r1, [pc, #52]	; (8007ae0 <RTC_WeekDayNum+0xe8>)
 8007aac:	fba1 1303 	umull	r1, r3, r1, r3
 8007ab0:	09db      	lsrs	r3, r3, #7
 8007ab2:	4413      	add	r3, r2
 8007ab4:	1c9a      	adds	r2, r3, #2
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <RTC_WeekDayNum+0xec>)
 8007ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8007abc:	1ad1      	subs	r1, r2, r3
 8007abe:	0849      	lsrs	r1, r1, #1
 8007ac0:	440b      	add	r3, r1
 8007ac2:	0899      	lsrs	r1, r3, #2
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	1a5b      	subs	r3, r3, r1
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	b2db      	uxtb	r3, r3
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr
 8007adc:	38e38e39 	.word	0x38e38e39
 8007ae0:	51eb851f 	.word	0x51eb851f
 8007ae4:	24924925 	.word	0x24924925

08007ae8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d027      	beq.n	8007b4e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d020      	beq.n	8007b4e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f81b 	bl	8007b56 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0204 	mvn.w	r2, #4
 8007b28:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	745a      	strb	r2, [r3, #17]
 8007b30:	e005      	b.n	8007b3e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fb f968 	bl	8002e08 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <HAL_RTCEx_BKUPWrite+0x30>)
 8007b7a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4413      	add	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	b292      	uxth	r2, r2
 8007b8c:	601a      	str	r2, [r3, #0]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr
 8007b98:	40006c00 	.word	0x40006c00

08007b9c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8007bae:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_RTCEx_BKUPRead+0x34>)
 8007bb0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr
 8007bd0:	40006c00 	.word	0x40006c00

08007bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e076      	b.n	8007cd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d108      	bne.n	8007c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bf6:	d009      	beq.n	8007c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	61da      	str	r2, [r3, #28]
 8007bfe:	e005      	b.n	8007c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7fb f9e0 	bl	8002fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c90:	ea42 0103 	orr.w	r1, r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	0c1a      	lsrs	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f002 0204 	and.w	r2, r2, #4
 8007cb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69da      	ldr	r2, [r3, #28]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e01a      	b.n	8007d24 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fb f9ca 	bl	80030a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_SPI_Transmit+0x22>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e12d      	b.n	8007faa <HAL_SPI_Transmit+0x27e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d56:	f7fc f8b3 	bl	8003ec0 <HAL_GetTick>
 8007d5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d002      	beq.n	8007d72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d70:	e116      	b.n	8007fa0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_SPI_Transmit+0x52>
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d82:	e10d      	b.n	8007fa0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	88fa      	ldrh	r2, [r7, #6]
 8007d9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dca:	d10f      	bne.n	8007dec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d007      	beq.n	8007e0a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e12:	d14f      	bne.n	8007eb4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <HAL_SPI_Transmit+0xf6>
 8007e1c:	8afb      	ldrh	r3, [r7, #22]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d142      	bne.n	8007ea8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	1c9a      	adds	r2, r3, #2
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e46:	e02f      	b.n	8007ea8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d112      	bne.n	8007e7c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	881a      	ldrh	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	1c9a      	adds	r2, r3, #2
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3b01      	subs	r3, #1
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e7a:	e015      	b.n	8007ea8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e7c:	f7fc f820 	bl	8003ec0 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d803      	bhi.n	8007e94 <HAL_SPI_Transmit+0x168>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d102      	bne.n	8007e9a <HAL_SPI_Transmit+0x16e>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007ea6:	e07b      	b.n	8007fa0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1ca      	bne.n	8007e48 <HAL_SPI_Transmit+0x11c>
 8007eb2:	e050      	b.n	8007f56 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_SPI_Transmit+0x196>
 8007ebc:	8afb      	ldrh	r3, [r7, #22]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d144      	bne.n	8007f4c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	7812      	ldrb	r2, [r2, #0]
 8007ece:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ee8:	e030      	b.n	8007f4c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d113      	bne.n	8007f20 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	330c      	adds	r3, #12
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f1e:	e015      	b.n	8007f4c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f20:	f7fb ffce 	bl	8003ec0 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d803      	bhi.n	8007f38 <HAL_SPI_Transmit+0x20c>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d102      	bne.n	8007f3e <HAL_SPI_Transmit+0x212>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007f4a:	e029      	b.n	8007fa0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1c9      	bne.n	8007eea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fbd8 	bl	8008710 <SPI_EndRxTxTransaction>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	77fb      	strb	r3, [r7, #31]
 8007f96:	e003      	b.n	8007fa0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af02      	add	r7, sp, #8
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d002      	beq.n	8007fd8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fd6:	e0fb      	b.n	80081d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe0:	d112      	bne.n	8008008 <HAL_SPI_Receive+0x56>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10e      	bne.n	8008008 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2204      	movs	r2, #4
 8007fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f8ef 	bl	80081e2 <HAL_SPI_TransmitReceive>
 8008004:	4603      	mov	r3, r0
 8008006:	e0e8      	b.n	80081da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_SPI_Receive+0x64>
 8008012:	2302      	movs	r3, #2
 8008014:	e0e1      	b.n	80081da <HAL_SPI_Receive+0x228>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800801e:	f7fb ff4f 	bl	8003ec0 <HAL_GetTick>
 8008022:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_SPI_Receive+0x7e>
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008034:	e0cc      	b.n	80081d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2204      	movs	r2, #4
 800803a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807c:	d10f      	bne.n	800809e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800809c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	2b40      	cmp	r3, #64	; 0x40
 80080aa:	d007      	beq.n	80080bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d16a      	bne.n	800819a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80080c4:	e032      	b.n	800812c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d115      	bne.n	8008100 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f103 020c 	add.w	r2, r3, #12
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080fe:	e015      	b.n	800812c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008100:	f7fb fede 	bl	8003ec0 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d803      	bhi.n	8008118 <HAL_SPI_Receive+0x166>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d102      	bne.n	800811e <HAL_SPI_Receive+0x16c>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800812a:	e051      	b.n	80081d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1c7      	bne.n	80080c6 <HAL_SPI_Receive+0x114>
 8008136:	e035      	b.n	80081a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b01      	cmp	r3, #1
 8008144:	d113      	bne.n	800816e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	b292      	uxth	r2, r2
 8008152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	1c9a      	adds	r2, r3, #2
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008162:	b29b      	uxth	r3, r3
 8008164:	3b01      	subs	r3, #1
 8008166:	b29a      	uxth	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800816c:	e015      	b.n	800819a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800816e:	f7fb fea7 	bl	8003ec0 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d803      	bhi.n	8008186 <HAL_SPI_Receive+0x1d4>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008184:	d102      	bne.n	800818c <HAL_SPI_Receive+0x1da>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008198:	e01a      	b.n	80081d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800819e:	b29b      	uxth	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1c9      	bne.n	8008138 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fa5f 	bl	800866c <SPI_EndRxTransaction>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
 80081c6:	e003      	b.n	80081d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b08c      	sub	sp, #48	; 0x30
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081f0:	2301      	movs	r3, #1
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x26>
 8008204:	2302      	movs	r3, #2
 8008206:	e198      	b.n	800853a <HAL_SPI_TransmitReceive+0x358>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008210:	f7fb fe56 	bl	8003ec0 <HAL_GetTick>
 8008214:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800821c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008226:	887b      	ldrh	r3, [r7, #2]
 8008228:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800822a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800822e:	2b01      	cmp	r3, #1
 8008230:	d00f      	beq.n	8008252 <HAL_SPI_TransmitReceive+0x70>
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008238:	d107      	bne.n	800824a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <HAL_SPI_TransmitReceive+0x68>
 8008242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008246:	2b04      	cmp	r3, #4
 8008248:	d003      	beq.n	8008252 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800824a:	2302      	movs	r3, #2
 800824c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008250:	e16d      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_SPI_TransmitReceive+0x82>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_SPI_TransmitReceive+0x82>
 800825e:	887b      	ldrh	r3, [r7, #2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d103      	bne.n	800826c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800826a:	e160      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b04      	cmp	r3, #4
 8008276:	d003      	beq.n	8008280 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2205      	movs	r2, #5
 800827c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	887a      	ldrh	r2, [r7, #2]
 8008290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	887a      	ldrh	r2, [r7, #2]
 8008296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	887a      	ldrh	r2, [r7, #2]
 80082a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	887a      	ldrh	r2, [r7, #2]
 80082a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d007      	beq.n	80082d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082dc:	d17c      	bne.n	80083d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_SPI_TransmitReceive+0x10a>
 80082e6:	8b7b      	ldrh	r3, [r7, #26]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d16a      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	881a      	ldrh	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008310:	e057      	b.n	80083c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b02      	cmp	r3, #2
 800831e:	d11b      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x176>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d016      	beq.n	8008358 <HAL_SPI_TransmitReceive+0x176>
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d113      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	881a      	ldrh	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	1c9a      	adds	r2, r3, #2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834a:	b29b      	uxth	r3, r3
 800834c:	3b01      	subs	r3, #1
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b01      	cmp	r3, #1
 8008364:	d119      	bne.n	800839a <HAL_SPI_TransmitReceive+0x1b8>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836a:	b29b      	uxth	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d014      	beq.n	800839a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	b292      	uxth	r2, r2
 800837c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008382:	1c9a      	adds	r2, r3, #2
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008396:	2301      	movs	r3, #1
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800839a:	f7fb fd91 	bl	8003ec0 <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d80b      	bhi.n	80083c2 <HAL_SPI_TransmitReceive+0x1e0>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b0:	d007      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80083c0:	e0b5      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1a2      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x130>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d19d      	bne.n	8008312 <HAL_SPI_TransmitReceive+0x130>
 80083d6:	e080      	b.n	80084da <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <HAL_SPI_TransmitReceive+0x204>
 80083e0:	8b7b      	ldrh	r3, [r7, #26]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d16f      	bne.n	80084c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008402:	b29b      	uxth	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800840c:	e05b      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d11c      	bne.n	8008456 <HAL_SPI_TransmitReceive+0x274>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d017      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x274>
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d114      	bne.n	8008456 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	330c      	adds	r3, #12
 8008436:	7812      	ldrb	r2, [r2, #0]
 8008438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d119      	bne.n	8008498 <HAL_SPI_TransmitReceive+0x2b6>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d014      	beq.n	8008498 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	b2d2      	uxtb	r2, r2
 800847a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848a:	b29b      	uxth	r3, r3
 800848c:	3b01      	subs	r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008494:	2301      	movs	r3, #1
 8008496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008498:	f7fb fd12 	bl	8003ec0 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d803      	bhi.n	80084b0 <HAL_SPI_TransmitReceive+0x2ce>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d102      	bne.n	80084b6 <HAL_SPI_TransmitReceive+0x2d4>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d107      	bne.n	80084c6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80084c4:	e033      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d19e      	bne.n	800840e <HAL_SPI_TransmitReceive+0x22c>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d199      	bne.n	800840e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f916 	bl	8008710 <SPI_EndRxTxTransaction>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d006      	beq.n	80084f8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2220      	movs	r2, #32
 80084f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084f6:	e01a      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008524:	e003      	b.n	800852e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800853a:	4618      	mov	r0, r3
 800853c:	3730      	adds	r7, #48	; 0x30
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008550:	b2db      	uxtb	r3, r3
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800856c:	f7fb fca8 	bl	8003ec0 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4413      	add	r3, r2
 800857a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800857c:	f7fb fca0 	bl	8003ec0 <HAL_GetTick>
 8008580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008582:	4b39      	ldr	r3, [pc, #228]	; (8008668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	015b      	lsls	r3, r3, #5
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	fb02 f303 	mul.w	r3, r2, r3
 8008590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008592:	e054      	b.n	800863e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d050      	beq.n	800863e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800859c:	f7fb fc90 	bl	8003ec0 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d902      	bls.n	80085b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d13d      	bne.n	800862e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ca:	d111      	bne.n	80085f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d4:	d004      	beq.n	80085e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085de:	d107      	bne.n	80085f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f8:	d10f      	bne.n	800861a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e017      	b.n	800865e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	3b01      	subs	r3, #1
 800863c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4013      	ands	r3, r2
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	bf0c      	ite	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	2300      	movne	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	461a      	mov	r2, r3
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	429a      	cmp	r2, r3
 800865a:	d19b      	bne.n	8008594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3720      	adds	r7, #32
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	2000001c 	.word	0x2000001c

0800866c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af02      	add	r7, sp, #8
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008680:	d111      	bne.n	80086a6 <SPI_EndRxTransaction+0x3a>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800868a:	d004      	beq.n	8008696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008694:	d107      	bne.n	80086a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ae:	d117      	bne.n	80086e0 <SPI_EndRxTransaction+0x74>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b8:	d112      	bne.n	80086e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2101      	movs	r1, #1
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff ff49 	bl	800855c <SPI_WaitFlagStateUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01a      	beq.n	8008706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d4:	f043 0220 	orr.w	r2, r3, #32
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e013      	b.n	8008708 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff ff36 	bl	800855c <SPI_WaitFlagStateUntilTimeout>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	f043 0220 	orr.w	r2, r3, #32
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e000      	b.n	8008708 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff ff18 	bl	800855c <SPI_WaitFlagStateUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008736:	f043 0220 	orr.w	r2, r3, #32
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e000      	b.n	8008744 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e042      	b.n	80087e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d106      	bne.n	8008778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fb fa5e 	bl	8003c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2224      	movs	r2, #36	; 0x24
 800877c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800878e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fdfb 	bl	800938c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	695a      	ldr	r2, [r3, #20]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	4613      	mov	r3, r2
 80087fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b20      	cmp	r3, #32
 800880a:	d16d      	bne.n	80088e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <HAL_UART_Transmit+0x2c>
 8008812:	88fb      	ldrh	r3, [r7, #6]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e066      	b.n	80088ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2221      	movs	r2, #33	; 0x21
 8008826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800882a:	f7fb fb49 	bl	8003ec0 <HAL_GetTick>
 800882e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008844:	d108      	bne.n	8008858 <HAL_UART_Transmit+0x6c>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d104      	bne.n	8008858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	e003      	b.n	8008860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008860:	e02a      	b.n	80088b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2200      	movs	r2, #0
 800886a:	2180      	movs	r1, #128	; 0x80
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fb4a 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e036      	b.n	80088ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10b      	bne.n	800889a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	3302      	adds	r3, #2
 8008896:	61bb      	str	r3, [r7, #24]
 8008898:	e007      	b.n	80088aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1cf      	bne.n	8008862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2140      	movs	r1, #64	; 0x40
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fb1a 	bl	8008f06 <UART_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e006      	b.n	80088ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2220      	movs	r2, #32
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e000      	b.n	80088ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80088e8:	2302      	movs	r3, #2
  }
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b08c      	sub	sp, #48	; 0x30
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	4613      	mov	r3, r2
 80088fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b20      	cmp	r3, #32
 800890a:	d14a      	bne.n	80089a2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e043      	b.n	80089a4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2201      	movs	r2, #1
 8008920:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8008928:	88fb      	ldrh	r3, [r7, #6]
 800892a:	461a      	mov	r2, r3
 800892c:	68b9      	ldr	r1, [r7, #8]
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fb57 	bl	8008fe2 <UART_Start_Receive_IT>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800893a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800893e:	2b00      	cmp	r3, #0
 8008940:	d12c      	bne.n	800899c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	2b01      	cmp	r3, #1
 8008948:	d125      	bne.n	8008996 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]
 800895e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	617b      	str	r3, [r7, #20]
   return(result);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f043 0310 	orr.w	r3, r3, #16
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	330c      	adds	r3, #12
 800897e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008980:	627a      	str	r2, [r7, #36]	; 0x24
 8008982:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	6a39      	ldr	r1, [r7, #32]
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	61fb      	str	r3, [r7, #28]
   return(result);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e5      	bne.n	8008960 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8008994:	e002      	b.n	800899c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800899c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a0:	e000      	b.n	80089a4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80089a2:	2302      	movs	r3, #2
  }
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3730      	adds	r7, #48	; 0x30
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b0ba      	sub	sp, #232	; 0xe8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80089ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10f      	bne.n	8008a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <HAL_UART_IRQHandler+0x66>
 80089fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a02:	f003 0320 	and.w	r3, r3, #32
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fbff 	bl	800920e <UART_Receive_IT>
      return;
 8008a10:	e25b      	b.n	8008eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 80de 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x22c>
 8008a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 80d1 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <HAL_UART_IRQHandler+0xae>
 8008a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a52:	f043 0201 	orr.w	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <HAL_UART_IRQHandler+0xd2>
 8008a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a76:	f043 0202 	orr.w	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <HAL_UART_IRQHandler+0xf6>
 8008a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9a:	f043 0204 	orr.w	r2, r3, #4
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d011      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x126>
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aca:	f043 0208 	orr.w	r2, r3, #8
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 81f2 	beq.w	8008ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae0:	f003 0320 	and.w	r3, r3, #32
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_UART_IRQHandler+0x14e>
 8008ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d002      	beq.n	8008afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fb8a 	bl	800920e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <HAL_UART_IRQHandler+0x17a>
 8008b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d04f      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa94 	bl	8009054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d041      	beq.n	8008bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3314      	adds	r3, #20
 8008b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1d9      	bne.n	8008b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d013      	beq.n	8008bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	4a7e      	ldr	r2, [pc, #504]	; (8008d8c <HAL_UART_IRQHandler+0x3e0>)
 8008b94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fb fff4 	bl	8004b88 <HAL_DMA_Abort_IT>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d016      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb4:	e00e      	b.n	8008bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f99c 	bl	8008ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bbc:	e00a      	b.n	8008bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f998 	bl	8008ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc4:	e006      	b.n	8008bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f994 	bl	8008ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008bd2:	e175      	b.n	8008ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd4:	bf00      	nop
    return;
 8008bd6:	e173      	b.n	8008ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	f040 814f 	bne.w	8008e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8148 	beq.w	8008e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 8141 	beq.w	8008e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60bb      	str	r3, [r7, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60bb      	str	r3, [r7, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80b6 	beq.w	8008d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8145 	beq.w	8008ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c42:	429a      	cmp	r2, r3
 8008c44:	f080 813e 	bcs.w	8008ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	f000 8088 	beq.w	8008d6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	330c      	adds	r3, #12
 8008c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	330c      	adds	r3, #12
 8008c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1d9      	bne.n	8008c5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3314      	adds	r3, #20
 8008cae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3314      	adds	r3, #20
 8008cc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ccc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e1      	bne.n	8008ca8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3314      	adds	r3, #20
 8008d04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e3      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	330c      	adds	r3, #12
 8008d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3c:	f023 0310 	bic.w	r3, r3, #16
 8008d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e3      	bne.n	8008d2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fb fed2 	bl	8004b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 f834 	bl	8001df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d88:	e09c      	b.n	8008ec4 <HAL_UART_IRQHandler+0x518>
 8008d8a:	bf00      	nop
 8008d8c:	08009119 	.word	0x08009119
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 808e 	beq.w	8008ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8089 	beq.w	8008ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008dda:	647a      	str	r2, [r7, #68]	; 0x44
 8008ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e3      	bne.n	8008db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3314      	adds	r3, #20
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e12:	633a      	str	r2, [r7, #48]	; 0x30
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e3      	bne.n	8008dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0310 	bic.w	r3, r3, #16
 8008e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	330c      	adds	r3, #12
 8008e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e58:	61fa      	str	r2, [r7, #28]
 8008e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	617b      	str	r3, [r7, #20]
   return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e3      	bne.n	8008e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7f8 ffb9 	bl	8001df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e7e:	e023      	b.n	8008ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x4f4>
 8008e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f951 	bl	8009140 <UART_Transmit_IT>
    return;
 8008e9e:	e014      	b.n	8008eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00e      	beq.n	8008eca <HAL_UART_IRQHandler+0x51e>
 8008eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d008      	beq.n	8008eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f990 	bl	80091de <UART_EndTransmit_IT>
    return;
 8008ebe:	e004      	b.n	8008eca <HAL_UART_IRQHandler+0x51e>
    return;
 8008ec0:	bf00      	nop
 8008ec2:	e002      	b.n	8008eca <HAL_UART_IRQHandler+0x51e>
      return;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <HAL_UART_IRQHandler+0x51e>
      return;
 8008ec8:	bf00      	nop
  }
}
 8008eca:	37e8      	adds	r7, #232	; 0xe8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr

08008f06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b090      	sub	sp, #64	; 0x40
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	603b      	str	r3, [r7, #0]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f16:	e050      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d04c      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d007      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f26:	f7fa ffcb 	bl	8003ec0 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d241      	bcs.n	8008fba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	330c      	adds	r3, #12
 8008f54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f56:	637a      	str	r2, [r7, #52]	; 0x34
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e5      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3314      	adds	r3, #20
 8008f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	613b      	str	r3, [r7, #16]
   return(result);
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3314      	adds	r3, #20
 8008f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f8a:	623a      	str	r2, [r7, #32]
 8008f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	69f9      	ldr	r1, [r7, #28]
 8008f90:	6a3a      	ldr	r2, [r7, #32]
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1e5      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e00f      	b.n	8008fda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	bf0c      	ite	eq
 8008fca:	2301      	moveq	r3, #1
 8008fcc:	2300      	movne	r3, #0
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d09f      	beq.n	8008f18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3740      	adds	r7, #64	; 0x40
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	88fa      	ldrh	r2, [r7, #6]
 8008ffa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	88fa      	ldrh	r2, [r7, #6]
 8009000:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2222      	movs	r2, #34	; 0x22
 800900c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68da      	ldr	r2, [r3, #12]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009026:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695a      	ldr	r2, [r3, #20]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0220 	orr.w	r2, r2, #32
 8009046:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr

08009054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009054:	b480      	push	{r7}
 8009056:	b095      	sub	sp, #84	; 0x54
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	330c      	adds	r3, #12
 8009062:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	330c      	adds	r3, #12
 800907a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800907c:	643a      	str	r2, [r7, #64]	; 0x40
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009084:	e841 2300 	strex	r3, r2, [r1]
 8009088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e5      	bne.n	800905c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3314      	adds	r3, #20
 8009096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3314      	adds	r3, #20
 80090ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e5      	bne.n	8009090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d119      	bne.n	8009100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	60bb      	str	r3, [r7, #8]
   return(result);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f023 0310 	bic.w	r3, r3, #16
 80090e2:	647b      	str	r3, [r7, #68]	; 0x44
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	330c      	adds	r3, #12
 80090ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090ec:	61ba      	str	r2, [r7, #24]
 80090ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	6979      	ldr	r1, [r7, #20]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	613b      	str	r3, [r7, #16]
   return(result);
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e5      	bne.n	80090cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800910e:	bf00      	nop
 8009110:	3754      	adds	r7, #84	; 0x54
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff fede 	bl	8008ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009138:	bf00      	nop
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b21      	cmp	r3, #33	; 0x21
 8009152:	d13e      	bne.n	80091d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915c:	d114      	bne.n	8009188 <UART_Transmit_IT+0x48>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d110      	bne.n	8009188 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800917a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	1c9a      	adds	r2, r3, #2
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	621a      	str	r2, [r3, #32]
 8009186:	e008      	b.n	800919a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	1c59      	adds	r1, r3, #1
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6211      	str	r1, [r2, #32]
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	4619      	mov	r1, r3
 80091a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10f      	bne.n	80091ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	e000      	b.n	80091d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091d2:	2302      	movs	r3, #2
  }
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr

080091de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fe66 	bl	8008ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b08c      	sub	sp, #48	; 0x30
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b22      	cmp	r3, #34	; 0x22
 8009220:	f040 80ae 	bne.w	8009380 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922c:	d117      	bne.n	800925e <UART_Receive_IT+0x50>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d113      	bne.n	800925e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924c:	b29a      	uxth	r2, r3
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	629a      	str	r2, [r3, #40]	; 0x28
 800925c:	e026      	b.n	80092ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009270:	d007      	beq.n	8009282 <UART_Receive_IT+0x74>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <UART_Receive_IT+0x82>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	b2da      	uxtb	r2, r3
 800928a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928c:	701a      	strb	r2, [r3, #0]
 800928e:	e008      	b.n	80092a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929c:	b2da      	uxtb	r2, r3
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4619      	mov	r1, r3
 80092ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d15d      	bne.n	800937c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0220 	bic.w	r2, r2, #32
 80092ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695a      	ldr	r2, [r3, #20]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009302:	2b01      	cmp	r3, #1
 8009304:	d135      	bne.n	8009372 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	330c      	adds	r3, #12
 8009312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	e853 3f00 	ldrex	r3, [r3]
 800931a:	613b      	str	r3, [r7, #16]
   return(result);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	f023 0310 	bic.w	r3, r3, #16
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932c:	623a      	str	r2, [r7, #32]
 800932e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009330:	69f9      	ldr	r1, [r7, #28]
 8009332:	6a3a      	ldr	r2, [r7, #32]
 8009334:	e841 2300 	strex	r3, r2, [r1]
 8009338:	61bb      	str	r3, [r7, #24]
   return(result);
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e5      	bne.n	800930c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	2b10      	cmp	r3, #16
 800934c:	d10a      	bne.n	8009364 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7f8 fd40 	bl	8001df0 <HAL_UARTEx_RxEventCallback>
 8009370:	e002      	b.n	8009378 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff fdb5 	bl	8008ee2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	e002      	b.n	8009382 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3730      	adds	r7, #48	; 0x30
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093c6:	f023 030c 	bic.w	r3, r3, #12
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	430b      	orrs	r3, r1
 80093d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699a      	ldr	r2, [r3, #24]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a2c      	ldr	r2, [pc, #176]	; (80094a0 <UART_SetConfig+0x114>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d103      	bne.n	80093fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80093f4:	f7fd fe56 	bl	80070a4 <HAL_RCC_GetPCLK2Freq>
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	e002      	b.n	8009402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80093fc:	f7fd fe3e 	bl	800707c <HAL_RCC_GetPCLK1Freq>
 8009400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	009a      	lsls	r2, r3, #2
 800940c:	441a      	add	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	fbb2 f3f3 	udiv	r3, r2, r3
 8009418:	4a22      	ldr	r2, [pc, #136]	; (80094a4 <UART_SetConfig+0x118>)
 800941a:	fba2 2303 	umull	r2, r3, r2, r3
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	0119      	lsls	r1, r3, #4
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009a      	lsls	r2, r3, #2
 800942c:	441a      	add	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	fbb2 f2f3 	udiv	r2, r2, r3
 8009438:	4b1a      	ldr	r3, [pc, #104]	; (80094a4 <UART_SetConfig+0x118>)
 800943a:	fba3 0302 	umull	r0, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	2064      	movs	r0, #100	; 0x64
 8009442:	fb00 f303 	mul.w	r3, r0, r3
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	3332      	adds	r3, #50	; 0x32
 800944c:	4a15      	ldr	r2, [pc, #84]	; (80094a4 <UART_SetConfig+0x118>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009458:	4419      	add	r1, r3
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4613      	mov	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	009a      	lsls	r2, r3, #2
 8009464:	441a      	add	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009470:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <UART_SetConfig+0x118>)
 8009472:	fba3 0302 	umull	r0, r3, r3, r2
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	2064      	movs	r0, #100	; 0x64
 800947a:	fb00 f303 	mul.w	r3, r0, r3
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	3332      	adds	r3, #50	; 0x32
 8009484:	4a07      	ldr	r2, [pc, #28]	; (80094a4 <UART_SetConfig+0x118>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	440a      	add	r2, r1
 8009496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40013800 	.word	0x40013800
 80094a4:	51eb851f 	.word	0x51eb851f

080094a8 <__errno>:
 80094a8:	4b01      	ldr	r3, [pc, #4]	; (80094b0 <__errno+0x8>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000028 	.word	0x20000028

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	2600      	movs	r6, #0
 80094b8:	4d0c      	ldr	r5, [pc, #48]	; (80094ec <__libc_init_array+0x38>)
 80094ba:	4c0d      	ldr	r4, [pc, #52]	; (80094f0 <__libc_init_array+0x3c>)
 80094bc:	1b64      	subs	r4, r4, r5
 80094be:	10a4      	asrs	r4, r4, #2
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	f002 fefc 	bl	800c2c0 <_init>
 80094c8:	2600      	movs	r6, #0
 80094ca:	4d0a      	ldr	r5, [pc, #40]	; (80094f4 <__libc_init_array+0x40>)
 80094cc:	4c0a      	ldr	r4, [pc, #40]	; (80094f8 <__libc_init_array+0x44>)
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	10a4      	asrs	r4, r4, #2
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800cc04 	.word	0x0800cc04
 80094f0:	0800cc04 	.word	0x0800cc04
 80094f4:	0800cc04 	.word	0x0800cc04
 80094f8:	0800cc08 	.word	0x0800cc08

080094fc <memcpy>:
 80094fc:	440a      	add	r2, r1
 80094fe:	4291      	cmp	r1, r2
 8009500:	f100 33ff 	add.w	r3, r0, #4294967295
 8009504:	d100      	bne.n	8009508 <memcpy+0xc>
 8009506:	4770      	bx	lr
 8009508:	b510      	push	{r4, lr}
 800950a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800950e:	4291      	cmp	r1, r2
 8009510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009514:	d1f9      	bne.n	800950a <memcpy+0xe>
 8009516:	bd10      	pop	{r4, pc}

08009518 <memset>:
 8009518:	4603      	mov	r3, r0
 800951a:	4402      	add	r2, r0
 800951c:	4293      	cmp	r3, r2
 800951e:	d100      	bne.n	8009522 <memset+0xa>
 8009520:	4770      	bx	lr
 8009522:	f803 1b01 	strb.w	r1, [r3], #1
 8009526:	e7f9      	b.n	800951c <memset+0x4>

08009528 <__cvt>:
 8009528:	2b00      	cmp	r3, #0
 800952a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800952e:	461f      	mov	r7, r3
 8009530:	bfbb      	ittet	lt
 8009532:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009536:	461f      	movlt	r7, r3
 8009538:	2300      	movge	r3, #0
 800953a:	232d      	movlt	r3, #45	; 0x2d
 800953c:	b088      	sub	sp, #32
 800953e:	4614      	mov	r4, r2
 8009540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009542:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009544:	7013      	strb	r3, [r2, #0]
 8009546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009548:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800954c:	f023 0820 	bic.w	r8, r3, #32
 8009550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009554:	d005      	beq.n	8009562 <__cvt+0x3a>
 8009556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800955a:	d100      	bne.n	800955e <__cvt+0x36>
 800955c:	3501      	adds	r5, #1
 800955e:	2302      	movs	r3, #2
 8009560:	e000      	b.n	8009564 <__cvt+0x3c>
 8009562:	2303      	movs	r3, #3
 8009564:	aa07      	add	r2, sp, #28
 8009566:	9204      	str	r2, [sp, #16]
 8009568:	aa06      	add	r2, sp, #24
 800956a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800956e:	e9cd 3500 	strd	r3, r5, [sp]
 8009572:	4622      	mov	r2, r4
 8009574:	463b      	mov	r3, r7
 8009576:	f000 fd03 	bl	8009f80 <_dtoa_r>
 800957a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800957e:	4606      	mov	r6, r0
 8009580:	d102      	bne.n	8009588 <__cvt+0x60>
 8009582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009584:	07db      	lsls	r3, r3, #31
 8009586:	d522      	bpl.n	80095ce <__cvt+0xa6>
 8009588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800958c:	eb06 0905 	add.w	r9, r6, r5
 8009590:	d110      	bne.n	80095b4 <__cvt+0x8c>
 8009592:	7833      	ldrb	r3, [r6, #0]
 8009594:	2b30      	cmp	r3, #48	; 0x30
 8009596:	d10a      	bne.n	80095ae <__cvt+0x86>
 8009598:	2200      	movs	r2, #0
 800959a:	2300      	movs	r3, #0
 800959c:	4620      	mov	r0, r4
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f7 fa02 	bl	80009a8 <__aeabi_dcmpeq>
 80095a4:	b918      	cbnz	r0, 80095ae <__cvt+0x86>
 80095a6:	f1c5 0501 	rsb	r5, r5, #1
 80095aa:	f8ca 5000 	str.w	r5, [sl]
 80095ae:	f8da 3000 	ldr.w	r3, [sl]
 80095b2:	4499      	add	r9, r3
 80095b4:	2200      	movs	r2, #0
 80095b6:	2300      	movs	r3, #0
 80095b8:	4620      	mov	r0, r4
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f7 f9f4 	bl	80009a8 <__aeabi_dcmpeq>
 80095c0:	b108      	cbz	r0, 80095c6 <__cvt+0x9e>
 80095c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80095c6:	2230      	movs	r2, #48	; 0x30
 80095c8:	9b07      	ldr	r3, [sp, #28]
 80095ca:	454b      	cmp	r3, r9
 80095cc:	d307      	bcc.n	80095de <__cvt+0xb6>
 80095ce:	4630      	mov	r0, r6
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095d4:	1b9b      	subs	r3, r3, r6
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	b008      	add	sp, #32
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	1c59      	adds	r1, r3, #1
 80095e0:	9107      	str	r1, [sp, #28]
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e7f0      	b.n	80095c8 <__cvt+0xa0>

080095e6 <__exponent>:
 80095e6:	4603      	mov	r3, r0
 80095e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ea:	2900      	cmp	r1, #0
 80095ec:	f803 2b02 	strb.w	r2, [r3], #2
 80095f0:	bfb6      	itet	lt
 80095f2:	222d      	movlt	r2, #45	; 0x2d
 80095f4:	222b      	movge	r2, #43	; 0x2b
 80095f6:	4249      	neglt	r1, r1
 80095f8:	2909      	cmp	r1, #9
 80095fa:	7042      	strb	r2, [r0, #1]
 80095fc:	dd2b      	ble.n	8009656 <__exponent+0x70>
 80095fe:	f10d 0407 	add.w	r4, sp, #7
 8009602:	46a4      	mov	ip, r4
 8009604:	270a      	movs	r7, #10
 8009606:	fb91 f6f7 	sdiv	r6, r1, r7
 800960a:	460a      	mov	r2, r1
 800960c:	46a6      	mov	lr, r4
 800960e:	fb07 1516 	mls	r5, r7, r6, r1
 8009612:	2a63      	cmp	r2, #99	; 0x63
 8009614:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009618:	4631      	mov	r1, r6
 800961a:	f104 34ff 	add.w	r4, r4, #4294967295
 800961e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009622:	dcf0      	bgt.n	8009606 <__exponent+0x20>
 8009624:	3130      	adds	r1, #48	; 0x30
 8009626:	f1ae 0502 	sub.w	r5, lr, #2
 800962a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800962e:	4629      	mov	r1, r5
 8009630:	1c44      	adds	r4, r0, #1
 8009632:	4561      	cmp	r1, ip
 8009634:	d30a      	bcc.n	800964c <__exponent+0x66>
 8009636:	f10d 0209 	add.w	r2, sp, #9
 800963a:	eba2 020e 	sub.w	r2, r2, lr
 800963e:	4565      	cmp	r5, ip
 8009640:	bf88      	it	hi
 8009642:	2200      	movhi	r2, #0
 8009644:	4413      	add	r3, r2
 8009646:	1a18      	subs	r0, r3, r0
 8009648:	b003      	add	sp, #12
 800964a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800964c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009650:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009654:	e7ed      	b.n	8009632 <__exponent+0x4c>
 8009656:	2330      	movs	r3, #48	; 0x30
 8009658:	3130      	adds	r1, #48	; 0x30
 800965a:	7083      	strb	r3, [r0, #2]
 800965c:	70c1      	strb	r1, [r0, #3]
 800965e:	1d03      	adds	r3, r0, #4
 8009660:	e7f1      	b.n	8009646 <__exponent+0x60>
	...

08009664 <_printf_float>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	b091      	sub	sp, #68	; 0x44
 800966a:	460c      	mov	r4, r1
 800966c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009670:	4616      	mov	r6, r2
 8009672:	461f      	mov	r7, r3
 8009674:	4605      	mov	r5, r0
 8009676:	f001 fa83 	bl	800ab80 <_localeconv_r>
 800967a:	6803      	ldr	r3, [r0, #0]
 800967c:	4618      	mov	r0, r3
 800967e:	9309      	str	r3, [sp, #36]	; 0x24
 8009680:	f7f6 fd66 	bl	8000150 <strlen>
 8009684:	2300      	movs	r3, #0
 8009686:	930e      	str	r3, [sp, #56]	; 0x38
 8009688:	f8d8 3000 	ldr.w	r3, [r8]
 800968c:	900a      	str	r0, [sp, #40]	; 0x28
 800968e:	3307      	adds	r3, #7
 8009690:	f023 0307 	bic.w	r3, r3, #7
 8009694:	f103 0208 	add.w	r2, r3, #8
 8009698:	f894 9018 	ldrb.w	r9, [r4, #24]
 800969c:	f8d4 b000 	ldr.w	fp, [r4]
 80096a0:	f8c8 2000 	str.w	r2, [r8]
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80096b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80096b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80096b6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ba:	4640      	mov	r0, r8
 80096bc:	4b9c      	ldr	r3, [pc, #624]	; (8009930 <_printf_float+0x2cc>)
 80096be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096c0:	f7f7 f9a4 	bl	8000a0c <__aeabi_dcmpun>
 80096c4:	bb70      	cbnz	r0, 8009724 <_printf_float+0xc0>
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	4640      	mov	r0, r8
 80096cc:	4b98      	ldr	r3, [pc, #608]	; (8009930 <_printf_float+0x2cc>)
 80096ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096d0:	f7f7 f97e 	bl	80009d0 <__aeabi_dcmple>
 80096d4:	bb30      	cbnz	r0, 8009724 <_printf_float+0xc0>
 80096d6:	2200      	movs	r2, #0
 80096d8:	2300      	movs	r3, #0
 80096da:	4640      	mov	r0, r8
 80096dc:	4651      	mov	r1, sl
 80096de:	f7f7 f96d 	bl	80009bc <__aeabi_dcmplt>
 80096e2:	b110      	cbz	r0, 80096ea <_printf_float+0x86>
 80096e4:	232d      	movs	r3, #45	; 0x2d
 80096e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ea:	4b92      	ldr	r3, [pc, #584]	; (8009934 <_printf_float+0x2d0>)
 80096ec:	4892      	ldr	r0, [pc, #584]	; (8009938 <_printf_float+0x2d4>)
 80096ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096f2:	bf94      	ite	ls
 80096f4:	4698      	movls	r8, r3
 80096f6:	4680      	movhi	r8, r0
 80096f8:	2303      	movs	r3, #3
 80096fa:	f04f 0a00 	mov.w	sl, #0
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	f02b 0304 	bic.w	r3, fp, #4
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	4633      	mov	r3, r6
 8009708:	4621      	mov	r1, r4
 800970a:	4628      	mov	r0, r5
 800970c:	9700      	str	r7, [sp, #0]
 800970e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009710:	f000 f9d4 	bl	8009abc <_printf_common>
 8009714:	3001      	adds	r0, #1
 8009716:	f040 8090 	bne.w	800983a <_printf_float+0x1d6>
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	b011      	add	sp, #68	; 0x44
 8009720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	4642      	mov	r2, r8
 8009726:	4653      	mov	r3, sl
 8009728:	4640      	mov	r0, r8
 800972a:	4651      	mov	r1, sl
 800972c:	f7f7 f96e 	bl	8000a0c <__aeabi_dcmpun>
 8009730:	b148      	cbz	r0, 8009746 <_printf_float+0xe2>
 8009732:	f1ba 0f00 	cmp.w	sl, #0
 8009736:	bfb8      	it	lt
 8009738:	232d      	movlt	r3, #45	; 0x2d
 800973a:	4880      	ldr	r0, [pc, #512]	; (800993c <_printf_float+0x2d8>)
 800973c:	bfb8      	it	lt
 800973e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009742:	4b7f      	ldr	r3, [pc, #508]	; (8009940 <_printf_float+0x2dc>)
 8009744:	e7d3      	b.n	80096ee <_printf_float+0x8a>
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	d142      	bne.n	80097d6 <_printf_float+0x172>
 8009750:	2306      	movs	r3, #6
 8009752:	6063      	str	r3, [r4, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	9206      	str	r2, [sp, #24]
 8009758:	aa0e      	add	r2, sp, #56	; 0x38
 800975a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800975e:	aa0d      	add	r2, sp, #52	; 0x34
 8009760:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009764:	9203      	str	r2, [sp, #12]
 8009766:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800976a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	4642      	mov	r2, r8
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	4628      	mov	r0, r5
 8009778:	4653      	mov	r3, sl
 800977a:	910b      	str	r1, [sp, #44]	; 0x2c
 800977c:	f7ff fed4 	bl	8009528 <__cvt>
 8009780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009782:	4680      	mov	r8, r0
 8009784:	2947      	cmp	r1, #71	; 0x47
 8009786:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009788:	d108      	bne.n	800979c <_printf_float+0x138>
 800978a:	1cc8      	adds	r0, r1, #3
 800978c:	db02      	blt.n	8009794 <_printf_float+0x130>
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	4299      	cmp	r1, r3
 8009792:	dd40      	ble.n	8009816 <_printf_float+0x1b2>
 8009794:	f1a9 0902 	sub.w	r9, r9, #2
 8009798:	fa5f f989 	uxtb.w	r9, r9
 800979c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80097a0:	d81f      	bhi.n	80097e2 <_printf_float+0x17e>
 80097a2:	464a      	mov	r2, r9
 80097a4:	3901      	subs	r1, #1
 80097a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097aa:	910d      	str	r1, [sp, #52]	; 0x34
 80097ac:	f7ff ff1b 	bl	80095e6 <__exponent>
 80097b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097b2:	4682      	mov	sl, r0
 80097b4:	1813      	adds	r3, r2, r0
 80097b6:	2a01      	cmp	r2, #1
 80097b8:	6123      	str	r3, [r4, #16]
 80097ba:	dc02      	bgt.n	80097c2 <_printf_float+0x15e>
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	07d2      	lsls	r2, r2, #31
 80097c0:	d501      	bpl.n	80097c6 <_printf_float+0x162>
 80097c2:	3301      	adds	r3, #1
 80097c4:	6123      	str	r3, [r4, #16]
 80097c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d09b      	beq.n	8009706 <_printf_float+0xa2>
 80097ce:	232d      	movs	r3, #45	; 0x2d
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d4:	e797      	b.n	8009706 <_printf_float+0xa2>
 80097d6:	2947      	cmp	r1, #71	; 0x47
 80097d8:	d1bc      	bne.n	8009754 <_printf_float+0xf0>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1ba      	bne.n	8009754 <_printf_float+0xf0>
 80097de:	2301      	movs	r3, #1
 80097e0:	e7b7      	b.n	8009752 <_printf_float+0xee>
 80097e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80097e6:	d118      	bne.n	800981a <_printf_float+0x1b6>
 80097e8:	2900      	cmp	r1, #0
 80097ea:	6863      	ldr	r3, [r4, #4]
 80097ec:	dd0b      	ble.n	8009806 <_printf_float+0x1a2>
 80097ee:	6121      	str	r1, [r4, #16]
 80097f0:	b913      	cbnz	r3, 80097f8 <_printf_float+0x194>
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	07d0      	lsls	r0, r2, #31
 80097f6:	d502      	bpl.n	80097fe <_printf_float+0x19a>
 80097f8:	3301      	adds	r3, #1
 80097fa:	440b      	add	r3, r1
 80097fc:	6123      	str	r3, [r4, #16]
 80097fe:	f04f 0a00 	mov.w	sl, #0
 8009802:	65a1      	str	r1, [r4, #88]	; 0x58
 8009804:	e7df      	b.n	80097c6 <_printf_float+0x162>
 8009806:	b913      	cbnz	r3, 800980e <_printf_float+0x1aa>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	07d2      	lsls	r2, r2, #31
 800980c:	d501      	bpl.n	8009812 <_printf_float+0x1ae>
 800980e:	3302      	adds	r3, #2
 8009810:	e7f4      	b.n	80097fc <_printf_float+0x198>
 8009812:	2301      	movs	r3, #1
 8009814:	e7f2      	b.n	80097fc <_printf_float+0x198>
 8009816:	f04f 0967 	mov.w	r9, #103	; 0x67
 800981a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800981c:	4299      	cmp	r1, r3
 800981e:	db05      	blt.n	800982c <_printf_float+0x1c8>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	6121      	str	r1, [r4, #16]
 8009824:	07d8      	lsls	r0, r3, #31
 8009826:	d5ea      	bpl.n	80097fe <_printf_float+0x19a>
 8009828:	1c4b      	adds	r3, r1, #1
 800982a:	e7e7      	b.n	80097fc <_printf_float+0x198>
 800982c:	2900      	cmp	r1, #0
 800982e:	bfcc      	ite	gt
 8009830:	2201      	movgt	r2, #1
 8009832:	f1c1 0202 	rsble	r2, r1, #2
 8009836:	4413      	add	r3, r2
 8009838:	e7e0      	b.n	80097fc <_printf_float+0x198>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	055a      	lsls	r2, r3, #21
 800983e:	d407      	bmi.n	8009850 <_printf_float+0x1ec>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	4642      	mov	r2, r8
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	d12b      	bne.n	80098a6 <_printf_float+0x242>
 800984e:	e764      	b.n	800971a <_printf_float+0xb6>
 8009850:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009854:	f240 80dd 	bls.w	8009a12 <_printf_float+0x3ae>
 8009858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	f7f7 f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8009864:	2800      	cmp	r0, #0
 8009866:	d033      	beq.n	80098d0 <_printf_float+0x26c>
 8009868:	2301      	movs	r3, #1
 800986a:	4631      	mov	r1, r6
 800986c:	4628      	mov	r0, r5
 800986e:	4a35      	ldr	r2, [pc, #212]	; (8009944 <_printf_float+0x2e0>)
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af51 	beq.w	800971a <_printf_float+0xb6>
 8009878:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800987c:	429a      	cmp	r2, r3
 800987e:	db02      	blt.n	8009886 <_printf_float+0x222>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07d8      	lsls	r0, r3, #31
 8009884:	d50f      	bpl.n	80098a6 <_printf_float+0x242>
 8009886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f af42 	beq.w	800971a <_printf_float+0xb6>
 8009896:	f04f 0800 	mov.w	r8, #0
 800989a:	f104 091a 	add.w	r9, r4, #26
 800989e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098a0:	3b01      	subs	r3, #1
 80098a2:	4543      	cmp	r3, r8
 80098a4:	dc09      	bgt.n	80098ba <_printf_float+0x256>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	079b      	lsls	r3, r3, #30
 80098aa:	f100 8102 	bmi.w	8009ab2 <_printf_float+0x44e>
 80098ae:	68e0      	ldr	r0, [r4, #12]
 80098b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098b2:	4298      	cmp	r0, r3
 80098b4:	bfb8      	it	lt
 80098b6:	4618      	movlt	r0, r3
 80098b8:	e731      	b.n	800971e <_printf_float+0xba>
 80098ba:	2301      	movs	r3, #1
 80098bc:	464a      	mov	r2, r9
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f af28 	beq.w	800971a <_printf_float+0xb6>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	e7e6      	b.n	800989e <_printf_float+0x23a>
 80098d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	dc38      	bgt.n	8009948 <_printf_float+0x2e4>
 80098d6:	2301      	movs	r3, #1
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	4a19      	ldr	r2, [pc, #100]	; (8009944 <_printf_float+0x2e0>)
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	f43f af1a 	beq.w	800971a <_printf_float+0xb6>
 80098e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098ea:	4313      	orrs	r3, r2
 80098ec:	d102      	bne.n	80098f4 <_printf_float+0x290>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	07d9      	lsls	r1, r3, #31
 80098f2:	d5d8      	bpl.n	80098a6 <_printf_float+0x242>
 80098f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f af0b 	beq.w	800971a <_printf_float+0xb6>
 8009904:	f04f 0900 	mov.w	r9, #0
 8009908:	f104 0a1a 	add.w	sl, r4, #26
 800990c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800990e:	425b      	negs	r3, r3
 8009910:	454b      	cmp	r3, r9
 8009912:	dc01      	bgt.n	8009918 <_printf_float+0x2b4>
 8009914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009916:	e794      	b.n	8009842 <_printf_float+0x1de>
 8009918:	2301      	movs	r3, #1
 800991a:	4652      	mov	r2, sl
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f aef9 	beq.w	800971a <_printf_float+0xb6>
 8009928:	f109 0901 	add.w	r9, r9, #1
 800992c:	e7ee      	b.n	800990c <_printf_float+0x2a8>
 800992e:	bf00      	nop
 8009930:	7fefffff 	.word	0x7fefffff
 8009934:	0800c824 	.word	0x0800c824
 8009938:	0800c828 	.word	0x0800c828
 800993c:	0800c830 	.word	0x0800c830
 8009940:	0800c82c 	.word	0x0800c82c
 8009944:	0800c834 	.word	0x0800c834
 8009948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800994a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800994c:	429a      	cmp	r2, r3
 800994e:	bfa8      	it	ge
 8009950:	461a      	movge	r2, r3
 8009952:	2a00      	cmp	r2, #0
 8009954:	4691      	mov	r9, r2
 8009956:	dc37      	bgt.n	80099c8 <_printf_float+0x364>
 8009958:	f04f 0b00 	mov.w	fp, #0
 800995c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009960:	f104 021a 	add.w	r2, r4, #26
 8009964:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009968:	ebaa 0309 	sub.w	r3, sl, r9
 800996c:	455b      	cmp	r3, fp
 800996e:	dc33      	bgt.n	80099d8 <_printf_float+0x374>
 8009970:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009974:	429a      	cmp	r2, r3
 8009976:	db3b      	blt.n	80099f0 <_printf_float+0x38c>
 8009978:	6823      	ldr	r3, [r4, #0]
 800997a:	07da      	lsls	r2, r3, #31
 800997c:	d438      	bmi.n	80099f0 <_printf_float+0x38c>
 800997e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009980:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009982:	eba3 020a 	sub.w	r2, r3, sl
 8009986:	eba3 0901 	sub.w	r9, r3, r1
 800998a:	4591      	cmp	r9, r2
 800998c:	bfa8      	it	ge
 800998e:	4691      	movge	r9, r2
 8009990:	f1b9 0f00 	cmp.w	r9, #0
 8009994:	dc34      	bgt.n	8009a00 <_printf_float+0x39c>
 8009996:	f04f 0800 	mov.w	r8, #0
 800999a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800999e:	f104 0a1a 	add.w	sl, r4, #26
 80099a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	eba3 0309 	sub.w	r3, r3, r9
 80099ac:	4543      	cmp	r3, r8
 80099ae:	f77f af7a 	ble.w	80098a6 <_printf_float+0x242>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4652      	mov	r2, sl
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	f43f aeac 	beq.w	800971a <_printf_float+0xb6>
 80099c2:	f108 0801 	add.w	r8, r8, #1
 80099c6:	e7ec      	b.n	80099a2 <_printf_float+0x33e>
 80099c8:	4613      	mov	r3, r2
 80099ca:	4631      	mov	r1, r6
 80099cc:	4642      	mov	r2, r8
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1c0      	bne.n	8009958 <_printf_float+0x2f4>
 80099d6:	e6a0      	b.n	800971a <_printf_float+0xb6>
 80099d8:	2301      	movs	r3, #1
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	920b      	str	r2, [sp, #44]	; 0x2c
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f ae99 	beq.w	800971a <_printf_float+0xb6>
 80099e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099ea:	f10b 0b01 	add.w	fp, fp, #1
 80099ee:	e7b9      	b.n	8009964 <_printf_float+0x300>
 80099f0:	4631      	mov	r1, r6
 80099f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099f6:	4628      	mov	r0, r5
 80099f8:	47b8      	blx	r7
 80099fa:	3001      	adds	r0, #1
 80099fc:	d1bf      	bne.n	800997e <_printf_float+0x31a>
 80099fe:	e68c      	b.n	800971a <_printf_float+0xb6>
 8009a00:	464b      	mov	r3, r9
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	eb08 020a 	add.w	r2, r8, sl
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d1c2      	bne.n	8009996 <_printf_float+0x332>
 8009a10:	e683      	b.n	800971a <_printf_float+0xb6>
 8009a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a14:	2a01      	cmp	r2, #1
 8009a16:	dc01      	bgt.n	8009a1c <_printf_float+0x3b8>
 8009a18:	07db      	lsls	r3, r3, #31
 8009a1a:	d537      	bpl.n	8009a8c <_printf_float+0x428>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4642      	mov	r2, r8
 8009a20:	4631      	mov	r1, r6
 8009a22:	4628      	mov	r0, r5
 8009a24:	47b8      	blx	r7
 8009a26:	3001      	adds	r0, #1
 8009a28:	f43f ae77 	beq.w	800971a <_printf_float+0xb6>
 8009a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a30:	4631      	mov	r1, r6
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f ae6f 	beq.w	800971a <_printf_float+0xb6>
 8009a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a40:	2200      	movs	r2, #0
 8009a42:	2300      	movs	r3, #0
 8009a44:	f7f6 ffb0 	bl	80009a8 <__aeabi_dcmpeq>
 8009a48:	b9d8      	cbnz	r0, 8009a82 <_printf_float+0x41e>
 8009a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a4c:	f108 0201 	add.w	r2, r8, #1
 8009a50:	3b01      	subs	r3, #1
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d10e      	bne.n	8009a7a <_printf_float+0x416>
 8009a5c:	e65d      	b.n	800971a <_printf_float+0xb6>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	464a      	mov	r2, r9
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae56 	beq.w	800971a <_printf_float+0xb6>
 8009a6e:	f108 0801 	add.w	r8, r8, #1
 8009a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a74:	3b01      	subs	r3, #1
 8009a76:	4543      	cmp	r3, r8
 8009a78:	dcf1      	bgt.n	8009a5e <_printf_float+0x3fa>
 8009a7a:	4653      	mov	r3, sl
 8009a7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a80:	e6e0      	b.n	8009844 <_printf_float+0x1e0>
 8009a82:	f04f 0800 	mov.w	r8, #0
 8009a86:	f104 091a 	add.w	r9, r4, #26
 8009a8a:	e7f2      	b.n	8009a72 <_printf_float+0x40e>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	4642      	mov	r2, r8
 8009a90:	e7df      	b.n	8009a52 <_printf_float+0x3ee>
 8009a92:	2301      	movs	r3, #1
 8009a94:	464a      	mov	r2, r9
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	47b8      	blx	r7
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	f43f ae3c 	beq.w	800971a <_printf_float+0xb6>
 8009aa2:	f108 0801 	add.w	r8, r8, #1
 8009aa6:	68e3      	ldr	r3, [r4, #12]
 8009aa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009aaa:	1a5b      	subs	r3, r3, r1
 8009aac:	4543      	cmp	r3, r8
 8009aae:	dcf0      	bgt.n	8009a92 <_printf_float+0x42e>
 8009ab0:	e6fd      	b.n	80098ae <_printf_float+0x24a>
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	f104 0919 	add.w	r9, r4, #25
 8009aba:	e7f4      	b.n	8009aa6 <_printf_float+0x442>

08009abc <_printf_common>:
 8009abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	4699      	mov	r9, r3
 8009ac4:	688a      	ldr	r2, [r1, #8]
 8009ac6:	690b      	ldr	r3, [r1, #16]
 8009ac8:	4607      	mov	r7, r0
 8009aca:	4293      	cmp	r3, r2
 8009acc:	bfb8      	it	lt
 8009ace:	4613      	movlt	r3, r2
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009adc:	b10a      	cbz	r2, 8009ae2 <_printf_common+0x26>
 8009ade:	3301      	adds	r3, #1
 8009ae0:	6033      	str	r3, [r6, #0]
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	0699      	lsls	r1, r3, #26
 8009ae6:	bf42      	ittt	mi
 8009ae8:	6833      	ldrmi	r3, [r6, #0]
 8009aea:	3302      	addmi	r3, #2
 8009aec:	6033      	strmi	r3, [r6, #0]
 8009aee:	6825      	ldr	r5, [r4, #0]
 8009af0:	f015 0506 	ands.w	r5, r5, #6
 8009af4:	d106      	bne.n	8009b04 <_printf_common+0x48>
 8009af6:	f104 0a19 	add.w	sl, r4, #25
 8009afa:	68e3      	ldr	r3, [r4, #12]
 8009afc:	6832      	ldr	r2, [r6, #0]
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	42ab      	cmp	r3, r5
 8009b02:	dc28      	bgt.n	8009b56 <_printf_common+0x9a>
 8009b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b08:	1e13      	subs	r3, r2, #0
 8009b0a:	6822      	ldr	r2, [r4, #0]
 8009b0c:	bf18      	it	ne
 8009b0e:	2301      	movne	r3, #1
 8009b10:	0692      	lsls	r2, r2, #26
 8009b12:	d42d      	bmi.n	8009b70 <_printf_common+0xb4>
 8009b14:	4649      	mov	r1, r9
 8009b16:	4638      	mov	r0, r7
 8009b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b1c:	47c0      	blx	r8
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d020      	beq.n	8009b64 <_printf_common+0xa8>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	68e5      	ldr	r5, [r4, #12]
 8009b26:	f003 0306 	and.w	r3, r3, #6
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	bf18      	it	ne
 8009b2e:	2500      	movne	r5, #0
 8009b30:	6832      	ldr	r2, [r6, #0]
 8009b32:	f04f 0600 	mov.w	r6, #0
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	bf08      	it	eq
 8009b3a:	1aad      	subeq	r5, r5, r2
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	bf08      	it	eq
 8009b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b44:	4293      	cmp	r3, r2
 8009b46:	bfc4      	itt	gt
 8009b48:	1a9b      	subgt	r3, r3, r2
 8009b4a:	18ed      	addgt	r5, r5, r3
 8009b4c:	341a      	adds	r4, #26
 8009b4e:	42b5      	cmp	r5, r6
 8009b50:	d11a      	bne.n	8009b88 <_printf_common+0xcc>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e008      	b.n	8009b68 <_printf_common+0xac>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	47c0      	blx	r8
 8009b60:	3001      	adds	r0, #1
 8009b62:	d103      	bne.n	8009b6c <_printf_common+0xb0>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	e7c4      	b.n	8009afa <_printf_common+0x3e>
 8009b70:	2030      	movs	r0, #48	; 0x30
 8009b72:	18e1      	adds	r1, r4, r3
 8009b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b7e:	4422      	add	r2, r4
 8009b80:	3302      	adds	r3, #2
 8009b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b86:	e7c5      	b.n	8009b14 <_printf_common+0x58>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c0      	blx	r8
 8009b92:	3001      	adds	r0, #1
 8009b94:	d0e6      	beq.n	8009b64 <_printf_common+0xa8>
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7d9      	b.n	8009b4e <_printf_common+0x92>
	...

08009b9c <_printf_i>:
 8009b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	7e0f      	ldrb	r7, [r1, #24]
 8009ba2:	4691      	mov	r9, r2
 8009ba4:	2f78      	cmp	r7, #120	; 0x78
 8009ba6:	4680      	mov	r8, r0
 8009ba8:	460c      	mov	r4, r1
 8009baa:	469a      	mov	sl, r3
 8009bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bb2:	d807      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bb4:	2f62      	cmp	r7, #98	; 0x62
 8009bb6:	d80a      	bhi.n	8009bce <_printf_i+0x32>
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	f000 80d9 	beq.w	8009d70 <_printf_i+0x1d4>
 8009bbe:	2f58      	cmp	r7, #88	; 0x58
 8009bc0:	f000 80a4 	beq.w	8009d0c <_printf_i+0x170>
 8009bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bcc:	e03a      	b.n	8009c44 <_printf_i+0xa8>
 8009bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bd2:	2b15      	cmp	r3, #21
 8009bd4:	d8f6      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bd6:	a101      	add	r1, pc, #4	; (adr r1, 8009bdc <_printf_i+0x40>)
 8009bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c49 	.word	0x08009c49
 8009be4:	08009bc5 	.word	0x08009bc5
 8009be8:	08009bc5 	.word	0x08009bc5
 8009bec:	08009bc5 	.word	0x08009bc5
 8009bf0:	08009bc5 	.word	0x08009bc5
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009bc5 	.word	0x08009bc5
 8009bfc:	08009bc5 	.word	0x08009bc5
 8009c00:	08009bc5 	.word	0x08009bc5
 8009c04:	08009bc5 	.word	0x08009bc5
 8009c08:	08009d57 	.word	0x08009d57
 8009c0c:	08009c79 	.word	0x08009c79
 8009c10:	08009d39 	.word	0x08009d39
 8009c14:	08009bc5 	.word	0x08009bc5
 8009c18:	08009bc5 	.word	0x08009bc5
 8009c1c:	08009d79 	.word	0x08009d79
 8009c20:	08009bc5 	.word	0x08009bc5
 8009c24:	08009c79 	.word	0x08009c79
 8009c28:	08009bc5 	.word	0x08009bc5
 8009c2c:	08009bc5 	.word	0x08009bc5
 8009c30:	08009d41 	.word	0x08009d41
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	602a      	str	r2, [r5, #0]
 8009c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c44:	2301      	movs	r3, #1
 8009c46:	e0a4      	b.n	8009d92 <_printf_i+0x1f6>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	6829      	ldr	r1, [r5, #0]
 8009c4c:	0606      	lsls	r6, r0, #24
 8009c4e:	f101 0304 	add.w	r3, r1, #4
 8009c52:	d50a      	bpl.n	8009c6a <_printf_i+0xce>
 8009c54:	680e      	ldr	r6, [r1, #0]
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	2e00      	cmp	r6, #0
 8009c5a:	da03      	bge.n	8009c64 <_printf_i+0xc8>
 8009c5c:	232d      	movs	r3, #45	; 0x2d
 8009c5e:	4276      	negs	r6, r6
 8009c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c64:	230a      	movs	r3, #10
 8009c66:	485e      	ldr	r0, [pc, #376]	; (8009de0 <_printf_i+0x244>)
 8009c68:	e019      	b.n	8009c9e <_printf_i+0x102>
 8009c6a:	680e      	ldr	r6, [r1, #0]
 8009c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	bf18      	it	ne
 8009c74:	b236      	sxthne	r6, r6
 8009c76:	e7ef      	b.n	8009c58 <_printf_i+0xbc>
 8009c78:	682b      	ldr	r3, [r5, #0]
 8009c7a:	6820      	ldr	r0, [r4, #0]
 8009c7c:	1d19      	adds	r1, r3, #4
 8009c7e:	6029      	str	r1, [r5, #0]
 8009c80:	0601      	lsls	r1, r0, #24
 8009c82:	d501      	bpl.n	8009c88 <_printf_i+0xec>
 8009c84:	681e      	ldr	r6, [r3, #0]
 8009c86:	e002      	b.n	8009c8e <_printf_i+0xf2>
 8009c88:	0646      	lsls	r6, r0, #25
 8009c8a:	d5fb      	bpl.n	8009c84 <_printf_i+0xe8>
 8009c8c:	881e      	ldrh	r6, [r3, #0]
 8009c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8009c90:	bf0c      	ite	eq
 8009c92:	2308      	moveq	r3, #8
 8009c94:	230a      	movne	r3, #10
 8009c96:	4852      	ldr	r0, [pc, #328]	; (8009de0 <_printf_i+0x244>)
 8009c98:	2100      	movs	r1, #0
 8009c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c9e:	6865      	ldr	r5, [r4, #4]
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	bfa8      	it	ge
 8009ca4:	6821      	ldrge	r1, [r4, #0]
 8009ca6:	60a5      	str	r5, [r4, #8]
 8009ca8:	bfa4      	itt	ge
 8009caa:	f021 0104 	bicge.w	r1, r1, #4
 8009cae:	6021      	strge	r1, [r4, #0]
 8009cb0:	b90e      	cbnz	r6, 8009cb6 <_printf_i+0x11a>
 8009cb2:	2d00      	cmp	r5, #0
 8009cb4:	d04d      	beq.n	8009d52 <_printf_i+0x1b6>
 8009cb6:	4615      	mov	r5, r2
 8009cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc0:	5dc7      	ldrb	r7, [r0, r7]
 8009cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc6:	4637      	mov	r7, r6
 8009cc8:	42bb      	cmp	r3, r7
 8009cca:	460e      	mov	r6, r1
 8009ccc:	d9f4      	bls.n	8009cb8 <_printf_i+0x11c>
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	d10b      	bne.n	8009cea <_printf_i+0x14e>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	07de      	lsls	r6, r3, #31
 8009cd6:	d508      	bpl.n	8009cea <_printf_i+0x14e>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	6861      	ldr	r1, [r4, #4]
 8009cdc:	4299      	cmp	r1, r3
 8009cde:	bfde      	ittt	le
 8009ce0:	2330      	movle	r3, #48	; 0x30
 8009ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cea:	1b52      	subs	r2, r2, r5
 8009cec:	6122      	str	r2, [r4, #16]
 8009cee:	464b      	mov	r3, r9
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f8cd a000 	str.w	sl, [sp]
 8009cf8:	aa03      	add	r2, sp, #12
 8009cfa:	f7ff fedf 	bl	8009abc <_printf_common>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d14c      	bne.n	8009d9c <_printf_i+0x200>
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	b004      	add	sp, #16
 8009d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0c:	4834      	ldr	r0, [pc, #208]	; (8009de0 <_printf_i+0x244>)
 8009d0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d12:	6829      	ldr	r1, [r5, #0]
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d1a:	6029      	str	r1, [r5, #0]
 8009d1c:	061d      	lsls	r5, r3, #24
 8009d1e:	d514      	bpl.n	8009d4a <_printf_i+0x1ae>
 8009d20:	07df      	lsls	r7, r3, #31
 8009d22:	bf44      	itt	mi
 8009d24:	f043 0320 	orrmi.w	r3, r3, #32
 8009d28:	6023      	strmi	r3, [r4, #0]
 8009d2a:	b91e      	cbnz	r6, 8009d34 <_printf_i+0x198>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	f023 0320 	bic.w	r3, r3, #32
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	2310      	movs	r3, #16
 8009d36:	e7af      	b.n	8009c98 <_printf_i+0xfc>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	f043 0320 	orr.w	r3, r3, #32
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	2378      	movs	r3, #120	; 0x78
 8009d42:	4828      	ldr	r0, [pc, #160]	; (8009de4 <_printf_i+0x248>)
 8009d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d48:	e7e3      	b.n	8009d12 <_printf_i+0x176>
 8009d4a:	0659      	lsls	r1, r3, #25
 8009d4c:	bf48      	it	mi
 8009d4e:	b2b6      	uxthmi	r6, r6
 8009d50:	e7e6      	b.n	8009d20 <_printf_i+0x184>
 8009d52:	4615      	mov	r5, r2
 8009d54:	e7bb      	b.n	8009cce <_printf_i+0x132>
 8009d56:	682b      	ldr	r3, [r5, #0]
 8009d58:	6826      	ldr	r6, [r4, #0]
 8009d5a:	1d18      	adds	r0, r3, #4
 8009d5c:	6961      	ldr	r1, [r4, #20]
 8009d5e:	6028      	str	r0, [r5, #0]
 8009d60:	0635      	lsls	r5, r6, #24
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	d501      	bpl.n	8009d6a <_printf_i+0x1ce>
 8009d66:	6019      	str	r1, [r3, #0]
 8009d68:	e002      	b.n	8009d70 <_printf_i+0x1d4>
 8009d6a:	0670      	lsls	r0, r6, #25
 8009d6c:	d5fb      	bpl.n	8009d66 <_printf_i+0x1ca>
 8009d6e:	8019      	strh	r1, [r3, #0]
 8009d70:	2300      	movs	r3, #0
 8009d72:	4615      	mov	r5, r2
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	e7ba      	b.n	8009cee <_printf_i+0x152>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	602a      	str	r2, [r5, #0]
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	6862      	ldr	r2, [r4, #4]
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 ff07 	bl	800ab98 <memchr>
 8009d8a:	b108      	cbz	r0, 8009d90 <_printf_i+0x1f4>
 8009d8c:	1b40      	subs	r0, r0, r5
 8009d8e:	6060      	str	r0, [r4, #4]
 8009d90:	6863      	ldr	r3, [r4, #4]
 8009d92:	6123      	str	r3, [r4, #16]
 8009d94:	2300      	movs	r3, #0
 8009d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d9a:	e7a8      	b.n	8009cee <_printf_i+0x152>
 8009d9c:	462a      	mov	r2, r5
 8009d9e:	4649      	mov	r1, r9
 8009da0:	4640      	mov	r0, r8
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	47d0      	blx	sl
 8009da6:	3001      	adds	r0, #1
 8009da8:	d0ab      	beq.n	8009d02 <_printf_i+0x166>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	079b      	lsls	r3, r3, #30
 8009dae:	d413      	bmi.n	8009dd8 <_printf_i+0x23c>
 8009db0:	68e0      	ldr	r0, [r4, #12]
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	4298      	cmp	r0, r3
 8009db6:	bfb8      	it	lt
 8009db8:	4618      	movlt	r0, r3
 8009dba:	e7a4      	b.n	8009d06 <_printf_i+0x16a>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	47d0      	blx	sl
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d09b      	beq.n	8009d02 <_printf_i+0x166>
 8009dca:	3501      	adds	r5, #1
 8009dcc:	68e3      	ldr	r3, [r4, #12]
 8009dce:	9903      	ldr	r1, [sp, #12]
 8009dd0:	1a5b      	subs	r3, r3, r1
 8009dd2:	42ab      	cmp	r3, r5
 8009dd4:	dcf2      	bgt.n	8009dbc <_printf_i+0x220>
 8009dd6:	e7eb      	b.n	8009db0 <_printf_i+0x214>
 8009dd8:	2500      	movs	r5, #0
 8009dda:	f104 0619 	add.w	r6, r4, #25
 8009dde:	e7f5      	b.n	8009dcc <_printf_i+0x230>
 8009de0:	0800c836 	.word	0x0800c836
 8009de4:	0800c847 	.word	0x0800c847

08009de8 <siprintf>:
 8009de8:	b40e      	push	{r1, r2, r3}
 8009dea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dee:	b500      	push	{lr}
 8009df0:	b09c      	sub	sp, #112	; 0x70
 8009df2:	ab1d      	add	r3, sp, #116	; 0x74
 8009df4:	9002      	str	r0, [sp, #8]
 8009df6:	9006      	str	r0, [sp, #24]
 8009df8:	9107      	str	r1, [sp, #28]
 8009dfa:	9104      	str	r1, [sp, #16]
 8009dfc:	4808      	ldr	r0, [pc, #32]	; (8009e20 <siprintf+0x38>)
 8009dfe:	4909      	ldr	r1, [pc, #36]	; (8009e24 <siprintf+0x3c>)
 8009e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e04:	9105      	str	r1, [sp, #20]
 8009e06:	6800      	ldr	r0, [r0, #0]
 8009e08:	a902      	add	r1, sp, #8
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	f001 fba0 	bl	800b550 <_svfiprintf_r>
 8009e10:	2200      	movs	r2, #0
 8009e12:	9b02      	ldr	r3, [sp, #8]
 8009e14:	701a      	strb	r2, [r3, #0]
 8009e16:	b01c      	add	sp, #112	; 0x70
 8009e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e1c:	b003      	add	sp, #12
 8009e1e:	4770      	bx	lr
 8009e20:	20000028 	.word	0x20000028
 8009e24:	ffff0208 	.word	0xffff0208

08009e28 <__assert_func>:
 8009e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <__assert_func+0x2c>)
 8009e30:	4605      	mov	r5, r0
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68d8      	ldr	r0, [r3, #12]
 8009e36:	b14c      	cbz	r4, 8009e4c <__assert_func+0x24>
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <__assert_func+0x30>)
 8009e3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e3e:	9100      	str	r1, [sp, #0]
 8009e40:	462b      	mov	r3, r5
 8009e42:	4906      	ldr	r1, [pc, #24]	; (8009e5c <__assert_func+0x34>)
 8009e44:	f000 fe8a 	bl	800ab5c <fiprintf>
 8009e48:	f001 feaa 	bl	800bba0 <abort>
 8009e4c:	4b04      	ldr	r3, [pc, #16]	; (8009e60 <__assert_func+0x38>)
 8009e4e:	461c      	mov	r4, r3
 8009e50:	e7f3      	b.n	8009e3a <__assert_func+0x12>
 8009e52:	bf00      	nop
 8009e54:	20000028 	.word	0x20000028
 8009e58:	0800c858 	.word	0x0800c858
 8009e5c:	0800c865 	.word	0x0800c865
 8009e60:	0800c893 	.word	0x0800c893

08009e64 <quorem>:
 8009e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	6903      	ldr	r3, [r0, #16]
 8009e6a:	690c      	ldr	r4, [r1, #16]
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	42a3      	cmp	r3, r4
 8009e70:	f2c0 8082 	blt.w	8009f78 <quorem+0x114>
 8009e74:	3c01      	subs	r4, #1
 8009e76:	f100 0514 	add.w	r5, r0, #20
 8009e7a:	f101 0814 	add.w	r8, r1, #20
 8009e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e9c:	d331      	bcc.n	8009f02 <quorem+0x9e>
 8009e9e:	f04f 0e00 	mov.w	lr, #0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	46ac      	mov	ip, r5
 8009ea6:	46f2      	mov	sl, lr
 8009ea8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009eac:	b293      	uxth	r3, r2
 8009eae:	fb06 e303 	mla	r3, r6, r3, lr
 8009eb2:	0c12      	lsrs	r2, r2, #16
 8009eb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	fb06 e202 	mla	r2, r6, r2, lr
 8009ebe:	ebaa 0303 	sub.w	r3, sl, r3
 8009ec2:	f8dc a000 	ldr.w	sl, [ip]
 8009ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eca:	fa1f fa8a 	uxth.w	sl, sl
 8009ece:	4453      	add	r3, sl
 8009ed0:	f8dc a000 	ldr.w	sl, [ip]
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee4:	4581      	cmp	r9, r0
 8009ee6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009eea:	f84c 3b04 	str.w	r3, [ip], #4
 8009eee:	d2db      	bcs.n	8009ea8 <quorem+0x44>
 8009ef0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ef4:	b92b      	cbnz	r3, 8009f02 <quorem+0x9e>
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	429d      	cmp	r5, r3
 8009efc:	461a      	mov	r2, r3
 8009efe:	d32f      	bcc.n	8009f60 <quorem+0xfc>
 8009f00:	613c      	str	r4, [r7, #16]
 8009f02:	4638      	mov	r0, r7
 8009f04:	f001 f8d4 	bl	800b0b0 <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	db25      	blt.n	8009f58 <quorem+0xf4>
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	3601      	adds	r6, #1
 8009f14:	f858 1b04 	ldr.w	r1, [r8], #4
 8009f18:	f8d0 e000 	ldr.w	lr, [r0]
 8009f1c:	b28b      	uxth	r3, r1
 8009f1e:	ebac 0303 	sub.w	r3, ip, r3
 8009f22:	fa1f f28e 	uxth.w	r2, lr
 8009f26:	4413      	add	r3, r2
 8009f28:	0c0a      	lsrs	r2, r1, #16
 8009f2a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f38:	45c1      	cmp	r9, r8
 8009f3a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f3e:	f840 3b04 	str.w	r3, [r0], #4
 8009f42:	d2e7      	bcs.n	8009f14 <quorem+0xb0>
 8009f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f4c:	b922      	cbnz	r2, 8009f58 <quorem+0xf4>
 8009f4e:	3b04      	subs	r3, #4
 8009f50:	429d      	cmp	r5, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	d30a      	bcc.n	8009f6c <quorem+0x108>
 8009f56:	613c      	str	r4, [r7, #16]
 8009f58:	4630      	mov	r0, r6
 8009f5a:	b003      	add	sp, #12
 8009f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f60:	6812      	ldr	r2, [r2, #0]
 8009f62:	3b04      	subs	r3, #4
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	d1cb      	bne.n	8009f00 <quorem+0x9c>
 8009f68:	3c01      	subs	r4, #1
 8009f6a:	e7c6      	b.n	8009efa <quorem+0x96>
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	3b04      	subs	r3, #4
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d1f0      	bne.n	8009f56 <quorem+0xf2>
 8009f74:	3c01      	subs	r4, #1
 8009f76:	e7eb      	b.n	8009f50 <quorem+0xec>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e7ee      	b.n	8009f5a <quorem+0xf6>
 8009f7c:	0000      	movs	r0, r0
	...

08009f80 <_dtoa_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4616      	mov	r6, r2
 8009f86:	461f      	mov	r7, r3
 8009f88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f8a:	b099      	sub	sp, #100	; 0x64
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f96:	b974      	cbnz	r4, 8009fb6 <_dtoa_r+0x36>
 8009f98:	2010      	movs	r0, #16
 8009f9a:	f000 fdf5 	bl	800ab88 <malloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6268      	str	r0, [r5, #36]	; 0x24
 8009fa2:	b920      	cbnz	r0, 8009fae <_dtoa_r+0x2e>
 8009fa4:	21ea      	movs	r1, #234	; 0xea
 8009fa6:	4ba8      	ldr	r3, [pc, #672]	; (800a248 <_dtoa_r+0x2c8>)
 8009fa8:	48a8      	ldr	r0, [pc, #672]	; (800a24c <_dtoa_r+0x2cc>)
 8009faa:	f7ff ff3d 	bl	8009e28 <__assert_func>
 8009fae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fb2:	6004      	str	r4, [r0, #0]
 8009fb4:	60c4      	str	r4, [r0, #12]
 8009fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	b151      	cbz	r1, 8009fd2 <_dtoa_r+0x52>
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4093      	lsls	r3, r2
 8009fc2:	604a      	str	r2, [r1, #4]
 8009fc4:	608b      	str	r3, [r1, #8]
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 fe34 	bl	800ac34 <_Bfree>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	1e3b      	subs	r3, r7, #0
 8009fd4:	bfaf      	iteee	ge
 8009fd6:	2300      	movge	r3, #0
 8009fd8:	2201      	movlt	r2, #1
 8009fda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fde:	9305      	strlt	r3, [sp, #20]
 8009fe0:	bfa8      	it	ge
 8009fe2:	f8c8 3000 	strge.w	r3, [r8]
 8009fe6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009fea:	4b99      	ldr	r3, [pc, #612]	; (800a250 <_dtoa_r+0x2d0>)
 8009fec:	bfb8      	it	lt
 8009fee:	f8c8 2000 	strlt.w	r2, [r8]
 8009ff2:	ea33 0309 	bics.w	r3, r3, r9
 8009ff6:	d119      	bne.n	800a02c <_dtoa_r+0xac>
 8009ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a004:	4333      	orrs	r3, r6
 800a006:	f000 857f 	beq.w	800ab08 <_dtoa_r+0xb88>
 800a00a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a00c:	b953      	cbnz	r3, 800a024 <_dtoa_r+0xa4>
 800a00e:	4b91      	ldr	r3, [pc, #580]	; (800a254 <_dtoa_r+0x2d4>)
 800a010:	e022      	b.n	800a058 <_dtoa_r+0xd8>
 800a012:	4b91      	ldr	r3, [pc, #580]	; (800a258 <_dtoa_r+0x2d8>)
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	3308      	adds	r3, #8
 800a018:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	9803      	ldr	r0, [sp, #12]
 800a01e:	b019      	add	sp, #100	; 0x64
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	4b8b      	ldr	r3, [pc, #556]	; (800a254 <_dtoa_r+0x2d4>)
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	3303      	adds	r3, #3
 800a02a:	e7f5      	b.n	800a018 <_dtoa_r+0x98>
 800a02c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a030:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a038:	2200      	movs	r2, #0
 800a03a:	2300      	movs	r3, #0
 800a03c:	f7f6 fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 800a040:	4680      	mov	r8, r0
 800a042:	b158      	cbz	r0, 800a05c <_dtoa_r+0xdc>
 800a044:	2301      	movs	r3, #1
 800a046:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8558 	beq.w	800ab02 <_dtoa_r+0xb82>
 800a052:	4882      	ldr	r0, [pc, #520]	; (800a25c <_dtoa_r+0x2dc>)
 800a054:	6018      	str	r0, [r3, #0]
 800a056:	1e43      	subs	r3, r0, #1
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	e7df      	b.n	800a01c <_dtoa_r+0x9c>
 800a05c:	ab16      	add	r3, sp, #88	; 0x58
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	ab17      	add	r3, sp, #92	; 0x5c
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4628      	mov	r0, r5
 800a066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a06a:	f001 f8c9 	bl	800b200 <__d2b>
 800a06e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a072:	4683      	mov	fp, r0
 800a074:	2c00      	cmp	r4, #0
 800a076:	d07f      	beq.n	800a178 <_dtoa_r+0x1f8>
 800a078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a086:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a08a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a08e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a092:	2200      	movs	r2, #0
 800a094:	4b72      	ldr	r3, [pc, #456]	; (800a260 <_dtoa_r+0x2e0>)
 800a096:	f7f6 f867 	bl	8000168 <__aeabi_dsub>
 800a09a:	a365      	add	r3, pc, #404	; (adr r3, 800a230 <_dtoa_r+0x2b0>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 fa1a 	bl	80004d8 <__aeabi_dmul>
 800a0a4:	a364      	add	r3, pc, #400	; (adr r3, 800a238 <_dtoa_r+0x2b8>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f85f 	bl	800016c <__adddf3>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	f7f6 f9a6 	bl	8000404 <__aeabi_i2d>
 800a0b8:	a361      	add	r3, pc, #388	; (adr r3, 800a240 <_dtoa_r+0x2c0>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 f84f 	bl	800016c <__adddf3>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	f7f6 fcb1 	bl	8000a38 <__aeabi_d2iz>
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4682      	mov	sl, r0
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 fc6c 	bl	80009bc <__aeabi_dcmplt>
 800a0e4:	b148      	cbz	r0, 800a0fa <_dtoa_r+0x17a>
 800a0e6:	4650      	mov	r0, sl
 800a0e8:	f7f6 f98c 	bl	8000404 <__aeabi_i2d>
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	f7f6 fc5a 	bl	80009a8 <__aeabi_dcmpeq>
 800a0f4:	b908      	cbnz	r0, 800a0fa <_dtoa_r+0x17a>
 800a0f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0fa:	f1ba 0f16 	cmp.w	sl, #22
 800a0fe:	d858      	bhi.n	800a1b2 <_dtoa_r+0x232>
 800a100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a104:	4b57      	ldr	r3, [pc, #348]	; (800a264 <_dtoa_r+0x2e4>)
 800a106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 fc55 	bl	80009bc <__aeabi_dcmplt>
 800a112:	2800      	cmp	r0, #0
 800a114:	d04f      	beq.n	800a1b6 <_dtoa_r+0x236>
 800a116:	2300      	movs	r3, #0
 800a118:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a11c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a11e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a120:	1b1c      	subs	r4, r3, r4
 800a122:	1e63      	subs	r3, r4, #1
 800a124:	9309      	str	r3, [sp, #36]	; 0x24
 800a126:	bf49      	itett	mi
 800a128:	f1c4 0301 	rsbmi	r3, r4, #1
 800a12c:	2300      	movpl	r3, #0
 800a12e:	9306      	strmi	r3, [sp, #24]
 800a130:	2300      	movmi	r3, #0
 800a132:	bf54      	ite	pl
 800a134:	9306      	strpl	r3, [sp, #24]
 800a136:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a138:	f1ba 0f00 	cmp.w	sl, #0
 800a13c:	db3d      	blt.n	800a1ba <_dtoa_r+0x23a>
 800a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a140:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a144:	4453      	add	r3, sl
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	2300      	movs	r3, #0
 800a14a:	930a      	str	r3, [sp, #40]	; 0x28
 800a14c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a14e:	2b09      	cmp	r3, #9
 800a150:	f200 808c 	bhi.w	800a26c <_dtoa_r+0x2ec>
 800a154:	2b05      	cmp	r3, #5
 800a156:	bfc4      	itt	gt
 800a158:	3b04      	subgt	r3, #4
 800a15a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a15c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a15e:	bfc8      	it	gt
 800a160:	2400      	movgt	r4, #0
 800a162:	f1a3 0302 	sub.w	r3, r3, #2
 800a166:	bfd8      	it	le
 800a168:	2401      	movle	r4, #1
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	f200 808a 	bhi.w	800a284 <_dtoa_r+0x304>
 800a170:	e8df f003 	tbb	[pc, r3]
 800a174:	5b4d4f2d 	.word	0x5b4d4f2d
 800a178:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a17c:	441c      	add	r4, r3
 800a17e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a182:	2b20      	cmp	r3, #32
 800a184:	bfc3      	ittte	gt
 800a186:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a18a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a18e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a192:	f1c3 0320 	rsble	r3, r3, #32
 800a196:	bfc6      	itte	gt
 800a198:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a19c:	4318      	orrgt	r0, r3
 800a19e:	fa06 f003 	lslle.w	r0, r6, r3
 800a1a2:	f7f6 f91f 	bl	80003e4 <__aeabi_ui2d>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a1ac:	3c01      	subs	r4, #1
 800a1ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1b0:	e76f      	b.n	800a092 <_dtoa_r+0x112>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7b2      	b.n	800a11c <_dtoa_r+0x19c>
 800a1b6:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1b8:	e7b1      	b.n	800a11e <_dtoa_r+0x19e>
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	eba3 030a 	sub.w	r3, r3, sl
 800a1c0:	9306      	str	r3, [sp, #24]
 800a1c2:	f1ca 0300 	rsb	r3, sl, #0
 800a1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	930e      	str	r3, [sp, #56]	; 0x38
 800a1cc:	e7be      	b.n	800a14c <_dtoa_r+0x1cc>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc58      	bgt.n	800a28a <_dtoa_r+0x30a>
 800a1d8:	f04f 0901 	mov.w	r9, #1
 800a1dc:	464b      	mov	r3, r9
 800a1de:	f8cd 9020 	str.w	r9, [sp, #32]
 800a1e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a1ea:	6042      	str	r2, [r0, #4]
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	f102 0614 	add.w	r6, r2, #20
 800a1f2:	429e      	cmp	r6, r3
 800a1f4:	6841      	ldr	r1, [r0, #4]
 800a1f6:	d94e      	bls.n	800a296 <_dtoa_r+0x316>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 fcdb 	bl	800abb4 <_Balloc>
 800a1fe:	9003      	str	r0, [sp, #12]
 800a200:	2800      	cmp	r0, #0
 800a202:	d14c      	bne.n	800a29e <_dtoa_r+0x31e>
 800a204:	4602      	mov	r2, r0
 800a206:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a20a:	4b17      	ldr	r3, [pc, #92]	; (800a268 <_dtoa_r+0x2e8>)
 800a20c:	e6cc      	b.n	8009fa8 <_dtoa_r+0x28>
 800a20e:	2301      	movs	r3, #1
 800a210:	e7de      	b.n	800a1d0 <_dtoa_r+0x250>
 800a212:	2300      	movs	r3, #0
 800a214:	930b      	str	r3, [sp, #44]	; 0x2c
 800a216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a218:	eb0a 0903 	add.w	r9, sl, r3
 800a21c:	f109 0301 	add.w	r3, r9, #1
 800a220:	2b01      	cmp	r3, #1
 800a222:	9308      	str	r3, [sp, #32]
 800a224:	bfb8      	it	lt
 800a226:	2301      	movlt	r3, #1
 800a228:	e7dd      	b.n	800a1e6 <_dtoa_r+0x266>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7f2      	b.n	800a214 <_dtoa_r+0x294>
 800a22e:	bf00      	nop
 800a230:	636f4361 	.word	0x636f4361
 800a234:	3fd287a7 	.word	0x3fd287a7
 800a238:	8b60c8b3 	.word	0x8b60c8b3
 800a23c:	3fc68a28 	.word	0x3fc68a28
 800a240:	509f79fb 	.word	0x509f79fb
 800a244:	3fd34413 	.word	0x3fd34413
 800a248:	0800c8a1 	.word	0x0800c8a1
 800a24c:	0800c8b8 	.word	0x0800c8b8
 800a250:	7ff00000 	.word	0x7ff00000
 800a254:	0800c89d 	.word	0x0800c89d
 800a258:	0800c894 	.word	0x0800c894
 800a25c:	0800c835 	.word	0x0800c835
 800a260:	3ff80000 	.word	0x3ff80000
 800a264:	0800c9a8 	.word	0x0800c9a8
 800a268:	0800c913 	.word	0x0800c913
 800a26c:	2401      	movs	r4, #1
 800a26e:	2300      	movs	r3, #0
 800a270:	940b      	str	r4, [sp, #44]	; 0x2c
 800a272:	9322      	str	r3, [sp, #136]	; 0x88
 800a274:	f04f 39ff 	mov.w	r9, #4294967295
 800a278:	2200      	movs	r2, #0
 800a27a:	2312      	movs	r3, #18
 800a27c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a280:	9223      	str	r2, [sp, #140]	; 0x8c
 800a282:	e7b0      	b.n	800a1e6 <_dtoa_r+0x266>
 800a284:	2301      	movs	r3, #1
 800a286:	930b      	str	r3, [sp, #44]	; 0x2c
 800a288:	e7f4      	b.n	800a274 <_dtoa_r+0x2f4>
 800a28a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a28e:	464b      	mov	r3, r9
 800a290:	f8cd 9020 	str.w	r9, [sp, #32]
 800a294:	e7a7      	b.n	800a1e6 <_dtoa_r+0x266>
 800a296:	3101      	adds	r1, #1
 800a298:	6041      	str	r1, [r0, #4]
 800a29a:	0052      	lsls	r2, r2, #1
 800a29c:	e7a7      	b.n	800a1ee <_dtoa_r+0x26e>
 800a29e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2a0:	9a03      	ldr	r2, [sp, #12]
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	2b0e      	cmp	r3, #14
 800a2a8:	f200 80a8 	bhi.w	800a3fc <_dtoa_r+0x47c>
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	f000 80a5 	beq.w	800a3fc <_dtoa_r+0x47c>
 800a2b2:	f1ba 0f00 	cmp.w	sl, #0
 800a2b6:	dd34      	ble.n	800a322 <_dtoa_r+0x3a2>
 800a2b8:	4a9a      	ldr	r2, [pc, #616]	; (800a524 <_dtoa_r+0x5a4>)
 800a2ba:	f00a 030f 	and.w	r3, sl, #15
 800a2be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a2d2:	d016      	beq.n	800a302 <_dtoa_r+0x382>
 800a2d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2d8:	4b93      	ldr	r3, [pc, #588]	; (800a528 <_dtoa_r+0x5a8>)
 800a2da:	2703      	movs	r7, #3
 800a2dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e0:	f7f6 fa24 	bl	800072c <__aeabi_ddiv>
 800a2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2e8:	f004 040f 	and.w	r4, r4, #15
 800a2ec:	4e8e      	ldr	r6, [pc, #568]	; (800a528 <_dtoa_r+0x5a8>)
 800a2ee:	b954      	cbnz	r4, 800a306 <_dtoa_r+0x386>
 800a2f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f8:	f7f6 fa18 	bl	800072c <__aeabi_ddiv>
 800a2fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a300:	e029      	b.n	800a356 <_dtoa_r+0x3d6>
 800a302:	2702      	movs	r7, #2
 800a304:	e7f2      	b.n	800a2ec <_dtoa_r+0x36c>
 800a306:	07e1      	lsls	r1, r4, #31
 800a308:	d508      	bpl.n	800a31c <_dtoa_r+0x39c>
 800a30a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a30e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a31a:	3701      	adds	r7, #1
 800a31c:	1064      	asrs	r4, r4, #1
 800a31e:	3608      	adds	r6, #8
 800a320:	e7e5      	b.n	800a2ee <_dtoa_r+0x36e>
 800a322:	f000 80a5 	beq.w	800a470 <_dtoa_r+0x4f0>
 800a326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a32a:	f1ca 0400 	rsb	r4, sl, #0
 800a32e:	4b7d      	ldr	r3, [pc, #500]	; (800a524 <_dtoa_r+0x5a4>)
 800a330:	f004 020f 	and.w	r2, r4, #15
 800a334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	f7f6 f8cc 	bl	80004d8 <__aeabi_dmul>
 800a340:	2702      	movs	r7, #2
 800a342:	2300      	movs	r3, #0
 800a344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a348:	4e77      	ldr	r6, [pc, #476]	; (800a528 <_dtoa_r+0x5a8>)
 800a34a:	1124      	asrs	r4, r4, #4
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	f040 8084 	bne.w	800a45a <_dtoa_r+0x4da>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d2      	bne.n	800a2fc <_dtoa_r+0x37c>
 800a356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 808b 	beq.w	800a474 <_dtoa_r+0x4f4>
 800a35e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a362:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a36a:	2200      	movs	r2, #0
 800a36c:	4b6f      	ldr	r3, [pc, #444]	; (800a52c <_dtoa_r+0x5ac>)
 800a36e:	f7f6 fb25 	bl	80009bc <__aeabi_dcmplt>
 800a372:	2800      	cmp	r0, #0
 800a374:	d07e      	beq.n	800a474 <_dtoa_r+0x4f4>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d07b      	beq.n	800a474 <_dtoa_r+0x4f4>
 800a37c:	f1b9 0f00 	cmp.w	r9, #0
 800a380:	dd38      	ble.n	800a3f4 <_dtoa_r+0x474>
 800a382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a386:	2200      	movs	r2, #0
 800a388:	4b69      	ldr	r3, [pc, #420]	; (800a530 <_dtoa_r+0x5b0>)
 800a38a:	f7f6 f8a5 	bl	80004d8 <__aeabi_dmul>
 800a38e:	464c      	mov	r4, r9
 800a390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a394:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a398:	3701      	adds	r7, #1
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7f6 f832 	bl	8000404 <__aeabi_i2d>
 800a3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a4:	f7f6 f898 	bl	80004d8 <__aeabi_dmul>
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	4b62      	ldr	r3, [pc, #392]	; (800a534 <_dtoa_r+0x5b4>)
 800a3ac:	f7f5 fede 	bl	800016c <__adddf3>
 800a3b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3b8:	9611      	str	r6, [sp, #68]	; 0x44
 800a3ba:	2c00      	cmp	r4, #0
 800a3bc:	d15d      	bne.n	800a47a <_dtoa_r+0x4fa>
 800a3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4b5c      	ldr	r3, [pc, #368]	; (800a538 <_dtoa_r+0x5b8>)
 800a3c6:	f7f5 fecf 	bl	8000168 <__aeabi_dsub>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3d2:	4633      	mov	r3, r6
 800a3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3d6:	f7f6 fb0f 	bl	80009f8 <__aeabi_dcmpgt>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f040 829c 	bne.w	800a918 <_dtoa_r+0x998>
 800a3e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a3ea:	f7f6 fae7 	bl	80009bc <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f040 8290 	bne.w	800a914 <_dtoa_r+0x994>
 800a3f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a3f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f2c0 8152 	blt.w	800a6a8 <_dtoa_r+0x728>
 800a404:	f1ba 0f0e 	cmp.w	sl, #14
 800a408:	f300 814e 	bgt.w	800a6a8 <_dtoa_r+0x728>
 800a40c:	4b45      	ldr	r3, [pc, #276]	; (800a524 <_dtoa_r+0x5a4>)
 800a40e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a412:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a416:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a41a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f280 80db 	bge.w	800a5d8 <_dtoa_r+0x658>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f300 80d7 	bgt.w	800a5d8 <_dtoa_r+0x658>
 800a42a:	f040 8272 	bne.w	800a912 <_dtoa_r+0x992>
 800a42e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a432:	2200      	movs	r2, #0
 800a434:	4b40      	ldr	r3, [pc, #256]	; (800a538 <_dtoa_r+0x5b8>)
 800a436:	f7f6 f84f 	bl	80004d8 <__aeabi_dmul>
 800a43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43e:	f7f6 fad1 	bl	80009e4 <__aeabi_dcmpge>
 800a442:	9c08      	ldr	r4, [sp, #32]
 800a444:	4626      	mov	r6, r4
 800a446:	2800      	cmp	r0, #0
 800a448:	f040 8248 	bne.w	800a8dc <_dtoa_r+0x95c>
 800a44c:	2331      	movs	r3, #49	; 0x31
 800a44e:	9f03      	ldr	r7, [sp, #12]
 800a450:	f10a 0a01 	add.w	sl, sl, #1
 800a454:	f807 3b01 	strb.w	r3, [r7], #1
 800a458:	e244      	b.n	800a8e4 <_dtoa_r+0x964>
 800a45a:	07e2      	lsls	r2, r4, #31
 800a45c:	d505      	bpl.n	800a46a <_dtoa_r+0x4ea>
 800a45e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a462:	f7f6 f839 	bl	80004d8 <__aeabi_dmul>
 800a466:	2301      	movs	r3, #1
 800a468:	3701      	adds	r7, #1
 800a46a:	1064      	asrs	r4, r4, #1
 800a46c:	3608      	adds	r6, #8
 800a46e:	e76d      	b.n	800a34c <_dtoa_r+0x3cc>
 800a470:	2702      	movs	r7, #2
 800a472:	e770      	b.n	800a356 <_dtoa_r+0x3d6>
 800a474:	46d0      	mov	r8, sl
 800a476:	9c08      	ldr	r4, [sp, #32]
 800a478:	e78f      	b.n	800a39a <_dtoa_r+0x41a>
 800a47a:	9903      	ldr	r1, [sp, #12]
 800a47c:	4b29      	ldr	r3, [pc, #164]	; (800a524 <_dtoa_r+0x5a4>)
 800a47e:	4421      	add	r1, r4
 800a480:	9112      	str	r1, [sp, #72]	; 0x48
 800a482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a488:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a48c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a490:	2900      	cmp	r1, #0
 800a492:	d055      	beq.n	800a540 <_dtoa_r+0x5c0>
 800a494:	2000      	movs	r0, #0
 800a496:	4929      	ldr	r1, [pc, #164]	; (800a53c <_dtoa_r+0x5bc>)
 800a498:	f7f6 f948 	bl	800072c <__aeabi_ddiv>
 800a49c:	463b      	mov	r3, r7
 800a49e:	4632      	mov	r2, r6
 800a4a0:	f7f5 fe62 	bl	8000168 <__aeabi_dsub>
 800a4a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4a8:	9f03      	ldr	r7, [sp, #12]
 800a4aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ae:	f7f6 fac3 	bl	8000a38 <__aeabi_d2iz>
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	f7f5 ffa6 	bl	8000404 <__aeabi_i2d>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4c0:	f7f5 fe52 	bl	8000168 <__aeabi_dsub>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	3430      	adds	r4, #48	; 0x30
 800a4ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4d2:	f807 4b01 	strb.w	r4, [r7], #1
 800a4d6:	f7f6 fa71 	bl	80009bc <__aeabi_dcmplt>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d174      	bne.n	800a5c8 <_dtoa_r+0x648>
 800a4de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	4911      	ldr	r1, [pc, #68]	; (800a52c <_dtoa_r+0x5ac>)
 800a4e6:	f7f5 fe3f 	bl	8000168 <__aeabi_dsub>
 800a4ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4ee:	f7f6 fa65 	bl	80009bc <__aeabi_dcmplt>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f040 80b7 	bne.w	800a666 <_dtoa_r+0x6e6>
 800a4f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4fa:	429f      	cmp	r7, r3
 800a4fc:	f43f af7a 	beq.w	800a3f4 <_dtoa_r+0x474>
 800a500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a504:	2200      	movs	r2, #0
 800a506:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <_dtoa_r+0x5b0>)
 800a508:	f7f5 ffe6 	bl	80004d8 <__aeabi_dmul>
 800a50c:	2200      	movs	r2, #0
 800a50e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a516:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_dtoa_r+0x5b0>)
 800a518:	f7f5 ffde 	bl	80004d8 <__aeabi_dmul>
 800a51c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a520:	e7c3      	b.n	800a4aa <_dtoa_r+0x52a>
 800a522:	bf00      	nop
 800a524:	0800c9a8 	.word	0x0800c9a8
 800a528:	0800c980 	.word	0x0800c980
 800a52c:	3ff00000 	.word	0x3ff00000
 800a530:	40240000 	.word	0x40240000
 800a534:	401c0000 	.word	0x401c0000
 800a538:	40140000 	.word	0x40140000
 800a53c:	3fe00000 	.word	0x3fe00000
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f5 ffc8 	bl	80004d8 <__aeabi_dmul>
 800a548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a54a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a54e:	9c03      	ldr	r4, [sp, #12]
 800a550:	9314      	str	r3, [sp, #80]	; 0x50
 800a552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a556:	f7f6 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800a55a:	9015      	str	r0, [sp, #84]	; 0x54
 800a55c:	f7f5 ff52 	bl	8000404 <__aeabi_i2d>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a568:	f7f5 fdfe 	bl	8000168 <__aeabi_dsub>
 800a56c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a56e:	4606      	mov	r6, r0
 800a570:	3330      	adds	r3, #48	; 0x30
 800a572:	f804 3b01 	strb.w	r3, [r4], #1
 800a576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a578:	460f      	mov	r7, r1
 800a57a:	429c      	cmp	r4, r3
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	d124      	bne.n	800a5cc <_dtoa_r+0x64c>
 800a582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a586:	4bb0      	ldr	r3, [pc, #704]	; (800a848 <_dtoa_r+0x8c8>)
 800a588:	f7f5 fdf0 	bl	800016c <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 fa30 	bl	80009f8 <__aeabi_dcmpgt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d163      	bne.n	800a664 <_dtoa_r+0x6e4>
 800a59c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	49a9      	ldr	r1, [pc, #676]	; (800a848 <_dtoa_r+0x8c8>)
 800a5a4:	f7f5 fde0 	bl	8000168 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f6 fa04 	bl	80009bc <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f43f af1d 	beq.w	800a3f4 <_dtoa_r+0x474>
 800a5ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5bc:	1e7b      	subs	r3, r7, #1
 800a5be:	9314      	str	r3, [sp, #80]	; 0x50
 800a5c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5c4:	2b30      	cmp	r3, #48	; 0x30
 800a5c6:	d0f8      	beq.n	800a5ba <_dtoa_r+0x63a>
 800a5c8:	46c2      	mov	sl, r8
 800a5ca:	e03b      	b.n	800a644 <_dtoa_r+0x6c4>
 800a5cc:	4b9f      	ldr	r3, [pc, #636]	; (800a84c <_dtoa_r+0x8cc>)
 800a5ce:	f7f5 ff83 	bl	80004d8 <__aeabi_dmul>
 800a5d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d6:	e7bc      	b.n	800a552 <_dtoa_r+0x5d2>
 800a5d8:	9f03      	ldr	r7, [sp, #12]
 800a5da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a5de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f6 f8a1 	bl	800072c <__aeabi_ddiv>
 800a5ea:	f7f6 fa25 	bl	8000a38 <__aeabi_d2iz>
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	f7f5 ff08 	bl	8000404 <__aeabi_i2d>
 800a5f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5f8:	f7f5 ff6e 	bl	80004d8 <__aeabi_dmul>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4640      	mov	r0, r8
 800a602:	4649      	mov	r1, r9
 800a604:	f7f5 fdb0 	bl	8000168 <__aeabi_dsub>
 800a608:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a60c:	f807 6b01 	strb.w	r6, [r7], #1
 800a610:	9e03      	ldr	r6, [sp, #12]
 800a612:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a616:	1bbe      	subs	r6, r7, r6
 800a618:	45b4      	cmp	ip, r6
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	d136      	bne.n	800a68e <_dtoa_r+0x70e>
 800a620:	f7f5 fda4 	bl	800016c <__adddf3>
 800a624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a628:	4680      	mov	r8, r0
 800a62a:	4689      	mov	r9, r1
 800a62c:	f7f6 f9e4 	bl	80009f8 <__aeabi_dcmpgt>
 800a630:	bb58      	cbnz	r0, 800a68a <_dtoa_r+0x70a>
 800a632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f6 f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800a63e:	b108      	cbz	r0, 800a644 <_dtoa_r+0x6c4>
 800a640:	07e1      	lsls	r1, r4, #31
 800a642:	d422      	bmi.n	800a68a <_dtoa_r+0x70a>
 800a644:	4628      	mov	r0, r5
 800a646:	4659      	mov	r1, fp
 800a648:	f000 faf4 	bl	800ac34 <_Bfree>
 800a64c:	2300      	movs	r3, #0
 800a64e:	703b      	strb	r3, [r7, #0]
 800a650:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a652:	f10a 0001 	add.w	r0, sl, #1
 800a656:	6018      	str	r0, [r3, #0]
 800a658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f43f acde 	beq.w	800a01c <_dtoa_r+0x9c>
 800a660:	601f      	str	r7, [r3, #0]
 800a662:	e4db      	b.n	800a01c <_dtoa_r+0x9c>
 800a664:	4627      	mov	r7, r4
 800a666:	463b      	mov	r3, r7
 800a668:	461f      	mov	r7, r3
 800a66a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a66e:	2a39      	cmp	r2, #57	; 0x39
 800a670:	d107      	bne.n	800a682 <_dtoa_r+0x702>
 800a672:	9a03      	ldr	r2, [sp, #12]
 800a674:	429a      	cmp	r2, r3
 800a676:	d1f7      	bne.n	800a668 <_dtoa_r+0x6e8>
 800a678:	2230      	movs	r2, #48	; 0x30
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	f108 0801 	add.w	r8, r8, #1
 800a680:	700a      	strb	r2, [r1, #0]
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	3201      	adds	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	e79e      	b.n	800a5c8 <_dtoa_r+0x648>
 800a68a:	46d0      	mov	r8, sl
 800a68c:	e7eb      	b.n	800a666 <_dtoa_r+0x6e6>
 800a68e:	2200      	movs	r2, #0
 800a690:	4b6e      	ldr	r3, [pc, #440]	; (800a84c <_dtoa_r+0x8cc>)
 800a692:	f7f5 ff21 	bl	80004d8 <__aeabi_dmul>
 800a696:	2200      	movs	r2, #0
 800a698:	2300      	movs	r3, #0
 800a69a:	4680      	mov	r8, r0
 800a69c:	4689      	mov	r9, r1
 800a69e:	f7f6 f983 	bl	80009a8 <__aeabi_dcmpeq>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d09b      	beq.n	800a5de <_dtoa_r+0x65e>
 800a6a6:	e7cd      	b.n	800a644 <_dtoa_r+0x6c4>
 800a6a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	f000 80d0 	beq.w	800a850 <_dtoa_r+0x8d0>
 800a6b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6b2:	2a01      	cmp	r2, #1
 800a6b4:	f300 80ae 	bgt.w	800a814 <_dtoa_r+0x894>
 800a6b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	f000 80a6 	beq.w	800a80c <_dtoa_r+0x88c>
 800a6c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6c6:	9f06      	ldr	r7, [sp, #24]
 800a6c8:	9a06      	ldr	r2, [sp, #24]
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	441a      	add	r2, r3
 800a6ce:	9206      	str	r2, [sp, #24]
 800a6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	441a      	add	r2, r3
 800a6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6d8:	f000 fb62 	bl	800ada0 <__i2b>
 800a6dc:	4606      	mov	r6, r0
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	dd0c      	ble.n	800a6fc <_dtoa_r+0x77c>
 800a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dd09      	ble.n	800a6fc <_dtoa_r+0x77c>
 800a6e8:	42bb      	cmp	r3, r7
 800a6ea:	bfa8      	it	ge
 800a6ec:	463b      	movge	r3, r7
 800a6ee:	9a06      	ldr	r2, [sp, #24]
 800a6f0:	1aff      	subs	r7, r7, r3
 800a6f2:	1ad2      	subs	r2, r2, r3
 800a6f4:	9206      	str	r2, [sp, #24]
 800a6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fe:	b1f3      	cbz	r3, 800a73e <_dtoa_r+0x7be>
 800a700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80a8 	beq.w	800a858 <_dtoa_r+0x8d8>
 800a708:	2c00      	cmp	r4, #0
 800a70a:	dd10      	ble.n	800a72e <_dtoa_r+0x7ae>
 800a70c:	4631      	mov	r1, r6
 800a70e:	4622      	mov	r2, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 fc03 	bl	800af1c <__pow5mult>
 800a716:	465a      	mov	r2, fp
 800a718:	4601      	mov	r1, r0
 800a71a:	4606      	mov	r6, r0
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 fb55 	bl	800adcc <__multiply>
 800a722:	4680      	mov	r8, r0
 800a724:	4659      	mov	r1, fp
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fa84 	bl	800ac34 <_Bfree>
 800a72c:	46c3      	mov	fp, r8
 800a72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a730:	1b1a      	subs	r2, r3, r4
 800a732:	d004      	beq.n	800a73e <_dtoa_r+0x7be>
 800a734:	4659      	mov	r1, fp
 800a736:	4628      	mov	r0, r5
 800a738:	f000 fbf0 	bl	800af1c <__pow5mult>
 800a73c:	4683      	mov	fp, r0
 800a73e:	2101      	movs	r1, #1
 800a740:	4628      	mov	r0, r5
 800a742:	f000 fb2d 	bl	800ada0 <__i2b>
 800a746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a748:	4604      	mov	r4, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f340 8086 	ble.w	800a85c <_dtoa_r+0x8dc>
 800a750:	461a      	mov	r2, r3
 800a752:	4601      	mov	r1, r0
 800a754:	4628      	mov	r0, r5
 800a756:	f000 fbe1 	bl	800af1c <__pow5mult>
 800a75a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a75c:	4604      	mov	r4, r0
 800a75e:	2b01      	cmp	r3, #1
 800a760:	dd7f      	ble.n	800a862 <_dtoa_r+0x8e2>
 800a762:	f04f 0800 	mov.w	r8, #0
 800a766:	6923      	ldr	r3, [r4, #16]
 800a768:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a76c:	6918      	ldr	r0, [r3, #16]
 800a76e:	f000 fac9 	bl	800ad04 <__hi0bits>
 800a772:	f1c0 0020 	rsb	r0, r0, #32
 800a776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a778:	4418      	add	r0, r3
 800a77a:	f010 001f 	ands.w	r0, r0, #31
 800a77e:	f000 8092 	beq.w	800a8a6 <_dtoa_r+0x926>
 800a782:	f1c0 0320 	rsb	r3, r0, #32
 800a786:	2b04      	cmp	r3, #4
 800a788:	f340 808a 	ble.w	800a8a0 <_dtoa_r+0x920>
 800a78c:	f1c0 001c 	rsb	r0, r0, #28
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	4407      	add	r7, r0
 800a794:	4403      	add	r3, r0
 800a796:	9306      	str	r3, [sp, #24]
 800a798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a79a:	4403      	add	r3, r0
 800a79c:	9309      	str	r3, [sp, #36]	; 0x24
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dd05      	ble.n	800a7b0 <_dtoa_r+0x830>
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 fc11 	bl	800afd0 <__lshift>
 800a7ae:	4683      	mov	fp, r0
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd05      	ble.n	800a7c2 <_dtoa_r+0x842>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 fc08 	bl	800afd0 <__lshift>
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d070      	beq.n	800a8aa <_dtoa_r+0x92a>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4658      	mov	r0, fp
 800a7cc:	f000 fc70 	bl	800b0b0 <__mcmp>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	da6a      	bge.n	800a8aa <_dtoa_r+0x92a>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	220a      	movs	r2, #10
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f000 fa4c 	bl	800ac78 <__multadd>
 800a7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e2:	4683      	mov	fp, r0
 800a7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8194 	beq.w	800ab16 <_dtoa_r+0xb96>
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	220a      	movs	r2, #10
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 fa3f 	bl	800ac78 <__multadd>
 800a7fa:	f1b9 0f00 	cmp.w	r9, #0
 800a7fe:	4606      	mov	r6, r0
 800a800:	f300 8093 	bgt.w	800a92a <_dtoa_r+0x9aa>
 800a804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a806:	2b02      	cmp	r3, #2
 800a808:	dc57      	bgt.n	800a8ba <_dtoa_r+0x93a>
 800a80a:	e08e      	b.n	800a92a <_dtoa_r+0x9aa>
 800a80c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a80e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a812:	e757      	b.n	800a6c4 <_dtoa_r+0x744>
 800a814:	9b08      	ldr	r3, [sp, #32]
 800a816:	1e5c      	subs	r4, r3, #1
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	42a3      	cmp	r3, r4
 800a81c:	bfb7      	itett	lt
 800a81e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a820:	1b1c      	subge	r4, r3, r4
 800a822:	1ae2      	sublt	r2, r4, r3
 800a824:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a826:	bfbe      	ittt	lt
 800a828:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a82a:	189b      	addlt	r3, r3, r2
 800a82c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a82e:	9b08      	ldr	r3, [sp, #32]
 800a830:	bfb8      	it	lt
 800a832:	2400      	movlt	r4, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	bfbb      	ittet	lt
 800a838:	9b06      	ldrlt	r3, [sp, #24]
 800a83a:	9a08      	ldrlt	r2, [sp, #32]
 800a83c:	9f06      	ldrge	r7, [sp, #24]
 800a83e:	1a9f      	sublt	r7, r3, r2
 800a840:	bfac      	ite	ge
 800a842:	9b08      	ldrge	r3, [sp, #32]
 800a844:	2300      	movlt	r3, #0
 800a846:	e73f      	b.n	800a6c8 <_dtoa_r+0x748>
 800a848:	3fe00000 	.word	0x3fe00000
 800a84c:	40240000 	.word	0x40240000
 800a850:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a852:	9f06      	ldr	r7, [sp, #24]
 800a854:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a856:	e742      	b.n	800a6de <_dtoa_r+0x75e>
 800a858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a85a:	e76b      	b.n	800a734 <_dtoa_r+0x7b4>
 800a85c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a85e:	2b01      	cmp	r3, #1
 800a860:	dc19      	bgt.n	800a896 <_dtoa_r+0x916>
 800a862:	9b04      	ldr	r3, [sp, #16]
 800a864:	b9bb      	cbnz	r3, 800a896 <_dtoa_r+0x916>
 800a866:	9b05      	ldr	r3, [sp, #20]
 800a868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a86c:	b99b      	cbnz	r3, 800a896 <_dtoa_r+0x916>
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a874:	0d1b      	lsrs	r3, r3, #20
 800a876:	051b      	lsls	r3, r3, #20
 800a878:	b183      	cbz	r3, 800a89c <_dtoa_r+0x91c>
 800a87a:	f04f 0801 	mov.w	r8, #1
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	3301      	adds	r3, #1
 800a882:	9306      	str	r3, [sp, #24]
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	3301      	adds	r3, #1
 800a888:	9309      	str	r3, [sp, #36]	; 0x24
 800a88a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f47f af6a 	bne.w	800a766 <_dtoa_r+0x7e6>
 800a892:	2001      	movs	r0, #1
 800a894:	e76f      	b.n	800a776 <_dtoa_r+0x7f6>
 800a896:	f04f 0800 	mov.w	r8, #0
 800a89a:	e7f6      	b.n	800a88a <_dtoa_r+0x90a>
 800a89c:	4698      	mov	r8, r3
 800a89e:	e7f4      	b.n	800a88a <_dtoa_r+0x90a>
 800a8a0:	f43f af7d 	beq.w	800a79e <_dtoa_r+0x81e>
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	301c      	adds	r0, #28
 800a8a8:	e772      	b.n	800a790 <_dtoa_r+0x810>
 800a8aa:	9b08      	ldr	r3, [sp, #32]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dc36      	bgt.n	800a91e <_dtoa_r+0x99e>
 800a8b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	dd33      	ble.n	800a91e <_dtoa_r+0x99e>
 800a8b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	d10d      	bne.n	800a8dc <_dtoa_r+0x95c>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 f9d6 	bl	800ac78 <__multadd>
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4658      	mov	r0, fp
 800a8d2:	f000 fbed 	bl	800b0b0 <__mcmp>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f73f adb8 	bgt.w	800a44c <_dtoa_r+0x4cc>
 800a8dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8de:	9f03      	ldr	r7, [sp, #12]
 800a8e0:	ea6f 0a03 	mvn.w	sl, r3
 800a8e4:	f04f 0800 	mov.w	r8, #0
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 f9a2 	bl	800ac34 <_Bfree>
 800a8f0:	2e00      	cmp	r6, #0
 800a8f2:	f43f aea7 	beq.w	800a644 <_dtoa_r+0x6c4>
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	d005      	beq.n	800a908 <_dtoa_r+0x988>
 800a8fc:	45b0      	cmp	r8, r6
 800a8fe:	d003      	beq.n	800a908 <_dtoa_r+0x988>
 800a900:	4641      	mov	r1, r8
 800a902:	4628      	mov	r0, r5
 800a904:	f000 f996 	bl	800ac34 <_Bfree>
 800a908:	4631      	mov	r1, r6
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 f992 	bl	800ac34 <_Bfree>
 800a910:	e698      	b.n	800a644 <_dtoa_r+0x6c4>
 800a912:	2400      	movs	r4, #0
 800a914:	4626      	mov	r6, r4
 800a916:	e7e1      	b.n	800a8dc <_dtoa_r+0x95c>
 800a918:	46c2      	mov	sl, r8
 800a91a:	4626      	mov	r6, r4
 800a91c:	e596      	b.n	800a44c <_dtoa_r+0x4cc>
 800a91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 80fd 	beq.w	800ab24 <_dtoa_r+0xba4>
 800a92a:	2f00      	cmp	r7, #0
 800a92c:	dd05      	ble.n	800a93a <_dtoa_r+0x9ba>
 800a92e:	4631      	mov	r1, r6
 800a930:	463a      	mov	r2, r7
 800a932:	4628      	mov	r0, r5
 800a934:	f000 fb4c 	bl	800afd0 <__lshift>
 800a938:	4606      	mov	r6, r0
 800a93a:	f1b8 0f00 	cmp.w	r8, #0
 800a93e:	d05c      	beq.n	800a9fa <_dtoa_r+0xa7a>
 800a940:	4628      	mov	r0, r5
 800a942:	6871      	ldr	r1, [r6, #4]
 800a944:	f000 f936 	bl	800abb4 <_Balloc>
 800a948:	4607      	mov	r7, r0
 800a94a:	b928      	cbnz	r0, 800a958 <_dtoa_r+0x9d8>
 800a94c:	4602      	mov	r2, r0
 800a94e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a952:	4b7f      	ldr	r3, [pc, #508]	; (800ab50 <_dtoa_r+0xbd0>)
 800a954:	f7ff bb28 	b.w	8009fa8 <_dtoa_r+0x28>
 800a958:	6932      	ldr	r2, [r6, #16]
 800a95a:	f106 010c 	add.w	r1, r6, #12
 800a95e:	3202      	adds	r2, #2
 800a960:	0092      	lsls	r2, r2, #2
 800a962:	300c      	adds	r0, #12
 800a964:	f7fe fdca 	bl	80094fc <memcpy>
 800a968:	2201      	movs	r2, #1
 800a96a:	4639      	mov	r1, r7
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 fb2f 	bl	800afd0 <__lshift>
 800a972:	46b0      	mov	r8, r6
 800a974:	4606      	mov	r6, r0
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	3301      	adds	r3, #1
 800a97a:	9308      	str	r3, [sp, #32]
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	444b      	add	r3, r9
 800a980:	930a      	str	r3, [sp, #40]	; 0x28
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	9309      	str	r3, [sp, #36]	; 0x24
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	4621      	mov	r1, r4
 800a98e:	3b01      	subs	r3, #1
 800a990:	4658      	mov	r0, fp
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	f7ff fa66 	bl	8009e64 <quorem>
 800a998:	4603      	mov	r3, r0
 800a99a:	4641      	mov	r1, r8
 800a99c:	3330      	adds	r3, #48	; 0x30
 800a99e:	9006      	str	r0, [sp, #24]
 800a9a0:	4658      	mov	r0, fp
 800a9a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a4:	f000 fb84 	bl	800b0b0 <__mcmp>
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	4681      	mov	r9, r0
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f000 fb9a 	bl	800b0e8 <__mdiff>
 800a9b4:	68c2      	ldr	r2, [r0, #12]
 800a9b6:	4607      	mov	r7, r0
 800a9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ba:	bb02      	cbnz	r2, 800a9fe <_dtoa_r+0xa7e>
 800a9bc:	4601      	mov	r1, r0
 800a9be:	4658      	mov	r0, fp
 800a9c0:	f000 fb76 	bl	800b0b0 <__mcmp>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a9d0:	f000 f930 	bl	800ac34 <_Bfree>
 800a9d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9d8:	9f08      	ldr	r7, [sp, #32]
 800a9da:	ea43 0102 	orr.w	r1, r3, r2
 800a9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e4:	d10d      	bne.n	800aa02 <_dtoa_r+0xa82>
 800a9e6:	2b39      	cmp	r3, #57	; 0x39
 800a9e8:	d029      	beq.n	800aa3e <_dtoa_r+0xabe>
 800a9ea:	f1b9 0f00 	cmp.w	r9, #0
 800a9ee:	dd01      	ble.n	800a9f4 <_dtoa_r+0xa74>
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	3331      	adds	r3, #49	; 0x31
 800a9f4:	9a04      	ldr	r2, [sp, #16]
 800a9f6:	7013      	strb	r3, [r2, #0]
 800a9f8:	e776      	b.n	800a8e8 <_dtoa_r+0x968>
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	e7b9      	b.n	800a972 <_dtoa_r+0x9f2>
 800a9fe:	2201      	movs	r2, #1
 800aa00:	e7e2      	b.n	800a9c8 <_dtoa_r+0xa48>
 800aa02:	f1b9 0f00 	cmp.w	r9, #0
 800aa06:	db06      	blt.n	800aa16 <_dtoa_r+0xa96>
 800aa08:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa0a:	ea41 0909 	orr.w	r9, r1, r9
 800aa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa10:	ea59 0101 	orrs.w	r1, r9, r1
 800aa14:	d120      	bne.n	800aa58 <_dtoa_r+0xad8>
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	ddec      	ble.n	800a9f4 <_dtoa_r+0xa74>
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	4628      	mov	r0, r5
 800aa20:	9308      	str	r3, [sp, #32]
 800aa22:	f000 fad5 	bl	800afd0 <__lshift>
 800aa26:	4621      	mov	r1, r4
 800aa28:	4683      	mov	fp, r0
 800aa2a:	f000 fb41 	bl	800b0b0 <__mcmp>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	9b08      	ldr	r3, [sp, #32]
 800aa32:	dc02      	bgt.n	800aa3a <_dtoa_r+0xaba>
 800aa34:	d1de      	bne.n	800a9f4 <_dtoa_r+0xa74>
 800aa36:	07da      	lsls	r2, r3, #31
 800aa38:	d5dc      	bpl.n	800a9f4 <_dtoa_r+0xa74>
 800aa3a:	2b39      	cmp	r3, #57	; 0x39
 800aa3c:	d1d8      	bne.n	800a9f0 <_dtoa_r+0xa70>
 800aa3e:	2339      	movs	r3, #57	; 0x39
 800aa40:	9a04      	ldr	r2, [sp, #16]
 800aa42:	7013      	strb	r3, [r2, #0]
 800aa44:	463b      	mov	r3, r7
 800aa46:	461f      	mov	r7, r3
 800aa48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	2a39      	cmp	r2, #57	; 0x39
 800aa50:	d050      	beq.n	800aaf4 <_dtoa_r+0xb74>
 800aa52:	3201      	adds	r2, #1
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	e747      	b.n	800a8e8 <_dtoa_r+0x968>
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	dd03      	ble.n	800aa64 <_dtoa_r+0xae4>
 800aa5c:	2b39      	cmp	r3, #57	; 0x39
 800aa5e:	d0ee      	beq.n	800aa3e <_dtoa_r+0xabe>
 800aa60:	3301      	adds	r3, #1
 800aa62:	e7c7      	b.n	800a9f4 <_dtoa_r+0xa74>
 800aa64:	9a08      	ldr	r2, [sp, #32]
 800aa66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa68:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa6c:	428a      	cmp	r2, r1
 800aa6e:	d02a      	beq.n	800aac6 <_dtoa_r+0xb46>
 800aa70:	4659      	mov	r1, fp
 800aa72:	2300      	movs	r3, #0
 800aa74:	220a      	movs	r2, #10
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 f8fe 	bl	800ac78 <__multadd>
 800aa7c:	45b0      	cmp	r8, r6
 800aa7e:	4683      	mov	fp, r0
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	f04f 020a 	mov.w	r2, #10
 800aa88:	4641      	mov	r1, r8
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	d107      	bne.n	800aa9e <_dtoa_r+0xb1e>
 800aa8e:	f000 f8f3 	bl	800ac78 <__multadd>
 800aa92:	4680      	mov	r8, r0
 800aa94:	4606      	mov	r6, r0
 800aa96:	9b08      	ldr	r3, [sp, #32]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	9308      	str	r3, [sp, #32]
 800aa9c:	e775      	b.n	800a98a <_dtoa_r+0xa0a>
 800aa9e:	f000 f8eb 	bl	800ac78 <__multadd>
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	220a      	movs	r2, #10
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 f8e4 	bl	800ac78 <__multadd>
 800aab0:	4606      	mov	r6, r0
 800aab2:	e7f0      	b.n	800aa96 <_dtoa_r+0xb16>
 800aab4:	f1b9 0f00 	cmp.w	r9, #0
 800aab8:	bfcc      	ite	gt
 800aaba:	464f      	movgt	r7, r9
 800aabc:	2701      	movle	r7, #1
 800aabe:	f04f 0800 	mov.w	r8, #0
 800aac2:	9a03      	ldr	r2, [sp, #12]
 800aac4:	4417      	add	r7, r2
 800aac6:	4659      	mov	r1, fp
 800aac8:	2201      	movs	r2, #1
 800aaca:	4628      	mov	r0, r5
 800aacc:	9308      	str	r3, [sp, #32]
 800aace:	f000 fa7f 	bl	800afd0 <__lshift>
 800aad2:	4621      	mov	r1, r4
 800aad4:	4683      	mov	fp, r0
 800aad6:	f000 faeb 	bl	800b0b0 <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	dcb2      	bgt.n	800aa44 <_dtoa_r+0xac4>
 800aade:	d102      	bne.n	800aae6 <_dtoa_r+0xb66>
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	07db      	lsls	r3, r3, #31
 800aae4:	d4ae      	bmi.n	800aa44 <_dtoa_r+0xac4>
 800aae6:	463b      	mov	r3, r7
 800aae8:	461f      	mov	r7, r3
 800aaea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaee:	2a30      	cmp	r2, #48	; 0x30
 800aaf0:	d0fa      	beq.n	800aae8 <_dtoa_r+0xb68>
 800aaf2:	e6f9      	b.n	800a8e8 <_dtoa_r+0x968>
 800aaf4:	9a03      	ldr	r2, [sp, #12]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d1a5      	bne.n	800aa46 <_dtoa_r+0xac6>
 800aafa:	2331      	movs	r3, #49	; 0x31
 800aafc:	f10a 0a01 	add.w	sl, sl, #1
 800ab00:	e779      	b.n	800a9f6 <_dtoa_r+0xa76>
 800ab02:	4b14      	ldr	r3, [pc, #80]	; (800ab54 <_dtoa_r+0xbd4>)
 800ab04:	f7ff baa8 	b.w	800a058 <_dtoa_r+0xd8>
 800ab08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f47f aa81 	bne.w	800a012 <_dtoa_r+0x92>
 800ab10:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <_dtoa_r+0xbd8>)
 800ab12:	f7ff baa1 	b.w	800a058 <_dtoa_r+0xd8>
 800ab16:	f1b9 0f00 	cmp.w	r9, #0
 800ab1a:	dc03      	bgt.n	800ab24 <_dtoa_r+0xba4>
 800ab1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	f73f aecb 	bgt.w	800a8ba <_dtoa_r+0x93a>
 800ab24:	9f03      	ldr	r7, [sp, #12]
 800ab26:	4621      	mov	r1, r4
 800ab28:	4658      	mov	r0, fp
 800ab2a:	f7ff f99b 	bl	8009e64 <quorem>
 800ab2e:	9a03      	ldr	r2, [sp, #12]
 800ab30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab34:	f807 3b01 	strb.w	r3, [r7], #1
 800ab38:	1aba      	subs	r2, r7, r2
 800ab3a:	4591      	cmp	r9, r2
 800ab3c:	ddba      	ble.n	800aab4 <_dtoa_r+0xb34>
 800ab3e:	4659      	mov	r1, fp
 800ab40:	2300      	movs	r3, #0
 800ab42:	220a      	movs	r2, #10
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f897 	bl	800ac78 <__multadd>
 800ab4a:	4683      	mov	fp, r0
 800ab4c:	e7eb      	b.n	800ab26 <_dtoa_r+0xba6>
 800ab4e:	bf00      	nop
 800ab50:	0800c913 	.word	0x0800c913
 800ab54:	0800c834 	.word	0x0800c834
 800ab58:	0800c894 	.word	0x0800c894

0800ab5c <fiprintf>:
 800ab5c:	b40e      	push	{r1, r2, r3}
 800ab5e:	b503      	push	{r0, r1, lr}
 800ab60:	4601      	mov	r1, r0
 800ab62:	ab03      	add	r3, sp, #12
 800ab64:	4805      	ldr	r0, [pc, #20]	; (800ab7c <fiprintf+0x20>)
 800ab66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6a:	6800      	ldr	r0, [r0, #0]
 800ab6c:	9301      	str	r3, [sp, #4]
 800ab6e:	f000 fe17 	bl	800b7a0 <_vfiprintf_r>
 800ab72:	b002      	add	sp, #8
 800ab74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab78:	b003      	add	sp, #12
 800ab7a:	4770      	bx	lr
 800ab7c:	20000028 	.word	0x20000028

0800ab80 <_localeconv_r>:
 800ab80:	4800      	ldr	r0, [pc, #0]	; (800ab84 <_localeconv_r+0x4>)
 800ab82:	4770      	bx	lr
 800ab84:	2000017c 	.word	0x2000017c

0800ab88 <malloc>:
 800ab88:	4b02      	ldr	r3, [pc, #8]	; (800ab94 <malloc+0xc>)
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	f000 bc0f 	b.w	800b3b0 <_malloc_r>
 800ab92:	bf00      	nop
 800ab94:	20000028 	.word	0x20000028

0800ab98 <memchr>:
 800ab98:	4603      	mov	r3, r0
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	b2c9      	uxtb	r1, r1
 800ab9e:	4402      	add	r2, r0
 800aba0:	4293      	cmp	r3, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	d101      	bne.n	800abaa <memchr+0x12>
 800aba6:	2000      	movs	r0, #0
 800aba8:	e003      	b.n	800abb2 <memchr+0x1a>
 800abaa:	7804      	ldrb	r4, [r0, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	428c      	cmp	r4, r1
 800abb0:	d1f6      	bne.n	800aba0 <memchr+0x8>
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <_Balloc>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abb8:	4604      	mov	r4, r0
 800abba:	460d      	mov	r5, r1
 800abbc:	b976      	cbnz	r6, 800abdc <_Balloc+0x28>
 800abbe:	2010      	movs	r0, #16
 800abc0:	f7ff ffe2 	bl	800ab88 <malloc>
 800abc4:	4602      	mov	r2, r0
 800abc6:	6260      	str	r0, [r4, #36]	; 0x24
 800abc8:	b920      	cbnz	r0, 800abd4 <_Balloc+0x20>
 800abca:	2166      	movs	r1, #102	; 0x66
 800abcc:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <_Balloc+0x78>)
 800abce:	4818      	ldr	r0, [pc, #96]	; (800ac30 <_Balloc+0x7c>)
 800abd0:	f7ff f92a 	bl	8009e28 <__assert_func>
 800abd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abd8:	6006      	str	r6, [r0, #0]
 800abda:	60c6      	str	r6, [r0, #12]
 800abdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abde:	68f3      	ldr	r3, [r6, #12]
 800abe0:	b183      	cbz	r3, 800ac04 <_Balloc+0x50>
 800abe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abea:	b9b8      	cbnz	r0, 800ac1c <_Balloc+0x68>
 800abec:	2101      	movs	r1, #1
 800abee:	fa01 f605 	lsl.w	r6, r1, r5
 800abf2:	1d72      	adds	r2, r6, #5
 800abf4:	4620      	mov	r0, r4
 800abf6:	0092      	lsls	r2, r2, #2
 800abf8:	f000 fb5e 	bl	800b2b8 <_calloc_r>
 800abfc:	b160      	cbz	r0, 800ac18 <_Balloc+0x64>
 800abfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac02:	e00e      	b.n	800ac22 <_Balloc+0x6e>
 800ac04:	2221      	movs	r2, #33	; 0x21
 800ac06:	2104      	movs	r1, #4
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fb55 	bl	800b2b8 <_calloc_r>
 800ac0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac10:	60f0      	str	r0, [r6, #12]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e4      	bne.n	800abe2 <_Balloc+0x2e>
 800ac18:	2000      	movs	r0, #0
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	6802      	ldr	r2, [r0, #0]
 800ac1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac22:	2300      	movs	r3, #0
 800ac24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac28:	e7f7      	b.n	800ac1a <_Balloc+0x66>
 800ac2a:	bf00      	nop
 800ac2c:	0800c8a1 	.word	0x0800c8a1
 800ac30:	0800c924 	.word	0x0800c924

0800ac34 <_Bfree>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac38:	4605      	mov	r5, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	b976      	cbnz	r6, 800ac5c <_Bfree+0x28>
 800ac3e:	2010      	movs	r0, #16
 800ac40:	f7ff ffa2 	bl	800ab88 <malloc>
 800ac44:	4602      	mov	r2, r0
 800ac46:	6268      	str	r0, [r5, #36]	; 0x24
 800ac48:	b920      	cbnz	r0, 800ac54 <_Bfree+0x20>
 800ac4a:	218a      	movs	r1, #138	; 0x8a
 800ac4c:	4b08      	ldr	r3, [pc, #32]	; (800ac70 <_Bfree+0x3c>)
 800ac4e:	4809      	ldr	r0, [pc, #36]	; (800ac74 <_Bfree+0x40>)
 800ac50:	f7ff f8ea 	bl	8009e28 <__assert_func>
 800ac54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac58:	6006      	str	r6, [r0, #0]
 800ac5a:	60c6      	str	r6, [r0, #12]
 800ac5c:	b13c      	cbz	r4, 800ac6e <_Bfree+0x3a>
 800ac5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac60:	6862      	ldr	r2, [r4, #4]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac68:	6021      	str	r1, [r4, #0]
 800ac6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	0800c8a1 	.word	0x0800c8a1
 800ac74:	0800c924 	.word	0x0800c924

0800ac78 <__multadd>:
 800ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	461e      	mov	r6, r3
 800ac82:	2000      	movs	r0, #0
 800ac84:	690d      	ldr	r5, [r1, #16]
 800ac86:	f101 0c14 	add.w	ip, r1, #20
 800ac8a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac8e:	3001      	adds	r0, #1
 800ac90:	b299      	uxth	r1, r3
 800ac92:	fb02 6101 	mla	r1, r2, r1, r6
 800ac96:	0c1e      	lsrs	r6, r3, #16
 800ac98:	0c0b      	lsrs	r3, r1, #16
 800ac9a:	fb02 3306 	mla	r3, r2, r6, r3
 800ac9e:	b289      	uxth	r1, r1
 800aca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aca4:	4285      	cmp	r5, r0
 800aca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800acaa:	f84c 1b04 	str.w	r1, [ip], #4
 800acae:	dcec      	bgt.n	800ac8a <__multadd+0x12>
 800acb0:	b30e      	cbz	r6, 800acf6 <__multadd+0x7e>
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	42ab      	cmp	r3, r5
 800acb6:	dc19      	bgt.n	800acec <__multadd+0x74>
 800acb8:	6861      	ldr	r1, [r4, #4]
 800acba:	4638      	mov	r0, r7
 800acbc:	3101      	adds	r1, #1
 800acbe:	f7ff ff79 	bl	800abb4 <_Balloc>
 800acc2:	4680      	mov	r8, r0
 800acc4:	b928      	cbnz	r0, 800acd2 <__multadd+0x5a>
 800acc6:	4602      	mov	r2, r0
 800acc8:	21b5      	movs	r1, #181	; 0xb5
 800acca:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <__multadd+0x84>)
 800accc:	480c      	ldr	r0, [pc, #48]	; (800ad00 <__multadd+0x88>)
 800acce:	f7ff f8ab 	bl	8009e28 <__assert_func>
 800acd2:	6922      	ldr	r2, [r4, #16]
 800acd4:	f104 010c 	add.w	r1, r4, #12
 800acd8:	3202      	adds	r2, #2
 800acda:	0092      	lsls	r2, r2, #2
 800acdc:	300c      	adds	r0, #12
 800acde:	f7fe fc0d 	bl	80094fc <memcpy>
 800ace2:	4621      	mov	r1, r4
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff ffa5 	bl	800ac34 <_Bfree>
 800acea:	4644      	mov	r4, r8
 800acec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acf0:	3501      	adds	r5, #1
 800acf2:	615e      	str	r6, [r3, #20]
 800acf4:	6125      	str	r5, [r4, #16]
 800acf6:	4620      	mov	r0, r4
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	0800c913 	.word	0x0800c913
 800ad00:	0800c924 	.word	0x0800c924

0800ad04 <__hi0bits>:
 800ad04:	0c02      	lsrs	r2, r0, #16
 800ad06:	0412      	lsls	r2, r2, #16
 800ad08:	4603      	mov	r3, r0
 800ad0a:	b9ca      	cbnz	r2, 800ad40 <__hi0bits+0x3c>
 800ad0c:	0403      	lsls	r3, r0, #16
 800ad0e:	2010      	movs	r0, #16
 800ad10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad14:	bf04      	itt	eq
 800ad16:	021b      	lsleq	r3, r3, #8
 800ad18:	3008      	addeq	r0, #8
 800ad1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad1e:	bf04      	itt	eq
 800ad20:	011b      	lsleq	r3, r3, #4
 800ad22:	3004      	addeq	r0, #4
 800ad24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad28:	bf04      	itt	eq
 800ad2a:	009b      	lsleq	r3, r3, #2
 800ad2c:	3002      	addeq	r0, #2
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	db05      	blt.n	800ad3e <__hi0bits+0x3a>
 800ad32:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad36:	f100 0001 	add.w	r0, r0, #1
 800ad3a:	bf08      	it	eq
 800ad3c:	2020      	moveq	r0, #32
 800ad3e:	4770      	bx	lr
 800ad40:	2000      	movs	r0, #0
 800ad42:	e7e5      	b.n	800ad10 <__hi0bits+0xc>

0800ad44 <__lo0bits>:
 800ad44:	6803      	ldr	r3, [r0, #0]
 800ad46:	4602      	mov	r2, r0
 800ad48:	f013 0007 	ands.w	r0, r3, #7
 800ad4c:	d00b      	beq.n	800ad66 <__lo0bits+0x22>
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	d421      	bmi.n	800ad96 <__lo0bits+0x52>
 800ad52:	0798      	lsls	r0, r3, #30
 800ad54:	bf49      	itett	mi
 800ad56:	085b      	lsrmi	r3, r3, #1
 800ad58:	089b      	lsrpl	r3, r3, #2
 800ad5a:	2001      	movmi	r0, #1
 800ad5c:	6013      	strmi	r3, [r2, #0]
 800ad5e:	bf5c      	itt	pl
 800ad60:	2002      	movpl	r0, #2
 800ad62:	6013      	strpl	r3, [r2, #0]
 800ad64:	4770      	bx	lr
 800ad66:	b299      	uxth	r1, r3
 800ad68:	b909      	cbnz	r1, 800ad6e <__lo0bits+0x2a>
 800ad6a:	2010      	movs	r0, #16
 800ad6c:	0c1b      	lsrs	r3, r3, #16
 800ad6e:	b2d9      	uxtb	r1, r3
 800ad70:	b909      	cbnz	r1, 800ad76 <__lo0bits+0x32>
 800ad72:	3008      	adds	r0, #8
 800ad74:	0a1b      	lsrs	r3, r3, #8
 800ad76:	0719      	lsls	r1, r3, #28
 800ad78:	bf04      	itt	eq
 800ad7a:	091b      	lsreq	r3, r3, #4
 800ad7c:	3004      	addeq	r0, #4
 800ad7e:	0799      	lsls	r1, r3, #30
 800ad80:	bf04      	itt	eq
 800ad82:	089b      	lsreq	r3, r3, #2
 800ad84:	3002      	addeq	r0, #2
 800ad86:	07d9      	lsls	r1, r3, #31
 800ad88:	d403      	bmi.n	800ad92 <__lo0bits+0x4e>
 800ad8a:	085b      	lsrs	r3, r3, #1
 800ad8c:	f100 0001 	add.w	r0, r0, #1
 800ad90:	d003      	beq.n	800ad9a <__lo0bits+0x56>
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	4770      	bx	lr
 800ad96:	2000      	movs	r0, #0
 800ad98:	4770      	bx	lr
 800ad9a:	2020      	movs	r0, #32
 800ad9c:	4770      	bx	lr
	...

0800ada0 <__i2b>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	460c      	mov	r4, r1
 800ada4:	2101      	movs	r1, #1
 800ada6:	f7ff ff05 	bl	800abb4 <_Balloc>
 800adaa:	4602      	mov	r2, r0
 800adac:	b928      	cbnz	r0, 800adba <__i2b+0x1a>
 800adae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <__i2b+0x24>)
 800adb4:	4804      	ldr	r0, [pc, #16]	; (800adc8 <__i2b+0x28>)
 800adb6:	f7ff f837 	bl	8009e28 <__assert_func>
 800adba:	2301      	movs	r3, #1
 800adbc:	6144      	str	r4, [r0, #20]
 800adbe:	6103      	str	r3, [r0, #16]
 800adc0:	bd10      	pop	{r4, pc}
 800adc2:	bf00      	nop
 800adc4:	0800c913 	.word	0x0800c913
 800adc8:	0800c924 	.word	0x0800c924

0800adcc <__multiply>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	4691      	mov	r9, r2
 800add2:	690a      	ldr	r2, [r1, #16]
 800add4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800add8:	460c      	mov	r4, r1
 800adda:	429a      	cmp	r2, r3
 800addc:	bfbe      	ittt	lt
 800adde:	460b      	movlt	r3, r1
 800ade0:	464c      	movlt	r4, r9
 800ade2:	4699      	movlt	r9, r3
 800ade4:	6927      	ldr	r7, [r4, #16]
 800ade6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adea:	68a3      	ldr	r3, [r4, #8]
 800adec:	6861      	ldr	r1, [r4, #4]
 800adee:	eb07 060a 	add.w	r6, r7, sl
 800adf2:	42b3      	cmp	r3, r6
 800adf4:	b085      	sub	sp, #20
 800adf6:	bfb8      	it	lt
 800adf8:	3101      	addlt	r1, #1
 800adfa:	f7ff fedb 	bl	800abb4 <_Balloc>
 800adfe:	b930      	cbnz	r0, 800ae0e <__multiply+0x42>
 800ae00:	4602      	mov	r2, r0
 800ae02:	f240 115d 	movw	r1, #349	; 0x15d
 800ae06:	4b43      	ldr	r3, [pc, #268]	; (800af14 <__multiply+0x148>)
 800ae08:	4843      	ldr	r0, [pc, #268]	; (800af18 <__multiply+0x14c>)
 800ae0a:	f7ff f80d 	bl	8009e28 <__assert_func>
 800ae0e:	f100 0514 	add.w	r5, r0, #20
 800ae12:	462b      	mov	r3, r5
 800ae14:	2200      	movs	r2, #0
 800ae16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae1a:	4543      	cmp	r3, r8
 800ae1c:	d321      	bcc.n	800ae62 <__multiply+0x96>
 800ae1e:	f104 0314 	add.w	r3, r4, #20
 800ae22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae26:	f109 0314 	add.w	r3, r9, #20
 800ae2a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae2e:	9202      	str	r2, [sp, #8]
 800ae30:	1b3a      	subs	r2, r7, r4
 800ae32:	3a15      	subs	r2, #21
 800ae34:	f022 0203 	bic.w	r2, r2, #3
 800ae38:	3204      	adds	r2, #4
 800ae3a:	f104 0115 	add.w	r1, r4, #21
 800ae3e:	428f      	cmp	r7, r1
 800ae40:	bf38      	it	cc
 800ae42:	2204      	movcc	r2, #4
 800ae44:	9201      	str	r2, [sp, #4]
 800ae46:	9a02      	ldr	r2, [sp, #8]
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d80c      	bhi.n	800ae68 <__multiply+0x9c>
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	dd03      	ble.n	800ae5a <__multiply+0x8e>
 800ae52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d059      	beq.n	800af0e <__multiply+0x142>
 800ae5a:	6106      	str	r6, [r0, #16]
 800ae5c:	b005      	add	sp, #20
 800ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae62:	f843 2b04 	str.w	r2, [r3], #4
 800ae66:	e7d8      	b.n	800ae1a <__multiply+0x4e>
 800ae68:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae6c:	f1ba 0f00 	cmp.w	sl, #0
 800ae70:	d023      	beq.n	800aeba <__multiply+0xee>
 800ae72:	46a9      	mov	r9, r5
 800ae74:	f04f 0c00 	mov.w	ip, #0
 800ae78:	f104 0e14 	add.w	lr, r4, #20
 800ae7c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae80:	f8d9 1000 	ldr.w	r1, [r9]
 800ae84:	fa1f fb82 	uxth.w	fp, r2
 800ae88:	b289      	uxth	r1, r1
 800ae8a:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae8e:	4461      	add	r1, ip
 800ae90:	f8d9 c000 	ldr.w	ip, [r9]
 800ae94:	0c12      	lsrs	r2, r2, #16
 800ae96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae9a:	fb0a c202 	mla	r2, sl, r2, ip
 800ae9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aea2:	b289      	uxth	r1, r1
 800aea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea8:	4577      	cmp	r7, lr
 800aeaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeae:	f849 1b04 	str.w	r1, [r9], #4
 800aeb2:	d8e3      	bhi.n	800ae7c <__multiply+0xb0>
 800aeb4:	9a01      	ldr	r2, [sp, #4]
 800aeb6:	f845 c002 	str.w	ip, [r5, r2]
 800aeba:	9a03      	ldr	r2, [sp, #12]
 800aebc:	3304      	adds	r3, #4
 800aebe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aec2:	f1b9 0f00 	cmp.w	r9, #0
 800aec6:	d020      	beq.n	800af0a <__multiply+0x13e>
 800aec8:	46ae      	mov	lr, r5
 800aeca:	f04f 0a00 	mov.w	sl, #0
 800aece:	6829      	ldr	r1, [r5, #0]
 800aed0:	f104 0c14 	add.w	ip, r4, #20
 800aed4:	f8bc b000 	ldrh.w	fp, [ip]
 800aed8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aedc:	b289      	uxth	r1, r1
 800aede:	fb09 220b 	mla	r2, r9, fp, r2
 800aee2:	4492      	add	sl, r2
 800aee4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee8:	f84e 1b04 	str.w	r1, [lr], #4
 800aeec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aef0:	f8be 1000 	ldrh.w	r1, [lr]
 800aef4:	0c12      	lsrs	r2, r2, #16
 800aef6:	fb09 1102 	mla	r1, r9, r2, r1
 800aefa:	4567      	cmp	r7, ip
 800aefc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800af00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af04:	d8e6      	bhi.n	800aed4 <__multiply+0x108>
 800af06:	9a01      	ldr	r2, [sp, #4]
 800af08:	50a9      	str	r1, [r5, r2]
 800af0a:	3504      	adds	r5, #4
 800af0c:	e79b      	b.n	800ae46 <__multiply+0x7a>
 800af0e:	3e01      	subs	r6, #1
 800af10:	e79d      	b.n	800ae4e <__multiply+0x82>
 800af12:	bf00      	nop
 800af14:	0800c913 	.word	0x0800c913
 800af18:	0800c924 	.word	0x0800c924

0800af1c <__pow5mult>:
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af20:	4615      	mov	r5, r2
 800af22:	f012 0203 	ands.w	r2, r2, #3
 800af26:	4606      	mov	r6, r0
 800af28:	460f      	mov	r7, r1
 800af2a:	d007      	beq.n	800af3c <__pow5mult+0x20>
 800af2c:	4c25      	ldr	r4, [pc, #148]	; (800afc4 <__pow5mult+0xa8>)
 800af2e:	3a01      	subs	r2, #1
 800af30:	2300      	movs	r3, #0
 800af32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af36:	f7ff fe9f 	bl	800ac78 <__multadd>
 800af3a:	4607      	mov	r7, r0
 800af3c:	10ad      	asrs	r5, r5, #2
 800af3e:	d03d      	beq.n	800afbc <__pow5mult+0xa0>
 800af40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af42:	b97c      	cbnz	r4, 800af64 <__pow5mult+0x48>
 800af44:	2010      	movs	r0, #16
 800af46:	f7ff fe1f 	bl	800ab88 <malloc>
 800af4a:	4602      	mov	r2, r0
 800af4c:	6270      	str	r0, [r6, #36]	; 0x24
 800af4e:	b928      	cbnz	r0, 800af5c <__pow5mult+0x40>
 800af50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af54:	4b1c      	ldr	r3, [pc, #112]	; (800afc8 <__pow5mult+0xac>)
 800af56:	481d      	ldr	r0, [pc, #116]	; (800afcc <__pow5mult+0xb0>)
 800af58:	f7fe ff66 	bl	8009e28 <__assert_func>
 800af5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af60:	6004      	str	r4, [r0, #0]
 800af62:	60c4      	str	r4, [r0, #12]
 800af64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af6c:	b94c      	cbnz	r4, 800af82 <__pow5mult+0x66>
 800af6e:	f240 2171 	movw	r1, #625	; 0x271
 800af72:	4630      	mov	r0, r6
 800af74:	f7ff ff14 	bl	800ada0 <__i2b>
 800af78:	2300      	movs	r3, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	f8c8 0008 	str.w	r0, [r8, #8]
 800af80:	6003      	str	r3, [r0, #0]
 800af82:	f04f 0900 	mov.w	r9, #0
 800af86:	07eb      	lsls	r3, r5, #31
 800af88:	d50a      	bpl.n	800afa0 <__pow5mult+0x84>
 800af8a:	4639      	mov	r1, r7
 800af8c:	4622      	mov	r2, r4
 800af8e:	4630      	mov	r0, r6
 800af90:	f7ff ff1c 	bl	800adcc <__multiply>
 800af94:	4680      	mov	r8, r0
 800af96:	4639      	mov	r1, r7
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fe4b 	bl	800ac34 <_Bfree>
 800af9e:	4647      	mov	r7, r8
 800afa0:	106d      	asrs	r5, r5, #1
 800afa2:	d00b      	beq.n	800afbc <__pow5mult+0xa0>
 800afa4:	6820      	ldr	r0, [r4, #0]
 800afa6:	b938      	cbnz	r0, 800afb8 <__pow5mult+0x9c>
 800afa8:	4622      	mov	r2, r4
 800afaa:	4621      	mov	r1, r4
 800afac:	4630      	mov	r0, r6
 800afae:	f7ff ff0d 	bl	800adcc <__multiply>
 800afb2:	6020      	str	r0, [r4, #0]
 800afb4:	f8c0 9000 	str.w	r9, [r0]
 800afb8:	4604      	mov	r4, r0
 800afba:	e7e4      	b.n	800af86 <__pow5mult+0x6a>
 800afbc:	4638      	mov	r0, r7
 800afbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc2:	bf00      	nop
 800afc4:	0800ca70 	.word	0x0800ca70
 800afc8:	0800c8a1 	.word	0x0800c8a1
 800afcc:	0800c924 	.word	0x0800c924

0800afd0 <__lshift>:
 800afd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	460c      	mov	r4, r1
 800afd6:	4607      	mov	r7, r0
 800afd8:	4691      	mov	r9, r2
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	6849      	ldr	r1, [r1, #4]
 800afde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe8:	f108 0601 	add.w	r6, r8, #1
 800afec:	42b3      	cmp	r3, r6
 800afee:	db0b      	blt.n	800b008 <__lshift+0x38>
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff fddf 	bl	800abb4 <_Balloc>
 800aff6:	4605      	mov	r5, r0
 800aff8:	b948      	cbnz	r0, 800b00e <__lshift+0x3e>
 800affa:	4602      	mov	r2, r0
 800affc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b000:	4b29      	ldr	r3, [pc, #164]	; (800b0a8 <__lshift+0xd8>)
 800b002:	482a      	ldr	r0, [pc, #168]	; (800b0ac <__lshift+0xdc>)
 800b004:	f7fe ff10 	bl	8009e28 <__assert_func>
 800b008:	3101      	adds	r1, #1
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	e7ee      	b.n	800afec <__lshift+0x1c>
 800b00e:	2300      	movs	r3, #0
 800b010:	f100 0114 	add.w	r1, r0, #20
 800b014:	f100 0210 	add.w	r2, r0, #16
 800b018:	4618      	mov	r0, r3
 800b01a:	4553      	cmp	r3, sl
 800b01c:	db37      	blt.n	800b08e <__lshift+0xbe>
 800b01e:	6920      	ldr	r0, [r4, #16]
 800b020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b024:	f104 0314 	add.w	r3, r4, #20
 800b028:	f019 091f 	ands.w	r9, r9, #31
 800b02c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b034:	d02f      	beq.n	800b096 <__lshift+0xc6>
 800b036:	468a      	mov	sl, r1
 800b038:	f04f 0c00 	mov.w	ip, #0
 800b03c:	f1c9 0e20 	rsb	lr, r9, #32
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	fa02 f209 	lsl.w	r2, r2, r9
 800b046:	ea42 020c 	orr.w	r2, r2, ip
 800b04a:	f84a 2b04 	str.w	r2, [sl], #4
 800b04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b052:	4298      	cmp	r0, r3
 800b054:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b058:	d8f2      	bhi.n	800b040 <__lshift+0x70>
 800b05a:	1b03      	subs	r3, r0, r4
 800b05c:	3b15      	subs	r3, #21
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	3304      	adds	r3, #4
 800b064:	f104 0215 	add.w	r2, r4, #21
 800b068:	4290      	cmp	r0, r2
 800b06a:	bf38      	it	cc
 800b06c:	2304      	movcc	r3, #4
 800b06e:	f841 c003 	str.w	ip, [r1, r3]
 800b072:	f1bc 0f00 	cmp.w	ip, #0
 800b076:	d001      	beq.n	800b07c <__lshift+0xac>
 800b078:	f108 0602 	add.w	r6, r8, #2
 800b07c:	3e01      	subs	r6, #1
 800b07e:	4638      	mov	r0, r7
 800b080:	4621      	mov	r1, r4
 800b082:	612e      	str	r6, [r5, #16]
 800b084:	f7ff fdd6 	bl	800ac34 <_Bfree>
 800b088:	4628      	mov	r0, r5
 800b08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b092:	3301      	adds	r3, #1
 800b094:	e7c1      	b.n	800b01a <__lshift+0x4a>
 800b096:	3904      	subs	r1, #4
 800b098:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09c:	4298      	cmp	r0, r3
 800b09e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0a2:	d8f9      	bhi.n	800b098 <__lshift+0xc8>
 800b0a4:	e7ea      	b.n	800b07c <__lshift+0xac>
 800b0a6:	bf00      	nop
 800b0a8:	0800c913 	.word	0x0800c913
 800b0ac:	0800c924 	.word	0x0800c924

0800b0b0 <__mcmp>:
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	690a      	ldr	r2, [r1, #16]
 800b0b4:	6900      	ldr	r0, [r0, #16]
 800b0b6:	b530      	push	{r4, r5, lr}
 800b0b8:	1a80      	subs	r0, r0, r2
 800b0ba:	d10d      	bne.n	800b0d8 <__mcmp+0x28>
 800b0bc:	3314      	adds	r3, #20
 800b0be:	3114      	adds	r1, #20
 800b0c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0d0:	4295      	cmp	r5, r2
 800b0d2:	d002      	beq.n	800b0da <__mcmp+0x2a>
 800b0d4:	d304      	bcc.n	800b0e0 <__mcmp+0x30>
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	bd30      	pop	{r4, r5, pc}
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	d3f4      	bcc.n	800b0c8 <__mcmp+0x18>
 800b0de:	e7fb      	b.n	800b0d8 <__mcmp+0x28>
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e4:	e7f8      	b.n	800b0d8 <__mcmp+0x28>
	...

0800b0e8 <__mdiff>:
 800b0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	460d      	mov	r5, r1
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	f7ff ffdb 	bl	800b0b0 <__mcmp>
 800b0fa:	1e06      	subs	r6, r0, #0
 800b0fc:	d111      	bne.n	800b122 <__mdiff+0x3a>
 800b0fe:	4631      	mov	r1, r6
 800b100:	4638      	mov	r0, r7
 800b102:	f7ff fd57 	bl	800abb4 <_Balloc>
 800b106:	4602      	mov	r2, r0
 800b108:	b928      	cbnz	r0, 800b116 <__mdiff+0x2e>
 800b10a:	f240 2132 	movw	r1, #562	; 0x232
 800b10e:	4b3a      	ldr	r3, [pc, #232]	; (800b1f8 <__mdiff+0x110>)
 800b110:	483a      	ldr	r0, [pc, #232]	; (800b1fc <__mdiff+0x114>)
 800b112:	f7fe fe89 	bl	8009e28 <__assert_func>
 800b116:	2301      	movs	r3, #1
 800b118:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b11c:	4610      	mov	r0, r2
 800b11e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	bfa4      	itt	ge
 800b124:	4623      	movge	r3, r4
 800b126:	462c      	movge	r4, r5
 800b128:	4638      	mov	r0, r7
 800b12a:	6861      	ldr	r1, [r4, #4]
 800b12c:	bfa6      	itte	ge
 800b12e:	461d      	movge	r5, r3
 800b130:	2600      	movge	r6, #0
 800b132:	2601      	movlt	r6, #1
 800b134:	f7ff fd3e 	bl	800abb4 <_Balloc>
 800b138:	4602      	mov	r2, r0
 800b13a:	b918      	cbnz	r0, 800b144 <__mdiff+0x5c>
 800b13c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b140:	4b2d      	ldr	r3, [pc, #180]	; (800b1f8 <__mdiff+0x110>)
 800b142:	e7e5      	b.n	800b110 <__mdiff+0x28>
 800b144:	f102 0814 	add.w	r8, r2, #20
 800b148:	46c2      	mov	sl, r8
 800b14a:	f04f 0c00 	mov.w	ip, #0
 800b14e:	6927      	ldr	r7, [r4, #16]
 800b150:	60c6      	str	r6, [r0, #12]
 800b152:	692e      	ldr	r6, [r5, #16]
 800b154:	f104 0014 	add.w	r0, r4, #20
 800b158:	f105 0914 	add.w	r9, r5, #20
 800b15c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b160:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b164:	3410      	adds	r4, #16
 800b166:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b16a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b16e:	fa1f f18b 	uxth.w	r1, fp
 800b172:	448c      	add	ip, r1
 800b174:	b299      	uxth	r1, r3
 800b176:	0c1b      	lsrs	r3, r3, #16
 800b178:	ebac 0101 	sub.w	r1, ip, r1
 800b17c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b180:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b184:	b289      	uxth	r1, r1
 800b186:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b18a:	454e      	cmp	r6, r9
 800b18c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b190:	f84a 3b04 	str.w	r3, [sl], #4
 800b194:	d8e7      	bhi.n	800b166 <__mdiff+0x7e>
 800b196:	1b73      	subs	r3, r6, r5
 800b198:	3b15      	subs	r3, #21
 800b19a:	f023 0303 	bic.w	r3, r3, #3
 800b19e:	3515      	adds	r5, #21
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	42ae      	cmp	r6, r5
 800b1a4:	bf38      	it	cc
 800b1a6:	2304      	movcc	r3, #4
 800b1a8:	4418      	add	r0, r3
 800b1aa:	4443      	add	r3, r8
 800b1ac:	461e      	mov	r6, r3
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	4575      	cmp	r5, lr
 800b1b2:	d30e      	bcc.n	800b1d2 <__mdiff+0xea>
 800b1b4:	f10e 0103 	add.w	r1, lr, #3
 800b1b8:	1a09      	subs	r1, r1, r0
 800b1ba:	f021 0103 	bic.w	r1, r1, #3
 800b1be:	3803      	subs	r0, #3
 800b1c0:	4586      	cmp	lr, r0
 800b1c2:	bf38      	it	cc
 800b1c4:	2100      	movcc	r1, #0
 800b1c6:	4419      	add	r1, r3
 800b1c8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b1cc:	b18b      	cbz	r3, 800b1f2 <__mdiff+0x10a>
 800b1ce:	6117      	str	r7, [r2, #16]
 800b1d0:	e7a4      	b.n	800b11c <__mdiff+0x34>
 800b1d2:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1d6:	fa1f f188 	uxth.w	r1, r8
 800b1da:	4461      	add	r1, ip
 800b1dc:	140c      	asrs	r4, r1, #16
 800b1de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1e2:	b289      	uxth	r1, r1
 800b1e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b1e8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b1ec:	f846 1b04 	str.w	r1, [r6], #4
 800b1f0:	e7de      	b.n	800b1b0 <__mdiff+0xc8>
 800b1f2:	3f01      	subs	r7, #1
 800b1f4:	e7e8      	b.n	800b1c8 <__mdiff+0xe0>
 800b1f6:	bf00      	nop
 800b1f8:	0800c913 	.word	0x0800c913
 800b1fc:	0800c924 	.word	0x0800c924

0800b200 <__d2b>:
 800b200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b204:	2101      	movs	r1, #1
 800b206:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b20a:	4690      	mov	r8, r2
 800b20c:	461d      	mov	r5, r3
 800b20e:	f7ff fcd1 	bl	800abb4 <_Balloc>
 800b212:	4604      	mov	r4, r0
 800b214:	b930      	cbnz	r0, 800b224 <__d2b+0x24>
 800b216:	4602      	mov	r2, r0
 800b218:	f240 310a 	movw	r1, #778	; 0x30a
 800b21c:	4b24      	ldr	r3, [pc, #144]	; (800b2b0 <__d2b+0xb0>)
 800b21e:	4825      	ldr	r0, [pc, #148]	; (800b2b4 <__d2b+0xb4>)
 800b220:	f7fe fe02 	bl	8009e28 <__assert_func>
 800b224:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b228:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b22c:	bb2d      	cbnz	r5, 800b27a <__d2b+0x7a>
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	f1b8 0300 	subs.w	r3, r8, #0
 800b234:	d026      	beq.n	800b284 <__d2b+0x84>
 800b236:	4668      	mov	r0, sp
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	f7ff fd83 	bl	800ad44 <__lo0bits>
 800b23e:	9900      	ldr	r1, [sp, #0]
 800b240:	b1f0      	cbz	r0, 800b280 <__d2b+0x80>
 800b242:	9a01      	ldr	r2, [sp, #4]
 800b244:	f1c0 0320 	rsb	r3, r0, #32
 800b248:	fa02 f303 	lsl.w	r3, r2, r3
 800b24c:	430b      	orrs	r3, r1
 800b24e:	40c2      	lsrs	r2, r0
 800b250:	6163      	str	r3, [r4, #20]
 800b252:	9201      	str	r2, [sp, #4]
 800b254:	9b01      	ldr	r3, [sp, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	bf14      	ite	ne
 800b25a:	2102      	movne	r1, #2
 800b25c:	2101      	moveq	r1, #1
 800b25e:	61a3      	str	r3, [r4, #24]
 800b260:	6121      	str	r1, [r4, #16]
 800b262:	b1c5      	cbz	r5, 800b296 <__d2b+0x96>
 800b264:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b268:	4405      	add	r5, r0
 800b26a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b26e:	603d      	str	r5, [r7, #0]
 800b270:	6030      	str	r0, [r6, #0]
 800b272:	4620      	mov	r0, r4
 800b274:	b002      	add	sp, #8
 800b276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b27e:	e7d6      	b.n	800b22e <__d2b+0x2e>
 800b280:	6161      	str	r1, [r4, #20]
 800b282:	e7e7      	b.n	800b254 <__d2b+0x54>
 800b284:	a801      	add	r0, sp, #4
 800b286:	f7ff fd5d 	bl	800ad44 <__lo0bits>
 800b28a:	2101      	movs	r1, #1
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	6121      	str	r1, [r4, #16]
 800b290:	6163      	str	r3, [r4, #20]
 800b292:	3020      	adds	r0, #32
 800b294:	e7e5      	b.n	800b262 <__d2b+0x62>
 800b296:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b29a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b29e:	6038      	str	r0, [r7, #0]
 800b2a0:	6918      	ldr	r0, [r3, #16]
 800b2a2:	f7ff fd2f 	bl	800ad04 <__hi0bits>
 800b2a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b2aa:	6031      	str	r1, [r6, #0]
 800b2ac:	e7e1      	b.n	800b272 <__d2b+0x72>
 800b2ae:	bf00      	nop
 800b2b0:	0800c913 	.word	0x0800c913
 800b2b4:	0800c924 	.word	0x0800c924

0800b2b8 <_calloc_r>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	fba1 5402 	umull	r5, r4, r1, r2
 800b2be:	b934      	cbnz	r4, 800b2ce <_calloc_r+0x16>
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f000 f875 	bl	800b3b0 <_malloc_r>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	b928      	cbnz	r0, 800b2d6 <_calloc_r+0x1e>
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	bd70      	pop	{r4, r5, r6, pc}
 800b2ce:	220c      	movs	r2, #12
 800b2d0:	2600      	movs	r6, #0
 800b2d2:	6002      	str	r2, [r0, #0]
 800b2d4:	e7f9      	b.n	800b2ca <_calloc_r+0x12>
 800b2d6:	462a      	mov	r2, r5
 800b2d8:	4621      	mov	r1, r4
 800b2da:	f7fe f91d 	bl	8009518 <memset>
 800b2de:	e7f4      	b.n	800b2ca <_calloc_r+0x12>

0800b2e0 <_free_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	d040      	beq.n	800b36a <_free_r+0x8a>
 800b2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ec:	1f0c      	subs	r4, r1, #4
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfb8      	it	lt
 800b2f2:	18e4      	addlt	r4, r4, r3
 800b2f4:	f000 fea4 	bl	800c040 <__malloc_lock>
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <_free_r+0x8c>)
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x2c>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	4628      	mov	r0, r5
 800b304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b308:	f000 bea0 	b.w	800c04c <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x42>
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	1821      	adds	r1, r4, r0
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1809      	addeq	r1, r1, r0
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x1e>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x4c>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x42>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1850      	adds	r0, r2, r1
 800b330:	42a0      	cmp	r0, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x6c>
 800b334:	6820      	ldr	r0, [r4, #0]
 800b336:	4401      	add	r1, r0
 800b338:	1850      	adds	r0, r2, r1
 800b33a:	4283      	cmp	r3, r0
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x22>
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	4401      	add	r1, r0
 800b346:	6011      	str	r1, [r2, #0]
 800b348:	6053      	str	r3, [r2, #4]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x22>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x74>
 800b34e:	230c      	movs	r3, #12
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x22>
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	1821      	adds	r1, r4, r0
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf01      	itttt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	1809      	addeq	r1, r1, r0
 800b362:	6021      	streq	r1, [r4, #0]
 800b364:	6063      	str	r3, [r4, #4]
 800b366:	6054      	str	r4, [r2, #4]
 800b368:	e7cb      	b.n	800b302 <_free_r+0x22>
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	200006d0 	.word	0x200006d0

0800b370 <sbrk_aligned>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4e0e      	ldr	r6, [pc, #56]	; (800b3ac <sbrk_aligned+0x3c>)
 800b374:	460c      	mov	r4, r1
 800b376:	6831      	ldr	r1, [r6, #0]
 800b378:	4605      	mov	r5, r0
 800b37a:	b911      	cbnz	r1, 800b382 <sbrk_aligned+0x12>
 800b37c:	f000 fb40 	bl	800ba00 <_sbrk_r>
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 fb3b 	bl	800ba00 <_sbrk_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d00a      	beq.n	800b3a4 <sbrk_aligned+0x34>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d007      	beq.n	800b3a8 <sbrk_aligned+0x38>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 fb30 	bl	800ba00 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d101      	bne.n	800b3a8 <sbrk_aligned+0x38>
 800b3a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	200006d4 	.word	0x200006d4

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d905      	bls.n	800b3d8 <_malloc_r+0x28>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	603b      	str	r3, [r7, #0]
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	4e2e      	ldr	r6, [pc, #184]	; (800b494 <_malloc_r+0xe4>)
 800b3da:	f000 fe31 	bl	800c040 <__malloc_lock>
 800b3de:	6833      	ldr	r3, [r6, #0]
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	bb34      	cbnz	r4, 800b432 <_malloc_r+0x82>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ffc2 	bl	800b370 <sbrk_aligned>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	d14d      	bne.n	800b48e <_malloc_r+0xde>
 800b3f2:	6834      	ldr	r4, [r6, #0]
 800b3f4:	4626      	mov	r6, r4
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	d140      	bne.n	800b47c <_malloc_r+0xcc>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4638      	mov	r0, r7
 800b400:	eb04 0803 	add.w	r8, r4, r3
 800b404:	f000 fafc 	bl	800ba00 <_sbrk_r>
 800b408:	4580      	cmp	r8, r0
 800b40a:	d13a      	bne.n	800b482 <_malloc_r+0xd2>
 800b40c:	6821      	ldr	r1, [r4, #0]
 800b40e:	3503      	adds	r5, #3
 800b410:	1a6d      	subs	r5, r5, r1
 800b412:	f025 0503 	bic.w	r5, r5, #3
 800b416:	3508      	adds	r5, #8
 800b418:	2d0c      	cmp	r5, #12
 800b41a:	bf38      	it	cc
 800b41c:	250c      	movcc	r5, #12
 800b41e:	4638      	mov	r0, r7
 800b420:	4629      	mov	r1, r5
 800b422:	f7ff ffa5 	bl	800b370 <sbrk_aligned>
 800b426:	3001      	adds	r0, #1
 800b428:	d02b      	beq.n	800b482 <_malloc_r+0xd2>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	442b      	add	r3, r5
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	e00e      	b.n	800b450 <_malloc_r+0xa0>
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	1b52      	subs	r2, r2, r5
 800b436:	d41e      	bmi.n	800b476 <_malloc_r+0xc6>
 800b438:	2a0b      	cmp	r2, #11
 800b43a:	d916      	bls.n	800b46a <_malloc_r+0xba>
 800b43c:	1961      	adds	r1, r4, r5
 800b43e:	42a3      	cmp	r3, r4
 800b440:	6025      	str	r5, [r4, #0]
 800b442:	bf18      	it	ne
 800b444:	6059      	strne	r1, [r3, #4]
 800b446:	6863      	ldr	r3, [r4, #4]
 800b448:	bf08      	it	eq
 800b44a:	6031      	streq	r1, [r6, #0]
 800b44c:	5162      	str	r2, [r4, r5]
 800b44e:	604b      	str	r3, [r1, #4]
 800b450:	4638      	mov	r0, r7
 800b452:	f104 060b 	add.w	r6, r4, #11
 800b456:	f000 fdf9 	bl	800c04c <__malloc_unlock>
 800b45a:	f026 0607 	bic.w	r6, r6, #7
 800b45e:	1d23      	adds	r3, r4, #4
 800b460:	1af2      	subs	r2, r6, r3
 800b462:	d0b6      	beq.n	800b3d2 <_malloc_r+0x22>
 800b464:	1b9b      	subs	r3, r3, r6
 800b466:	50a3      	str	r3, [r4, r2]
 800b468:	e7b3      	b.n	800b3d2 <_malloc_r+0x22>
 800b46a:	6862      	ldr	r2, [r4, #4]
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	bf0c      	ite	eq
 800b470:	6032      	streq	r2, [r6, #0]
 800b472:	605a      	strne	r2, [r3, #4]
 800b474:	e7ec      	b.n	800b450 <_malloc_r+0xa0>
 800b476:	4623      	mov	r3, r4
 800b478:	6864      	ldr	r4, [r4, #4]
 800b47a:	e7b2      	b.n	800b3e2 <_malloc_r+0x32>
 800b47c:	4634      	mov	r4, r6
 800b47e:	6876      	ldr	r6, [r6, #4]
 800b480:	e7b9      	b.n	800b3f6 <_malloc_r+0x46>
 800b482:	230c      	movs	r3, #12
 800b484:	4638      	mov	r0, r7
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	f000 fde0 	bl	800c04c <__malloc_unlock>
 800b48c:	e7a1      	b.n	800b3d2 <_malloc_r+0x22>
 800b48e:	6025      	str	r5, [r4, #0]
 800b490:	e7de      	b.n	800b450 <_malloc_r+0xa0>
 800b492:	bf00      	nop
 800b494:	200006d0 	.word	0x200006d0

0800b498 <__ssputs_r>:
 800b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49c:	688e      	ldr	r6, [r1, #8]
 800b49e:	4682      	mov	sl, r0
 800b4a0:	429e      	cmp	r6, r3
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	461f      	mov	r7, r3
 800b4a8:	d838      	bhi.n	800b51c <__ssputs_r+0x84>
 800b4aa:	898a      	ldrh	r2, [r1, #12]
 800b4ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4b0:	d032      	beq.n	800b518 <__ssputs_r+0x80>
 800b4b2:	6825      	ldr	r5, [r4, #0]
 800b4b4:	6909      	ldr	r1, [r1, #16]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	eba5 0901 	sub.w	r9, r5, r1
 800b4bc:	6965      	ldr	r5, [r4, #20]
 800b4be:	444b      	add	r3, r9
 800b4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c8:	106d      	asrs	r5, r5, #1
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	bf38      	it	cc
 800b4ce:	461d      	movcc	r5, r3
 800b4d0:	0553      	lsls	r3, r2, #21
 800b4d2:	d531      	bpl.n	800b538 <__ssputs_r+0xa0>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7ff ff6b 	bl	800b3b0 <_malloc_r>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b950      	cbnz	r0, 800b4f4 <__ssputs_r+0x5c>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e4:	f8ca 3000 	str.w	r3, [sl]
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f4:	464a      	mov	r2, r9
 800b4f6:	6921      	ldr	r1, [r4, #16]
 800b4f8:	f7fe f800 	bl	80094fc <memcpy>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	6126      	str	r6, [r4, #16]
 800b50a:	444e      	add	r6, r9
 800b50c:	6026      	str	r6, [r4, #0]
 800b50e:	463e      	mov	r6, r7
 800b510:	6165      	str	r5, [r4, #20]
 800b512:	eba5 0509 	sub.w	r5, r5, r9
 800b516:	60a5      	str	r5, [r4, #8]
 800b518:	42be      	cmp	r6, r7
 800b51a:	d900      	bls.n	800b51e <__ssputs_r+0x86>
 800b51c:	463e      	mov	r6, r7
 800b51e:	4632      	mov	r2, r6
 800b520:	4641      	mov	r1, r8
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	f000 fd72 	bl	800c00c <memmove>
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	2000      	movs	r0, #0
 800b52c:	1b9b      	subs	r3, r3, r6
 800b52e:	60a3      	str	r3, [r4, #8]
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	4433      	add	r3, r6
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	e7db      	b.n	800b4f0 <__ssputs_r+0x58>
 800b538:	462a      	mov	r2, r5
 800b53a:	f000 fd8d 	bl	800c058 <_realloc_r>
 800b53e:	4606      	mov	r6, r0
 800b540:	2800      	cmp	r0, #0
 800b542:	d1e1      	bne.n	800b508 <__ssputs_r+0x70>
 800b544:	4650      	mov	r0, sl
 800b546:	6921      	ldr	r1, [r4, #16]
 800b548:	f7ff feca 	bl	800b2e0 <_free_r>
 800b54c:	e7c7      	b.n	800b4de <__ssputs_r+0x46>
	...

0800b550 <_svfiprintf_r>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	4698      	mov	r8, r3
 800b556:	898b      	ldrh	r3, [r1, #12]
 800b558:	4607      	mov	r7, r0
 800b55a:	061b      	lsls	r3, r3, #24
 800b55c:	460d      	mov	r5, r1
 800b55e:	4614      	mov	r4, r2
 800b560:	b09d      	sub	sp, #116	; 0x74
 800b562:	d50e      	bpl.n	800b582 <_svfiprintf_r+0x32>
 800b564:	690b      	ldr	r3, [r1, #16]
 800b566:	b963      	cbnz	r3, 800b582 <_svfiprintf_r+0x32>
 800b568:	2140      	movs	r1, #64	; 0x40
 800b56a:	f7ff ff21 	bl	800b3b0 <_malloc_r>
 800b56e:	6028      	str	r0, [r5, #0]
 800b570:	6128      	str	r0, [r5, #16]
 800b572:	b920      	cbnz	r0, 800b57e <_svfiprintf_r+0x2e>
 800b574:	230c      	movs	r3, #12
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	e0d1      	b.n	800b722 <_svfiprintf_r+0x1d2>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	616b      	str	r3, [r5, #20]
 800b582:	2300      	movs	r3, #0
 800b584:	9309      	str	r3, [sp, #36]	; 0x24
 800b586:	2320      	movs	r3, #32
 800b588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b58c:	2330      	movs	r3, #48	; 0x30
 800b58e:	f04f 0901 	mov.w	r9, #1
 800b592:	f8cd 800c 	str.w	r8, [sp, #12]
 800b596:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b73c <_svfiprintf_r+0x1ec>
 800b59a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b59e:	4623      	mov	r3, r4
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a6:	b10a      	cbz	r2, 800b5ac <_svfiprintf_r+0x5c>
 800b5a8:	2a25      	cmp	r2, #37	; 0x25
 800b5aa:	d1f9      	bne.n	800b5a0 <_svfiprintf_r+0x50>
 800b5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b5b0:	d00b      	beq.n	800b5ca <_svfiprintf_r+0x7a>
 800b5b2:	465b      	mov	r3, fp
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff6d 	bl	800b498 <__ssputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80aa 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c6:	445a      	add	r2, fp
 800b5c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80a2 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5de:	f10a 0a01 	add.w	sl, sl, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	9307      	str	r3, [sp, #28]
 800b5e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ec:	4654      	mov	r4, sl
 800b5ee:	2205      	movs	r2, #5
 800b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f4:	4851      	ldr	r0, [pc, #324]	; (800b73c <_svfiprintf_r+0x1ec>)
 800b5f6:	f7ff facf 	bl	800ab98 <memchr>
 800b5fa:	9a04      	ldr	r2, [sp, #16]
 800b5fc:	b9d8      	cbnz	r0, 800b636 <_svfiprintf_r+0xe6>
 800b5fe:	06d0      	lsls	r0, r2, #27
 800b600:	bf44      	itt	mi
 800b602:	2320      	movmi	r3, #32
 800b604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b608:	0711      	lsls	r1, r2, #28
 800b60a:	bf44      	itt	mi
 800b60c:	232b      	movmi	r3, #43	; 0x2b
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b612:	f89a 3000 	ldrb.w	r3, [sl]
 800b616:	2b2a      	cmp	r3, #42	; 0x2a
 800b618:	d015      	beq.n	800b646 <_svfiprintf_r+0xf6>
 800b61a:	4654      	mov	r4, sl
 800b61c:	2000      	movs	r0, #0
 800b61e:	f04f 0c0a 	mov.w	ip, #10
 800b622:	9a07      	ldr	r2, [sp, #28]
 800b624:	4621      	mov	r1, r4
 800b626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b62a:	3b30      	subs	r3, #48	; 0x30
 800b62c:	2b09      	cmp	r3, #9
 800b62e:	d94e      	bls.n	800b6ce <_svfiprintf_r+0x17e>
 800b630:	b1b0      	cbz	r0, 800b660 <_svfiprintf_r+0x110>
 800b632:	9207      	str	r2, [sp, #28]
 800b634:	e014      	b.n	800b660 <_svfiprintf_r+0x110>
 800b636:	eba0 0308 	sub.w	r3, r0, r8
 800b63a:	fa09 f303 	lsl.w	r3, r9, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	46a2      	mov	sl, r4
 800b642:	9304      	str	r3, [sp, #16]
 800b644:	e7d2      	b.n	800b5ec <_svfiprintf_r+0x9c>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d19      	adds	r1, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9103      	str	r1, [sp, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbb      	ittet	lt
 800b652:	425b      	neglt	r3, r3
 800b654:	f042 0202 	orrlt.w	r2, r2, #2
 800b658:	9307      	strge	r3, [sp, #28]
 800b65a:	9307      	strlt	r3, [sp, #28]
 800b65c:	bfb8      	it	lt
 800b65e:	9204      	strlt	r2, [sp, #16]
 800b660:	7823      	ldrb	r3, [r4, #0]
 800b662:	2b2e      	cmp	r3, #46	; 0x2e
 800b664:	d10c      	bne.n	800b680 <_svfiprintf_r+0x130>
 800b666:	7863      	ldrb	r3, [r4, #1]
 800b668:	2b2a      	cmp	r3, #42	; 0x2a
 800b66a:	d135      	bne.n	800b6d8 <_svfiprintf_r+0x188>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	3402      	adds	r4, #2
 800b670:	1d1a      	adds	r2, r3, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	9203      	str	r2, [sp, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	bfb8      	it	lt
 800b67a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b67e:	9305      	str	r3, [sp, #20]
 800b680:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b740 <_svfiprintf_r+0x1f0>
 800b684:	2203      	movs	r2, #3
 800b686:	4650      	mov	r0, sl
 800b688:	7821      	ldrb	r1, [r4, #0]
 800b68a:	f7ff fa85 	bl	800ab98 <memchr>
 800b68e:	b140      	cbz	r0, 800b6a2 <_svfiprintf_r+0x152>
 800b690:	2340      	movs	r3, #64	; 0x40
 800b692:	eba0 000a 	sub.w	r0, r0, sl
 800b696:	fa03 f000 	lsl.w	r0, r3, r0
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	3401      	adds	r4, #1
 800b69e:	4303      	orrs	r3, r0
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a6:	2206      	movs	r2, #6
 800b6a8:	4826      	ldr	r0, [pc, #152]	; (800b744 <_svfiprintf_r+0x1f4>)
 800b6aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ae:	f7ff fa73 	bl	800ab98 <memchr>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d038      	beq.n	800b728 <_svfiprintf_r+0x1d8>
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <_svfiprintf_r+0x1f8>)
 800b6b8:	bb1b      	cbnz	r3, 800b702 <_svfiprintf_r+0x1b2>
 800b6ba:	9b03      	ldr	r3, [sp, #12]
 800b6bc:	3307      	adds	r3, #7
 800b6be:	f023 0307 	bic.w	r3, r3, #7
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	9303      	str	r3, [sp, #12]
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	4433      	add	r3, r6
 800b6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b6cc:	e767      	b.n	800b59e <_svfiprintf_r+0x4e>
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d6:	e7a5      	b.n	800b624 <_svfiprintf_r+0xd4>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f04f 0c0a 	mov.w	ip, #10
 800b6de:	4619      	mov	r1, r3
 800b6e0:	3401      	adds	r4, #1
 800b6e2:	9305      	str	r3, [sp, #20]
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ea:	3a30      	subs	r2, #48	; 0x30
 800b6ec:	2a09      	cmp	r2, #9
 800b6ee:	d903      	bls.n	800b6f8 <_svfiprintf_r+0x1a8>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0c5      	beq.n	800b680 <_svfiprintf_r+0x130>
 800b6f4:	9105      	str	r1, [sp, #20]
 800b6f6:	e7c3      	b.n	800b680 <_svfiprintf_r+0x130>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b700:	e7f0      	b.n	800b6e4 <_svfiprintf_r+0x194>
 800b702:	ab03      	add	r3, sp, #12
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	462a      	mov	r2, r5
 800b708:	4638      	mov	r0, r7
 800b70a:	4b10      	ldr	r3, [pc, #64]	; (800b74c <_svfiprintf_r+0x1fc>)
 800b70c:	a904      	add	r1, sp, #16
 800b70e:	f7fd ffa9 	bl	8009664 <_printf_float>
 800b712:	1c42      	adds	r2, r0, #1
 800b714:	4606      	mov	r6, r0
 800b716:	d1d6      	bne.n	800b6c6 <_svfiprintf_r+0x176>
 800b718:	89ab      	ldrh	r3, [r5, #12]
 800b71a:	065b      	lsls	r3, r3, #25
 800b71c:	f53f af2c 	bmi.w	800b578 <_svfiprintf_r+0x28>
 800b720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b722:	b01d      	add	sp, #116	; 0x74
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4638      	mov	r0, r7
 800b730:	4b06      	ldr	r3, [pc, #24]	; (800b74c <_svfiprintf_r+0x1fc>)
 800b732:	a904      	add	r1, sp, #16
 800b734:	f7fe fa32 	bl	8009b9c <_printf_i>
 800b738:	e7eb      	b.n	800b712 <_svfiprintf_r+0x1c2>
 800b73a:	bf00      	nop
 800b73c:	0800ca7c 	.word	0x0800ca7c
 800b740:	0800ca82 	.word	0x0800ca82
 800b744:	0800ca86 	.word	0x0800ca86
 800b748:	08009665 	.word	0x08009665
 800b74c:	0800b499 	.word	0x0800b499

0800b750 <__sfputc_r>:
 800b750:	6893      	ldr	r3, [r2, #8]
 800b752:	b410      	push	{r4}
 800b754:	3b01      	subs	r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	6093      	str	r3, [r2, #8]
 800b75a:	da07      	bge.n	800b76c <__sfputc_r+0x1c>
 800b75c:	6994      	ldr	r4, [r2, #24]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	db01      	blt.n	800b766 <__sfputc_r+0x16>
 800b762:	290a      	cmp	r1, #10
 800b764:	d102      	bne.n	800b76c <__sfputc_r+0x1c>
 800b766:	bc10      	pop	{r4}
 800b768:	f000 b95a 	b.w	800ba20 <__swbuf_r>
 800b76c:	6813      	ldr	r3, [r2, #0]
 800b76e:	1c58      	adds	r0, r3, #1
 800b770:	6010      	str	r0, [r2, #0]
 800b772:	7019      	strb	r1, [r3, #0]
 800b774:	4608      	mov	r0, r1
 800b776:	bc10      	pop	{r4}
 800b778:	4770      	bx	lr

0800b77a <__sfputs_r>:
 800b77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77c:	4606      	mov	r6, r0
 800b77e:	460f      	mov	r7, r1
 800b780:	4614      	mov	r4, r2
 800b782:	18d5      	adds	r5, r2, r3
 800b784:	42ac      	cmp	r4, r5
 800b786:	d101      	bne.n	800b78c <__sfputs_r+0x12>
 800b788:	2000      	movs	r0, #0
 800b78a:	e007      	b.n	800b79c <__sfputs_r+0x22>
 800b78c:	463a      	mov	r2, r7
 800b78e:	4630      	mov	r0, r6
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	f7ff ffdc 	bl	800b750 <__sfputc_r>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d1f3      	bne.n	800b784 <__sfputs_r+0xa>
 800b79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7a0 <_vfiprintf_r>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	460d      	mov	r5, r1
 800b7a6:	4614      	mov	r4, r2
 800b7a8:	4698      	mov	r8, r3
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	b09d      	sub	sp, #116	; 0x74
 800b7ae:	b118      	cbz	r0, 800b7b8 <_vfiprintf_r+0x18>
 800b7b0:	6983      	ldr	r3, [r0, #24]
 800b7b2:	b90b      	cbnz	r3, 800b7b8 <_vfiprintf_r+0x18>
 800b7b4:	f000 fb12 	bl	800bddc <__sinit>
 800b7b8:	4b89      	ldr	r3, [pc, #548]	; (800b9e0 <_vfiprintf_r+0x240>)
 800b7ba:	429d      	cmp	r5, r3
 800b7bc:	d11b      	bne.n	800b7f6 <_vfiprintf_r+0x56>
 800b7be:	6875      	ldr	r5, [r6, #4]
 800b7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c2:	07d9      	lsls	r1, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_vfiprintf_r+0x32>
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	059a      	lsls	r2, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_vfiprintf_r+0x32>
 800b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ce:	f000 fba3 	bl	800bf18 <__retarget_lock_acquire_recursive>
 800b7d2:	89ab      	ldrh	r3, [r5, #12]
 800b7d4:	071b      	lsls	r3, r3, #28
 800b7d6:	d501      	bpl.n	800b7dc <_vfiprintf_r+0x3c>
 800b7d8:	692b      	ldr	r3, [r5, #16]
 800b7da:	b9eb      	cbnz	r3, 800b818 <_vfiprintf_r+0x78>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f000 f970 	bl	800bac4 <__swsetup_r>
 800b7e4:	b1c0      	cbz	r0, 800b818 <_vfiprintf_r+0x78>
 800b7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e8:	07dc      	lsls	r4, r3, #31
 800b7ea:	d50e      	bpl.n	800b80a <_vfiprintf_r+0x6a>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	b01d      	add	sp, #116	; 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	4b7b      	ldr	r3, [pc, #492]	; (800b9e4 <_vfiprintf_r+0x244>)
 800b7f8:	429d      	cmp	r5, r3
 800b7fa:	d101      	bne.n	800b800 <_vfiprintf_r+0x60>
 800b7fc:	68b5      	ldr	r5, [r6, #8]
 800b7fe:	e7df      	b.n	800b7c0 <_vfiprintf_r+0x20>
 800b800:	4b79      	ldr	r3, [pc, #484]	; (800b9e8 <_vfiprintf_r+0x248>)
 800b802:	429d      	cmp	r5, r3
 800b804:	bf08      	it	eq
 800b806:	68f5      	ldreq	r5, [r6, #12]
 800b808:	e7da      	b.n	800b7c0 <_vfiprintf_r+0x20>
 800b80a:	89ab      	ldrh	r3, [r5, #12]
 800b80c:	0598      	lsls	r0, r3, #22
 800b80e:	d4ed      	bmi.n	800b7ec <_vfiprintf_r+0x4c>
 800b810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b812:	f000 fb82 	bl	800bf1a <__retarget_lock_release_recursive>
 800b816:	e7e9      	b.n	800b7ec <_vfiprintf_r+0x4c>
 800b818:	2300      	movs	r3, #0
 800b81a:	9309      	str	r3, [sp, #36]	; 0x24
 800b81c:	2320      	movs	r3, #32
 800b81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b822:	2330      	movs	r3, #48	; 0x30
 800b824:	f04f 0901 	mov.w	r9, #1
 800b828:	f8cd 800c 	str.w	r8, [sp, #12]
 800b82c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b9ec <_vfiprintf_r+0x24c>
 800b830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b834:	4623      	mov	r3, r4
 800b836:	469a      	mov	sl, r3
 800b838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83c:	b10a      	cbz	r2, 800b842 <_vfiprintf_r+0xa2>
 800b83e:	2a25      	cmp	r2, #37	; 0x25
 800b840:	d1f9      	bne.n	800b836 <_vfiprintf_r+0x96>
 800b842:	ebba 0b04 	subs.w	fp, sl, r4
 800b846:	d00b      	beq.n	800b860 <_vfiprintf_r+0xc0>
 800b848:	465b      	mov	r3, fp
 800b84a:	4622      	mov	r2, r4
 800b84c:	4629      	mov	r1, r5
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff ff93 	bl	800b77a <__sfputs_r>
 800b854:	3001      	adds	r0, #1
 800b856:	f000 80aa 	beq.w	800b9ae <_vfiprintf_r+0x20e>
 800b85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b85c:	445a      	add	r2, fp
 800b85e:	9209      	str	r2, [sp, #36]	; 0x24
 800b860:	f89a 3000 	ldrb.w	r3, [sl]
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 80a2 	beq.w	800b9ae <_vfiprintf_r+0x20e>
 800b86a:	2300      	movs	r3, #0
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b874:	f10a 0a01 	add.w	sl, sl, #1
 800b878:	9304      	str	r3, [sp, #16]
 800b87a:	9307      	str	r3, [sp, #28]
 800b87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b880:	931a      	str	r3, [sp, #104]	; 0x68
 800b882:	4654      	mov	r4, sl
 800b884:	2205      	movs	r2, #5
 800b886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88a:	4858      	ldr	r0, [pc, #352]	; (800b9ec <_vfiprintf_r+0x24c>)
 800b88c:	f7ff f984 	bl	800ab98 <memchr>
 800b890:	9a04      	ldr	r2, [sp, #16]
 800b892:	b9d8      	cbnz	r0, 800b8cc <_vfiprintf_r+0x12c>
 800b894:	06d1      	lsls	r1, r2, #27
 800b896:	bf44      	itt	mi
 800b898:	2320      	movmi	r3, #32
 800b89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89e:	0713      	lsls	r3, r2, #28
 800b8a0:	bf44      	itt	mi
 800b8a2:	232b      	movmi	r3, #43	; 0x2b
 800b8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ae:	d015      	beq.n	800b8dc <_vfiprintf_r+0x13c>
 800b8b0:	4654      	mov	r4, sl
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	f04f 0c0a 	mov.w	ip, #10
 800b8b8:	9a07      	ldr	r2, [sp, #28]
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c0:	3b30      	subs	r3, #48	; 0x30
 800b8c2:	2b09      	cmp	r3, #9
 800b8c4:	d94e      	bls.n	800b964 <_vfiprintf_r+0x1c4>
 800b8c6:	b1b0      	cbz	r0, 800b8f6 <_vfiprintf_r+0x156>
 800b8c8:	9207      	str	r2, [sp, #28]
 800b8ca:	e014      	b.n	800b8f6 <_vfiprintf_r+0x156>
 800b8cc:	eba0 0308 	sub.w	r3, r0, r8
 800b8d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	46a2      	mov	sl, r4
 800b8d8:	9304      	str	r3, [sp, #16]
 800b8da:	e7d2      	b.n	800b882 <_vfiprintf_r+0xe2>
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	1d19      	adds	r1, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	9103      	str	r1, [sp, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfbb      	ittet	lt
 800b8e8:	425b      	neglt	r3, r3
 800b8ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ee:	9307      	strge	r3, [sp, #28]
 800b8f0:	9307      	strlt	r3, [sp, #28]
 800b8f2:	bfb8      	it	lt
 800b8f4:	9204      	strlt	r2, [sp, #16]
 800b8f6:	7823      	ldrb	r3, [r4, #0]
 800b8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b8fa:	d10c      	bne.n	800b916 <_vfiprintf_r+0x176>
 800b8fc:	7863      	ldrb	r3, [r4, #1]
 800b8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b900:	d135      	bne.n	800b96e <_vfiprintf_r+0x1ce>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	3402      	adds	r4, #2
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	9203      	str	r2, [sp, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfb8      	it	lt
 800b910:	f04f 33ff 	movlt.w	r3, #4294967295
 800b914:	9305      	str	r3, [sp, #20]
 800b916:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b9f0 <_vfiprintf_r+0x250>
 800b91a:	2203      	movs	r2, #3
 800b91c:	4650      	mov	r0, sl
 800b91e:	7821      	ldrb	r1, [r4, #0]
 800b920:	f7ff f93a 	bl	800ab98 <memchr>
 800b924:	b140      	cbz	r0, 800b938 <_vfiprintf_r+0x198>
 800b926:	2340      	movs	r3, #64	; 0x40
 800b928:	eba0 000a 	sub.w	r0, r0, sl
 800b92c:	fa03 f000 	lsl.w	r0, r3, r0
 800b930:	9b04      	ldr	r3, [sp, #16]
 800b932:	3401      	adds	r4, #1
 800b934:	4303      	orrs	r3, r0
 800b936:	9304      	str	r3, [sp, #16]
 800b938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b93c:	2206      	movs	r2, #6
 800b93e:	482d      	ldr	r0, [pc, #180]	; (800b9f4 <_vfiprintf_r+0x254>)
 800b940:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b944:	f7ff f928 	bl	800ab98 <memchr>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d03f      	beq.n	800b9cc <_vfiprintf_r+0x22c>
 800b94c:	4b2a      	ldr	r3, [pc, #168]	; (800b9f8 <_vfiprintf_r+0x258>)
 800b94e:	bb1b      	cbnz	r3, 800b998 <_vfiprintf_r+0x1f8>
 800b950:	9b03      	ldr	r3, [sp, #12]
 800b952:	3307      	adds	r3, #7
 800b954:	f023 0307 	bic.w	r3, r3, #7
 800b958:	3308      	adds	r3, #8
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95e:	443b      	add	r3, r7
 800b960:	9309      	str	r3, [sp, #36]	; 0x24
 800b962:	e767      	b.n	800b834 <_vfiprintf_r+0x94>
 800b964:	460c      	mov	r4, r1
 800b966:	2001      	movs	r0, #1
 800b968:	fb0c 3202 	mla	r2, ip, r2, r3
 800b96c:	e7a5      	b.n	800b8ba <_vfiprintf_r+0x11a>
 800b96e:	2300      	movs	r3, #0
 800b970:	f04f 0c0a 	mov.w	ip, #10
 800b974:	4619      	mov	r1, r3
 800b976:	3401      	adds	r4, #1
 800b978:	9305      	str	r3, [sp, #20]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b980:	3a30      	subs	r2, #48	; 0x30
 800b982:	2a09      	cmp	r2, #9
 800b984:	d903      	bls.n	800b98e <_vfiprintf_r+0x1ee>
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0c5      	beq.n	800b916 <_vfiprintf_r+0x176>
 800b98a:	9105      	str	r1, [sp, #20]
 800b98c:	e7c3      	b.n	800b916 <_vfiprintf_r+0x176>
 800b98e:	4604      	mov	r4, r0
 800b990:	2301      	movs	r3, #1
 800b992:	fb0c 2101 	mla	r1, ip, r1, r2
 800b996:	e7f0      	b.n	800b97a <_vfiprintf_r+0x1da>
 800b998:	ab03      	add	r3, sp, #12
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <_vfiprintf_r+0x25c>)
 800b9a2:	a904      	add	r1, sp, #16
 800b9a4:	f7fd fe5e 	bl	8009664 <_printf_float>
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	1c78      	adds	r0, r7, #1
 800b9ac:	d1d6      	bne.n	800b95c <_vfiprintf_r+0x1bc>
 800b9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9b0:	07d9      	lsls	r1, r3, #31
 800b9b2:	d405      	bmi.n	800b9c0 <_vfiprintf_r+0x220>
 800b9b4:	89ab      	ldrh	r3, [r5, #12]
 800b9b6:	059a      	lsls	r2, r3, #22
 800b9b8:	d402      	bmi.n	800b9c0 <_vfiprintf_r+0x220>
 800b9ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9bc:	f000 faad 	bl	800bf1a <__retarget_lock_release_recursive>
 800b9c0:	89ab      	ldrh	r3, [r5, #12]
 800b9c2:	065b      	lsls	r3, r3, #25
 800b9c4:	f53f af12 	bmi.w	800b7ec <_vfiprintf_r+0x4c>
 800b9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ca:	e711      	b.n	800b7f0 <_vfiprintf_r+0x50>
 800b9cc:	ab03      	add	r3, sp, #12
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <_vfiprintf_r+0x25c>)
 800b9d6:	a904      	add	r1, sp, #16
 800b9d8:	f7fe f8e0 	bl	8009b9c <_printf_i>
 800b9dc:	e7e4      	b.n	800b9a8 <_vfiprintf_r+0x208>
 800b9de:	bf00      	nop
 800b9e0:	0800cab0 	.word	0x0800cab0
 800b9e4:	0800cad0 	.word	0x0800cad0
 800b9e8:	0800ca90 	.word	0x0800ca90
 800b9ec:	0800ca7c 	.word	0x0800ca7c
 800b9f0:	0800ca82 	.word	0x0800ca82
 800b9f4:	0800ca86 	.word	0x0800ca86
 800b9f8:	08009665 	.word	0x08009665
 800b9fc:	0800b77b 	.word	0x0800b77b

0800ba00 <_sbrk_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	2300      	movs	r3, #0
 800ba04:	4d05      	ldr	r5, [pc, #20]	; (800ba1c <_sbrk_r+0x1c>)
 800ba06:	4604      	mov	r4, r0
 800ba08:	4608      	mov	r0, r1
 800ba0a:	602b      	str	r3, [r5, #0]
 800ba0c:	f7f8 f858 	bl	8003ac0 <_sbrk>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_sbrk_r+0x1a>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_sbrk_r+0x1a>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	200006dc 	.word	0x200006dc

0800ba20 <__swbuf_r>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	460e      	mov	r6, r1
 800ba24:	4614      	mov	r4, r2
 800ba26:	4605      	mov	r5, r0
 800ba28:	b118      	cbz	r0, 800ba32 <__swbuf_r+0x12>
 800ba2a:	6983      	ldr	r3, [r0, #24]
 800ba2c:	b90b      	cbnz	r3, 800ba32 <__swbuf_r+0x12>
 800ba2e:	f000 f9d5 	bl	800bddc <__sinit>
 800ba32:	4b21      	ldr	r3, [pc, #132]	; (800bab8 <__swbuf_r+0x98>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	d12b      	bne.n	800ba90 <__swbuf_r+0x70>
 800ba38:	686c      	ldr	r4, [r5, #4]
 800ba3a:	69a3      	ldr	r3, [r4, #24]
 800ba3c:	60a3      	str	r3, [r4, #8]
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	071a      	lsls	r2, r3, #28
 800ba42:	d52f      	bpl.n	800baa4 <__swbuf_r+0x84>
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	b36b      	cbz	r3, 800baa4 <__swbuf_r+0x84>
 800ba48:	6923      	ldr	r3, [r4, #16]
 800ba4a:	6820      	ldr	r0, [r4, #0]
 800ba4c:	b2f6      	uxtb	r6, r6
 800ba4e:	1ac0      	subs	r0, r0, r3
 800ba50:	6963      	ldr	r3, [r4, #20]
 800ba52:	4637      	mov	r7, r6
 800ba54:	4283      	cmp	r3, r0
 800ba56:	dc04      	bgt.n	800ba62 <__swbuf_r+0x42>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 f92a 	bl	800bcb4 <_fflush_r>
 800ba60:	bb30      	cbnz	r0, 800bab0 <__swbuf_r+0x90>
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	3001      	adds	r0, #1
 800ba66:	3b01      	subs	r3, #1
 800ba68:	60a3      	str	r3, [r4, #8]
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	6022      	str	r2, [r4, #0]
 800ba70:	701e      	strb	r6, [r3, #0]
 800ba72:	6963      	ldr	r3, [r4, #20]
 800ba74:	4283      	cmp	r3, r0
 800ba76:	d004      	beq.n	800ba82 <__swbuf_r+0x62>
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	07db      	lsls	r3, r3, #31
 800ba7c:	d506      	bpl.n	800ba8c <__swbuf_r+0x6c>
 800ba7e:	2e0a      	cmp	r6, #10
 800ba80:	d104      	bne.n	800ba8c <__swbuf_r+0x6c>
 800ba82:	4621      	mov	r1, r4
 800ba84:	4628      	mov	r0, r5
 800ba86:	f000 f915 	bl	800bcb4 <_fflush_r>
 800ba8a:	b988      	cbnz	r0, 800bab0 <__swbuf_r+0x90>
 800ba8c:	4638      	mov	r0, r7
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <__swbuf_r+0x9c>)
 800ba92:	429c      	cmp	r4, r3
 800ba94:	d101      	bne.n	800ba9a <__swbuf_r+0x7a>
 800ba96:	68ac      	ldr	r4, [r5, #8]
 800ba98:	e7cf      	b.n	800ba3a <__swbuf_r+0x1a>
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <__swbuf_r+0xa0>)
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	bf08      	it	eq
 800baa0:	68ec      	ldreq	r4, [r5, #12]
 800baa2:	e7ca      	b.n	800ba3a <__swbuf_r+0x1a>
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f80c 	bl	800bac4 <__swsetup_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	d0cb      	beq.n	800ba48 <__swbuf_r+0x28>
 800bab0:	f04f 37ff 	mov.w	r7, #4294967295
 800bab4:	e7ea      	b.n	800ba8c <__swbuf_r+0x6c>
 800bab6:	bf00      	nop
 800bab8:	0800cab0 	.word	0x0800cab0
 800babc:	0800cad0 	.word	0x0800cad0
 800bac0:	0800ca90 	.word	0x0800ca90

0800bac4 <__swsetup_r>:
 800bac4:	4b32      	ldr	r3, [pc, #200]	; (800bb90 <__swsetup_r+0xcc>)
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	681d      	ldr	r5, [r3, #0]
 800baca:	4606      	mov	r6, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	b125      	cbz	r5, 800bada <__swsetup_r+0x16>
 800bad0:	69ab      	ldr	r3, [r5, #24]
 800bad2:	b913      	cbnz	r3, 800bada <__swsetup_r+0x16>
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 f981 	bl	800bddc <__sinit>
 800bada:	4b2e      	ldr	r3, [pc, #184]	; (800bb94 <__swsetup_r+0xd0>)
 800badc:	429c      	cmp	r4, r3
 800bade:	d10f      	bne.n	800bb00 <__swsetup_r+0x3c>
 800bae0:	686c      	ldr	r4, [r5, #4]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bae8:	0719      	lsls	r1, r3, #28
 800baea:	d42c      	bmi.n	800bb46 <__swsetup_r+0x82>
 800baec:	06dd      	lsls	r5, r3, #27
 800baee:	d411      	bmi.n	800bb14 <__swsetup_r+0x50>
 800baf0:	2309      	movs	r3, #9
 800baf2:	6033      	str	r3, [r6, #0]
 800baf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	e03e      	b.n	800bb7e <__swsetup_r+0xba>
 800bb00:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <__swsetup_r+0xd4>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d101      	bne.n	800bb0a <__swsetup_r+0x46>
 800bb06:	68ac      	ldr	r4, [r5, #8]
 800bb08:	e7eb      	b.n	800bae2 <__swsetup_r+0x1e>
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <__swsetup_r+0xd8>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	bf08      	it	eq
 800bb10:	68ec      	ldreq	r4, [r5, #12]
 800bb12:	e7e6      	b.n	800bae2 <__swsetup_r+0x1e>
 800bb14:	0758      	lsls	r0, r3, #29
 800bb16:	d512      	bpl.n	800bb3e <__swsetup_r+0x7a>
 800bb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb1a:	b141      	cbz	r1, 800bb2e <__swsetup_r+0x6a>
 800bb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb20:	4299      	cmp	r1, r3
 800bb22:	d002      	beq.n	800bb2a <__swsetup_r+0x66>
 800bb24:	4630      	mov	r0, r6
 800bb26:	f7ff fbdb 	bl	800b2e0 <_free_r>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	2300      	movs	r3, #0
 800bb38:	6063      	str	r3, [r4, #4]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f043 0308 	orr.w	r3, r3, #8
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	b94b      	cbnz	r3, 800bb5e <__swsetup_r+0x9a>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb54:	d003      	beq.n	800bb5e <__swsetup_r+0x9a>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 fa05 	bl	800bf68 <__smakebuf_r>
 800bb5e:	89a0      	ldrh	r0, [r4, #12]
 800bb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb64:	f010 0301 	ands.w	r3, r0, #1
 800bb68:	d00a      	beq.n	800bb80 <__swsetup_r+0xbc>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60a3      	str	r3, [r4, #8]
 800bb6e:	6963      	ldr	r3, [r4, #20]
 800bb70:	425b      	negs	r3, r3
 800bb72:	61a3      	str	r3, [r4, #24]
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	b943      	cbnz	r3, 800bb8a <__swsetup_r+0xc6>
 800bb78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb7c:	d1ba      	bne.n	800baf4 <__swsetup_r+0x30>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}
 800bb80:	0781      	lsls	r1, r0, #30
 800bb82:	bf58      	it	pl
 800bb84:	6963      	ldrpl	r3, [r4, #20]
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	e7f4      	b.n	800bb74 <__swsetup_r+0xb0>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e7f7      	b.n	800bb7e <__swsetup_r+0xba>
 800bb8e:	bf00      	nop
 800bb90:	20000028 	.word	0x20000028
 800bb94:	0800cab0 	.word	0x0800cab0
 800bb98:	0800cad0 	.word	0x0800cad0
 800bb9c:	0800ca90 	.word	0x0800ca90

0800bba0 <abort>:
 800bba0:	2006      	movs	r0, #6
 800bba2:	b508      	push	{r3, lr}
 800bba4:	f000 fab0 	bl	800c108 <raise>
 800bba8:	2001      	movs	r0, #1
 800bbaa:	f7f7 ff16 	bl	80039da <_exit>
	...

0800bbb0 <__sflush_r>:
 800bbb0:	898a      	ldrh	r2, [r1, #12]
 800bbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb4:	4605      	mov	r5, r0
 800bbb6:	0710      	lsls	r0, r2, #28
 800bbb8:	460c      	mov	r4, r1
 800bbba:	d457      	bmi.n	800bc6c <__sflush_r+0xbc>
 800bbbc:	684b      	ldr	r3, [r1, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dc04      	bgt.n	800bbcc <__sflush_r+0x1c>
 800bbc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	dc01      	bgt.n	800bbcc <__sflush_r+0x1c>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbce:	2e00      	cmp	r6, #0
 800bbd0:	d0fa      	beq.n	800bbc8 <__sflush_r+0x18>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbd8:	682f      	ldr	r7, [r5, #0]
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	d032      	beq.n	800bc44 <__sflush_r+0x94>
 800bbde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbe0:	89a3      	ldrh	r3, [r4, #12]
 800bbe2:	075a      	lsls	r2, r3, #29
 800bbe4:	d505      	bpl.n	800bbf2 <__sflush_r+0x42>
 800bbe6:	6863      	ldr	r3, [r4, #4]
 800bbe8:	1ac0      	subs	r0, r0, r3
 800bbea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbec:	b10b      	cbz	r3, 800bbf2 <__sflush_r+0x42>
 800bbee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbf0:	1ac0      	subs	r0, r0, r3
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	6a21      	ldr	r1, [r4, #32]
 800bbfc:	47b0      	blx	r6
 800bbfe:	1c43      	adds	r3, r0, #1
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	d106      	bne.n	800bc12 <__sflush_r+0x62>
 800bc04:	6829      	ldr	r1, [r5, #0]
 800bc06:	291d      	cmp	r1, #29
 800bc08:	d82c      	bhi.n	800bc64 <__sflush_r+0xb4>
 800bc0a:	4a29      	ldr	r2, [pc, #164]	; (800bcb0 <__sflush_r+0x100>)
 800bc0c:	40ca      	lsrs	r2, r1
 800bc0e:	07d6      	lsls	r6, r2, #31
 800bc10:	d528      	bpl.n	800bc64 <__sflush_r+0xb4>
 800bc12:	2200      	movs	r2, #0
 800bc14:	6062      	str	r2, [r4, #4]
 800bc16:	6922      	ldr	r2, [r4, #16]
 800bc18:	04d9      	lsls	r1, r3, #19
 800bc1a:	6022      	str	r2, [r4, #0]
 800bc1c:	d504      	bpl.n	800bc28 <__sflush_r+0x78>
 800bc1e:	1c42      	adds	r2, r0, #1
 800bc20:	d101      	bne.n	800bc26 <__sflush_r+0x76>
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	b903      	cbnz	r3, 800bc28 <__sflush_r+0x78>
 800bc26:	6560      	str	r0, [r4, #84]	; 0x54
 800bc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc2a:	602f      	str	r7, [r5, #0]
 800bc2c:	2900      	cmp	r1, #0
 800bc2e:	d0cb      	beq.n	800bbc8 <__sflush_r+0x18>
 800bc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc34:	4299      	cmp	r1, r3
 800bc36:	d002      	beq.n	800bc3e <__sflush_r+0x8e>
 800bc38:	4628      	mov	r0, r5
 800bc3a:	f7ff fb51 	bl	800b2e0 <_free_r>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	6360      	str	r0, [r4, #52]	; 0x34
 800bc42:	e7c2      	b.n	800bbca <__sflush_r+0x1a>
 800bc44:	6a21      	ldr	r1, [r4, #32]
 800bc46:	2301      	movs	r3, #1
 800bc48:	4628      	mov	r0, r5
 800bc4a:	47b0      	blx	r6
 800bc4c:	1c41      	adds	r1, r0, #1
 800bc4e:	d1c7      	bne.n	800bbe0 <__sflush_r+0x30>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0c4      	beq.n	800bbe0 <__sflush_r+0x30>
 800bc56:	2b1d      	cmp	r3, #29
 800bc58:	d001      	beq.n	800bc5e <__sflush_r+0xae>
 800bc5a:	2b16      	cmp	r3, #22
 800bc5c:	d101      	bne.n	800bc62 <__sflush_r+0xb2>
 800bc5e:	602f      	str	r7, [r5, #0]
 800bc60:	e7b2      	b.n	800bbc8 <__sflush_r+0x18>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc68:	81a3      	strh	r3, [r4, #12]
 800bc6a:	e7ae      	b.n	800bbca <__sflush_r+0x1a>
 800bc6c:	690f      	ldr	r7, [r1, #16]
 800bc6e:	2f00      	cmp	r7, #0
 800bc70:	d0aa      	beq.n	800bbc8 <__sflush_r+0x18>
 800bc72:	0793      	lsls	r3, r2, #30
 800bc74:	bf18      	it	ne
 800bc76:	2300      	movne	r3, #0
 800bc78:	680e      	ldr	r6, [r1, #0]
 800bc7a:	bf08      	it	eq
 800bc7c:	694b      	ldreq	r3, [r1, #20]
 800bc7e:	1bf6      	subs	r6, r6, r7
 800bc80:	600f      	str	r7, [r1, #0]
 800bc82:	608b      	str	r3, [r1, #8]
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd9f      	ble.n	800bbc8 <__sflush_r+0x18>
 800bc88:	4633      	mov	r3, r6
 800bc8a:	463a      	mov	r2, r7
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	6a21      	ldr	r1, [r4, #32]
 800bc90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bc94:	47e0      	blx	ip
 800bc96:	2800      	cmp	r0, #0
 800bc98:	dc06      	bgt.n	800bca8 <__sflush_r+0xf8>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bca4:	81a3      	strh	r3, [r4, #12]
 800bca6:	e790      	b.n	800bbca <__sflush_r+0x1a>
 800bca8:	4407      	add	r7, r0
 800bcaa:	1a36      	subs	r6, r6, r0
 800bcac:	e7ea      	b.n	800bc84 <__sflush_r+0xd4>
 800bcae:	bf00      	nop
 800bcb0:	20400001 	.word	0x20400001

0800bcb4 <_fflush_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	690b      	ldr	r3, [r1, #16]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_fflush_r+0x10>
 800bcbe:	2500      	movs	r5, #0
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	b118      	cbz	r0, 800bcce <_fflush_r+0x1a>
 800bcc6:	6983      	ldr	r3, [r0, #24]
 800bcc8:	b90b      	cbnz	r3, 800bcce <_fflush_r+0x1a>
 800bcca:	f000 f887 	bl	800bddc <__sinit>
 800bcce:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <_fflush_r+0x6c>)
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	d11b      	bne.n	800bd0c <_fflush_r+0x58>
 800bcd4:	686c      	ldr	r4, [r5, #4]
 800bcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0ef      	beq.n	800bcbe <_fflush_r+0xa>
 800bcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bce0:	07d0      	lsls	r0, r2, #31
 800bce2:	d404      	bmi.n	800bcee <_fflush_r+0x3a>
 800bce4:	0599      	lsls	r1, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_fflush_r+0x3a>
 800bce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcea:	f000 f915 	bl	800bf18 <__retarget_lock_acquire_recursive>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	f7ff ff5d 	bl	800bbb0 <__sflush_r>
 800bcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	07da      	lsls	r2, r3, #31
 800bcfc:	d4e0      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	059b      	lsls	r3, r3, #22
 800bd02:	d4dd      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 f908 	bl	800bf1a <__retarget_lock_release_recursive>
 800bd0a:	e7d9      	b.n	800bcc0 <_fflush_r+0xc>
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <_fflush_r+0x70>)
 800bd0e:	429c      	cmp	r4, r3
 800bd10:	d101      	bne.n	800bd16 <_fflush_r+0x62>
 800bd12:	68ac      	ldr	r4, [r5, #8]
 800bd14:	e7df      	b.n	800bcd6 <_fflush_r+0x22>
 800bd16:	4b04      	ldr	r3, [pc, #16]	; (800bd28 <_fflush_r+0x74>)
 800bd18:	429c      	cmp	r4, r3
 800bd1a:	bf08      	it	eq
 800bd1c:	68ec      	ldreq	r4, [r5, #12]
 800bd1e:	e7da      	b.n	800bcd6 <_fflush_r+0x22>
 800bd20:	0800cab0 	.word	0x0800cab0
 800bd24:	0800cad0 	.word	0x0800cad0
 800bd28:	0800ca90 	.word	0x0800ca90

0800bd2c <std>:
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	4604      	mov	r4, r0
 800bd32:	e9c0 3300 	strd	r3, r3, [r0]
 800bd36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd3a:	6083      	str	r3, [r0, #8]
 800bd3c:	8181      	strh	r1, [r0, #12]
 800bd3e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd40:	81c2      	strh	r2, [r0, #14]
 800bd42:	6183      	str	r3, [r0, #24]
 800bd44:	4619      	mov	r1, r3
 800bd46:	2208      	movs	r2, #8
 800bd48:	305c      	adds	r0, #92	; 0x5c
 800bd4a:	f7fd fbe5 	bl	8009518 <memset>
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x38>)
 800bd50:	6224      	str	r4, [r4, #32]
 800bd52:	6263      	str	r3, [r4, #36]	; 0x24
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <std+0x3c>)
 800bd56:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <std+0x40>)
 800bd5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd5c:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <std+0x44>)
 800bd5e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	bf00      	nop
 800bd64:	0800c141 	.word	0x0800c141
 800bd68:	0800c163 	.word	0x0800c163
 800bd6c:	0800c19b 	.word	0x0800c19b
 800bd70:	0800c1bf 	.word	0x0800c1bf

0800bd74 <_cleanup_r>:
 800bd74:	4901      	ldr	r1, [pc, #4]	; (800bd7c <_cleanup_r+0x8>)
 800bd76:	f000 b8af 	b.w	800bed8 <_fwalk_reent>
 800bd7a:	bf00      	nop
 800bd7c:	0800bcb5 	.word	0x0800bcb5

0800bd80 <__sfmoreglue>:
 800bd80:	2268      	movs	r2, #104	; 0x68
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	1e4d      	subs	r5, r1, #1
 800bd86:	4355      	muls	r5, r2
 800bd88:	460e      	mov	r6, r1
 800bd8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd8e:	f7ff fb0f 	bl	800b3b0 <_malloc_r>
 800bd92:	4604      	mov	r4, r0
 800bd94:	b140      	cbz	r0, 800bda8 <__sfmoreglue+0x28>
 800bd96:	2100      	movs	r1, #0
 800bd98:	e9c0 1600 	strd	r1, r6, [r0]
 800bd9c:	300c      	adds	r0, #12
 800bd9e:	60a0      	str	r0, [r4, #8]
 800bda0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bda4:	f7fd fbb8 	bl	8009518 <memset>
 800bda8:	4620      	mov	r0, r4
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}

0800bdac <__sfp_lock_acquire>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__sfp_lock_acquire+0x8>)
 800bdae:	f000 b8b3 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	200006d9 	.word	0x200006d9

0800bdb8 <__sfp_lock_release>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__sfp_lock_release+0x8>)
 800bdba:	f000 b8ae 	b.w	800bf1a <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	200006d9 	.word	0x200006d9

0800bdc4 <__sinit_lock_acquire>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__sinit_lock_acquire+0x8>)
 800bdc6:	f000 b8a7 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	200006da 	.word	0x200006da

0800bdd0 <__sinit_lock_release>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__sinit_lock_release+0x8>)
 800bdd2:	f000 b8a2 	b.w	800bf1a <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	200006da 	.word	0x200006da

0800bddc <__sinit>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	f7ff fff0 	bl	800bdc4 <__sinit_lock_acquire>
 800bde4:	69a3      	ldr	r3, [r4, #24]
 800bde6:	b11b      	cbz	r3, 800bdf0 <__sinit+0x14>
 800bde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdec:	f7ff bff0 	b.w	800bdd0 <__sinit_lock_release>
 800bdf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdf4:	6523      	str	r3, [r4, #80]	; 0x50
 800bdf6:	4b13      	ldr	r3, [pc, #76]	; (800be44 <__sinit+0x68>)
 800bdf8:	4a13      	ldr	r2, [pc, #76]	; (800be48 <__sinit+0x6c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	bf08      	it	eq
 800be02:	2301      	moveq	r3, #1
 800be04:	4620      	mov	r0, r4
 800be06:	bf08      	it	eq
 800be08:	61a3      	streq	r3, [r4, #24]
 800be0a:	f000 f81f 	bl	800be4c <__sfp>
 800be0e:	6060      	str	r0, [r4, #4]
 800be10:	4620      	mov	r0, r4
 800be12:	f000 f81b 	bl	800be4c <__sfp>
 800be16:	60a0      	str	r0, [r4, #8]
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 f817 	bl	800be4c <__sfp>
 800be1e:	2200      	movs	r2, #0
 800be20:	2104      	movs	r1, #4
 800be22:	60e0      	str	r0, [r4, #12]
 800be24:	6860      	ldr	r0, [r4, #4]
 800be26:	f7ff ff81 	bl	800bd2c <std>
 800be2a:	2201      	movs	r2, #1
 800be2c:	2109      	movs	r1, #9
 800be2e:	68a0      	ldr	r0, [r4, #8]
 800be30:	f7ff ff7c 	bl	800bd2c <std>
 800be34:	2202      	movs	r2, #2
 800be36:	2112      	movs	r1, #18
 800be38:	68e0      	ldr	r0, [r4, #12]
 800be3a:	f7ff ff77 	bl	800bd2c <std>
 800be3e:	2301      	movs	r3, #1
 800be40:	61a3      	str	r3, [r4, #24]
 800be42:	e7d1      	b.n	800bde8 <__sinit+0xc>
 800be44:	0800c820 	.word	0x0800c820
 800be48:	0800bd75 	.word	0x0800bd75

0800be4c <__sfp>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	4607      	mov	r7, r0
 800be50:	f7ff ffac 	bl	800bdac <__sfp_lock_acquire>
 800be54:	4b1e      	ldr	r3, [pc, #120]	; (800bed0 <__sfp+0x84>)
 800be56:	681e      	ldr	r6, [r3, #0]
 800be58:	69b3      	ldr	r3, [r6, #24]
 800be5a:	b913      	cbnz	r3, 800be62 <__sfp+0x16>
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff ffbd 	bl	800bddc <__sinit>
 800be62:	3648      	adds	r6, #72	; 0x48
 800be64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be68:	3b01      	subs	r3, #1
 800be6a:	d503      	bpl.n	800be74 <__sfp+0x28>
 800be6c:	6833      	ldr	r3, [r6, #0]
 800be6e:	b30b      	cbz	r3, 800beb4 <__sfp+0x68>
 800be70:	6836      	ldr	r6, [r6, #0]
 800be72:	e7f7      	b.n	800be64 <__sfp+0x18>
 800be74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be78:	b9d5      	cbnz	r5, 800beb0 <__sfp+0x64>
 800be7a:	4b16      	ldr	r3, [pc, #88]	; (800bed4 <__sfp+0x88>)
 800be7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be80:	60e3      	str	r3, [r4, #12]
 800be82:	6665      	str	r5, [r4, #100]	; 0x64
 800be84:	f000 f847 	bl	800bf16 <__retarget_lock_init_recursive>
 800be88:	f7ff ff96 	bl	800bdb8 <__sfp_lock_release>
 800be8c:	2208      	movs	r2, #8
 800be8e:	4629      	mov	r1, r5
 800be90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be98:	6025      	str	r5, [r4, #0]
 800be9a:	61a5      	str	r5, [r4, #24]
 800be9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bea0:	f7fd fb3a 	bl	8009518 <memset>
 800bea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800beac:	4620      	mov	r0, r4
 800beae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb0:	3468      	adds	r4, #104	; 0x68
 800beb2:	e7d9      	b.n	800be68 <__sfp+0x1c>
 800beb4:	2104      	movs	r1, #4
 800beb6:	4638      	mov	r0, r7
 800beb8:	f7ff ff62 	bl	800bd80 <__sfmoreglue>
 800bebc:	4604      	mov	r4, r0
 800bebe:	6030      	str	r0, [r6, #0]
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1d5      	bne.n	800be70 <__sfp+0x24>
 800bec4:	f7ff ff78 	bl	800bdb8 <__sfp_lock_release>
 800bec8:	230c      	movs	r3, #12
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	e7ee      	b.n	800beac <__sfp+0x60>
 800bece:	bf00      	nop
 800bed0:	0800c820 	.word	0x0800c820
 800bed4:	ffff0001 	.word	0xffff0001

0800bed8 <_fwalk_reent>:
 800bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	4606      	mov	r6, r0
 800bede:	4688      	mov	r8, r1
 800bee0:	2700      	movs	r7, #0
 800bee2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beea:	f1b9 0901 	subs.w	r9, r9, #1
 800beee:	d505      	bpl.n	800befc <_fwalk_reent+0x24>
 800bef0:	6824      	ldr	r4, [r4, #0]
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	d1f7      	bne.n	800bee6 <_fwalk_reent+0xe>
 800bef6:	4638      	mov	r0, r7
 800bef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800befc:	89ab      	ldrh	r3, [r5, #12]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d907      	bls.n	800bf12 <_fwalk_reent+0x3a>
 800bf02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf06:	3301      	adds	r3, #1
 800bf08:	d003      	beq.n	800bf12 <_fwalk_reent+0x3a>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	47c0      	blx	r8
 800bf10:	4307      	orrs	r7, r0
 800bf12:	3568      	adds	r5, #104	; 0x68
 800bf14:	e7e9      	b.n	800beea <_fwalk_reent+0x12>

0800bf16 <__retarget_lock_init_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__retarget_lock_acquire_recursive>:
 800bf18:	4770      	bx	lr

0800bf1a <__retarget_lock_release_recursive>:
 800bf1a:	4770      	bx	lr

0800bf1c <__swhatbuf_r>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	460e      	mov	r6, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	4614      	mov	r4, r2
 800bf26:	2900      	cmp	r1, #0
 800bf28:	461d      	mov	r5, r3
 800bf2a:	b096      	sub	sp, #88	; 0x58
 800bf2c:	da08      	bge.n	800bf40 <__swhatbuf_r+0x24>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	061a      	lsls	r2, r3, #24
 800bf38:	d410      	bmi.n	800bf5c <__swhatbuf_r+0x40>
 800bf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3e:	e00e      	b.n	800bf5e <__swhatbuf_r+0x42>
 800bf40:	466a      	mov	r2, sp
 800bf42:	f000 f96f 	bl	800c224 <_fstat_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	dbf1      	blt.n	800bf2e <__swhatbuf_r+0x12>
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf54:	425a      	negs	r2, r3
 800bf56:	415a      	adcs	r2, r3
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	e7ee      	b.n	800bf3a <__swhatbuf_r+0x1e>
 800bf5c:	2340      	movs	r3, #64	; 0x40
 800bf5e:	2000      	movs	r0, #0
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	b016      	add	sp, #88	; 0x58
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf68 <__smakebuf_r>:
 800bf68:	898b      	ldrh	r3, [r1, #12]
 800bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf6c:	079d      	lsls	r5, r3, #30
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460c      	mov	r4, r1
 800bf72:	d507      	bpl.n	800bf84 <__smakebuf_r+0x1c>
 800bf74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	b002      	add	sp, #8
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	466a      	mov	r2, sp
 800bf86:	ab01      	add	r3, sp, #4
 800bf88:	f7ff ffc8 	bl	800bf1c <__swhatbuf_r>
 800bf8c:	9900      	ldr	r1, [sp, #0]
 800bf8e:	4605      	mov	r5, r0
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff fa0d 	bl	800b3b0 <_malloc_r>
 800bf96:	b948      	cbnz	r0, 800bfac <__smakebuf_r+0x44>
 800bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9c:	059a      	lsls	r2, r3, #22
 800bf9e:	d4ef      	bmi.n	800bf80 <__smakebuf_r+0x18>
 800bfa0:	f023 0303 	bic.w	r3, r3, #3
 800bfa4:	f043 0302 	orr.w	r3, r3, #2
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	e7e3      	b.n	800bf74 <__smakebuf_r+0xc>
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <__smakebuf_r+0x7c>)
 800bfae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	6020      	str	r0, [r4, #0]
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	6120      	str	r0, [r4, #16]
 800bfbe:	6163      	str	r3, [r4, #20]
 800bfc0:	9b01      	ldr	r3, [sp, #4]
 800bfc2:	b15b      	cbz	r3, 800bfdc <__smakebuf_r+0x74>
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfca:	f000 f93d 	bl	800c248 <_isatty_r>
 800bfce:	b128      	cbz	r0, 800bfdc <__smakebuf_r+0x74>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	f043 0301 	orr.w	r3, r3, #1
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	89a0      	ldrh	r0, [r4, #12]
 800bfde:	4305      	orrs	r5, r0
 800bfe0:	81a5      	strh	r5, [r4, #12]
 800bfe2:	e7cd      	b.n	800bf80 <__smakebuf_r+0x18>
 800bfe4:	0800bd75 	.word	0x0800bd75

0800bfe8 <__ascii_mbtowc>:
 800bfe8:	b082      	sub	sp, #8
 800bfea:	b901      	cbnz	r1, 800bfee <__ascii_mbtowc+0x6>
 800bfec:	a901      	add	r1, sp, #4
 800bfee:	b142      	cbz	r2, 800c002 <__ascii_mbtowc+0x1a>
 800bff0:	b14b      	cbz	r3, 800c006 <__ascii_mbtowc+0x1e>
 800bff2:	7813      	ldrb	r3, [r2, #0]
 800bff4:	600b      	str	r3, [r1, #0]
 800bff6:	7812      	ldrb	r2, [r2, #0]
 800bff8:	1e10      	subs	r0, r2, #0
 800bffa:	bf18      	it	ne
 800bffc:	2001      	movne	r0, #1
 800bffe:	b002      	add	sp, #8
 800c000:	4770      	bx	lr
 800c002:	4610      	mov	r0, r2
 800c004:	e7fb      	b.n	800bffe <__ascii_mbtowc+0x16>
 800c006:	f06f 0001 	mvn.w	r0, #1
 800c00a:	e7f8      	b.n	800bffe <__ascii_mbtowc+0x16>

0800c00c <memmove>:
 800c00c:	4288      	cmp	r0, r1
 800c00e:	b510      	push	{r4, lr}
 800c010:	eb01 0402 	add.w	r4, r1, r2
 800c014:	d902      	bls.n	800c01c <memmove+0x10>
 800c016:	4284      	cmp	r4, r0
 800c018:	4623      	mov	r3, r4
 800c01a:	d807      	bhi.n	800c02c <memmove+0x20>
 800c01c:	1e43      	subs	r3, r0, #1
 800c01e:	42a1      	cmp	r1, r4
 800c020:	d008      	beq.n	800c034 <memmove+0x28>
 800c022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c02a:	e7f8      	b.n	800c01e <memmove+0x12>
 800c02c:	4601      	mov	r1, r0
 800c02e:	4402      	add	r2, r0
 800c030:	428a      	cmp	r2, r1
 800c032:	d100      	bne.n	800c036 <memmove+0x2a>
 800c034:	bd10      	pop	{r4, pc}
 800c036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c03e:	e7f7      	b.n	800c030 <memmove+0x24>

0800c040 <__malloc_lock>:
 800c040:	4801      	ldr	r0, [pc, #4]	; (800c048 <__malloc_lock+0x8>)
 800c042:	f7ff bf69 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800c046:	bf00      	nop
 800c048:	200006d8 	.word	0x200006d8

0800c04c <__malloc_unlock>:
 800c04c:	4801      	ldr	r0, [pc, #4]	; (800c054 <__malloc_unlock+0x8>)
 800c04e:	f7ff bf64 	b.w	800bf1a <__retarget_lock_release_recursive>
 800c052:	bf00      	nop
 800c054:	200006d8 	.word	0x200006d8

0800c058 <_realloc_r>:
 800c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05c:	4680      	mov	r8, r0
 800c05e:	4614      	mov	r4, r2
 800c060:	460e      	mov	r6, r1
 800c062:	b921      	cbnz	r1, 800c06e <_realloc_r+0x16>
 800c064:	4611      	mov	r1, r2
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f7ff b9a1 	b.w	800b3b0 <_malloc_r>
 800c06e:	b92a      	cbnz	r2, 800c07c <_realloc_r+0x24>
 800c070:	f7ff f936 	bl	800b2e0 <_free_r>
 800c074:	4625      	mov	r5, r4
 800c076:	4628      	mov	r0, r5
 800c078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07c:	f000 f906 	bl	800c28c <_malloc_usable_size_r>
 800c080:	4284      	cmp	r4, r0
 800c082:	4607      	mov	r7, r0
 800c084:	d802      	bhi.n	800c08c <_realloc_r+0x34>
 800c086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c08a:	d812      	bhi.n	800c0b2 <_realloc_r+0x5a>
 800c08c:	4621      	mov	r1, r4
 800c08e:	4640      	mov	r0, r8
 800c090:	f7ff f98e 	bl	800b3b0 <_malloc_r>
 800c094:	4605      	mov	r5, r0
 800c096:	2800      	cmp	r0, #0
 800c098:	d0ed      	beq.n	800c076 <_realloc_r+0x1e>
 800c09a:	42bc      	cmp	r4, r7
 800c09c:	4622      	mov	r2, r4
 800c09e:	4631      	mov	r1, r6
 800c0a0:	bf28      	it	cs
 800c0a2:	463a      	movcs	r2, r7
 800c0a4:	f7fd fa2a 	bl	80094fc <memcpy>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	f7ff f918 	bl	800b2e0 <_free_r>
 800c0b0:	e7e1      	b.n	800c076 <_realloc_r+0x1e>
 800c0b2:	4635      	mov	r5, r6
 800c0b4:	e7df      	b.n	800c076 <_realloc_r+0x1e>

0800c0b6 <_raise_r>:
 800c0b6:	291f      	cmp	r1, #31
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	d904      	bls.n	800c0ca <_raise_r+0x14>
 800c0c0:	2316      	movs	r3, #22
 800c0c2:	6003      	str	r3, [r0, #0]
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0cc:	b112      	cbz	r2, 800c0d4 <_raise_r+0x1e>
 800c0ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0d2:	b94b      	cbnz	r3, 800c0e8 <_raise_r+0x32>
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 f831 	bl	800c13c <_getpid_r>
 800c0da:	462a      	mov	r2, r5
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e4:	f000 b818 	b.w	800c118 <_kill_r>
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d00a      	beq.n	800c102 <_raise_r+0x4c>
 800c0ec:	1c59      	adds	r1, r3, #1
 800c0ee:	d103      	bne.n	800c0f8 <_raise_r+0x42>
 800c0f0:	2316      	movs	r3, #22
 800c0f2:	6003      	str	r3, [r0, #0]
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	e7e7      	b.n	800c0c8 <_raise_r+0x12>
 800c0f8:	2400      	movs	r4, #0
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c100:	4798      	blx	r3
 800c102:	2000      	movs	r0, #0
 800c104:	e7e0      	b.n	800c0c8 <_raise_r+0x12>
	...

0800c108 <raise>:
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <raise+0xc>)
 800c10a:	4601      	mov	r1, r0
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f7ff bfd2 	b.w	800c0b6 <_raise_r>
 800c112:	bf00      	nop
 800c114:	20000028 	.word	0x20000028

0800c118 <_kill_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	2300      	movs	r3, #0
 800c11c:	4d06      	ldr	r5, [pc, #24]	; (800c138 <_kill_r+0x20>)
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	602b      	str	r3, [r5, #0]
 800c126:	f7f7 fc48 	bl	80039ba <_kill>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	d102      	bne.n	800c134 <_kill_r+0x1c>
 800c12e:	682b      	ldr	r3, [r5, #0]
 800c130:	b103      	cbz	r3, 800c134 <_kill_r+0x1c>
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	bd38      	pop	{r3, r4, r5, pc}
 800c136:	bf00      	nop
 800c138:	200006dc 	.word	0x200006dc

0800c13c <_getpid_r>:
 800c13c:	f7f7 bc36 	b.w	80039ac <_getpid>

0800c140 <__sread>:
 800c140:	b510      	push	{r4, lr}
 800c142:	460c      	mov	r4, r1
 800c144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c148:	f000 f8a8 	bl	800c29c <_read_r>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	bfab      	itete	ge
 800c150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c152:	89a3      	ldrhlt	r3, [r4, #12]
 800c154:	181b      	addge	r3, r3, r0
 800c156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c15a:	bfac      	ite	ge
 800c15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c15e:	81a3      	strhlt	r3, [r4, #12]
 800c160:	bd10      	pop	{r4, pc}

0800c162 <__swrite>:
 800c162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c166:	461f      	mov	r7, r3
 800c168:	898b      	ldrh	r3, [r1, #12]
 800c16a:	4605      	mov	r5, r0
 800c16c:	05db      	lsls	r3, r3, #23
 800c16e:	460c      	mov	r4, r1
 800c170:	4616      	mov	r6, r2
 800c172:	d505      	bpl.n	800c180 <__swrite+0x1e>
 800c174:	2302      	movs	r3, #2
 800c176:	2200      	movs	r2, #0
 800c178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17c:	f000 f874 	bl	800c268 <_lseek_r>
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	4632      	mov	r2, r6
 800c184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	4628      	mov	r0, r5
 800c18c:	463b      	mov	r3, r7
 800c18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	f000 b823 	b.w	800c1e0 <_write_r>

0800c19a <__sseek>:
 800c19a:	b510      	push	{r4, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a2:	f000 f861 	bl	800c268 <_lseek_r>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	bf15      	itete	ne
 800c1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1b6:	81a3      	strheq	r3, [r4, #12]
 800c1b8:	bf18      	it	ne
 800c1ba:	81a3      	strhne	r3, [r4, #12]
 800c1bc:	bd10      	pop	{r4, pc}

0800c1be <__sclose>:
 800c1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c2:	f000 b81f 	b.w	800c204 <_close_r>

0800c1c6 <__ascii_wctomb>:
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	b141      	cbz	r1, 800c1de <__ascii_wctomb+0x18>
 800c1cc:	2aff      	cmp	r2, #255	; 0xff
 800c1ce:	d904      	bls.n	800c1da <__ascii_wctomb+0x14>
 800c1d0:	228a      	movs	r2, #138	; 0x8a
 800c1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	4770      	bx	lr
 800c1da:	2001      	movs	r0, #1
 800c1dc:	700a      	strb	r2, [r1, #0]
 800c1de:	4770      	bx	lr

0800c1e0 <_write_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4d05      	ldr	r5, [pc, #20]	; (800c200 <_write_r+0x20>)
 800c1ec:	602a      	str	r2, [r5, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f7f7 fc1a 	bl	8003a28 <_write>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_write_r+0x1e>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_write_r+0x1e>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	200006dc 	.word	0x200006dc

0800c204 <_close_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	2300      	movs	r3, #0
 800c208:	4d05      	ldr	r5, [pc, #20]	; (800c220 <_close_r+0x1c>)
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	602b      	str	r3, [r5, #0]
 800c210:	f7f7 fc26 	bl	8003a60 <_close>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_close_r+0x1a>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_close_r+0x1a>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	200006dc 	.word	0x200006dc

0800c224 <_fstat_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	2300      	movs	r3, #0
 800c228:	4d06      	ldr	r5, [pc, #24]	; (800c244 <_fstat_r+0x20>)
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	4611      	mov	r1, r2
 800c230:	602b      	str	r3, [r5, #0]
 800c232:	f7f7 fc20 	bl	8003a76 <_fstat>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d102      	bne.n	800c240 <_fstat_r+0x1c>
 800c23a:	682b      	ldr	r3, [r5, #0]
 800c23c:	b103      	cbz	r3, 800c240 <_fstat_r+0x1c>
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	bd38      	pop	{r3, r4, r5, pc}
 800c242:	bf00      	nop
 800c244:	200006dc 	.word	0x200006dc

0800c248 <_isatty_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	2300      	movs	r3, #0
 800c24c:	4d05      	ldr	r5, [pc, #20]	; (800c264 <_isatty_r+0x1c>)
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	602b      	str	r3, [r5, #0]
 800c254:	f7f7 fc1e 	bl	8003a94 <_isatty>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_isatty_r+0x1a>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_isatty_r+0x1a>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	200006dc 	.word	0x200006dc

0800c268 <_lseek_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	2200      	movs	r2, #0
 800c272:	4d05      	ldr	r5, [pc, #20]	; (800c288 <_lseek_r+0x20>)
 800c274:	602a      	str	r2, [r5, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	f7f7 fc16 	bl	8003aa8 <_lseek>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_lseek_r+0x1e>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_lseek_r+0x1e>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	200006dc 	.word	0x200006dc

0800c28c <_malloc_usable_size_r>:
 800c28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c290:	1f18      	subs	r0, r3, #4
 800c292:	2b00      	cmp	r3, #0
 800c294:	bfbc      	itt	lt
 800c296:	580b      	ldrlt	r3, [r1, r0]
 800c298:	18c0      	addlt	r0, r0, r3
 800c29a:	4770      	bx	lr

0800c29c <_read_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4d05      	ldr	r5, [pc, #20]	; (800c2bc <_read_r+0x20>)
 800c2a8:	602a      	str	r2, [r5, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f7f7 fb9f 	bl	80039ee <_read>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_read_r+0x1e>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_read_r+0x1e>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	200006dc 	.word	0x200006dc

0800c2c0 <_init>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	bf00      	nop
 800c2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c6:	bc08      	pop	{r3}
 800c2c8:	469e      	mov	lr, r3
 800c2ca:	4770      	bx	lr

0800c2cc <_fini>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	bf00      	nop
 800c2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d2:	bc08      	pop	{r3}
 800c2d4:	469e      	mov	lr, r3
 800c2d6:	4770      	bx	lr
